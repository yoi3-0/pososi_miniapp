{"version":3,"file":"browser.min.js","sources":["../src/promisifySend.ts","../src/bridge.ts","../src/custom-event.ts","../src/index.ts","../src/browser.ts"],"sourcesContent":["import {\n  VKBridgeSubscribeHandler,\n  AnyRequestMethodName,\n  RequestProps,\n  RequestIdProp,\n  ReceiveData,\n  AnyReceiveMethodName,\n} from './types/bridge';\n\n/**\n * Creates counter interface.\n */\nfunction createCounter() {\n  return {\n    current: 0,\n    next() {\n      return ++this.current;\n    },\n  };\n}\n\n/**\n * Creates interface for resolving request promises by request id's (or not).\n */\nfunction createRequestResolver() {\n  /**\n   * @prop resolve Resolve function.\n   * @prop reject Reject function.\n   */\n  type PromiseController = {\n    resolve: (value: any) => any;\n    reject: (reason: any) => any;\n  };\n\n  const counter = createCounter();\n  const promiseControllers: Record<number | string, PromiseController | null> = {};\n\n  return {\n    /**\n     * Adds new controller with resolve/reject methods.\n     *\n     * @param controller Object with `resolve` and `reject` functions\n     * @param customId Custom `request_id`\n     * @returns New request id of the added controller.\n     */\n    add(controller: PromiseController, customId?: number | string): number | string {\n      const id = customId != null ? customId : counter.next();\n\n      promiseControllers[id] = controller;\n\n      return id;\n    },\n\n    /**\n     * Resolves/rejects an added promise by request id and the `isSuccess`\n     * predicate.\n     *\n     * @param requestId Request ID.\n     * @param data Data to pass to the resolve- or reject-function.\n     * @param isSuccess Predicate to select the desired function.\n     */\n    resolve<T>(requestId: number | string, data: T, isSuccess: (data: T) => boolean) {\n      const requestPromise = promiseControllers[requestId];\n\n      if (requestPromise) {\n        if (isSuccess(data)) {\n          requestPromise.resolve(data);\n        } else {\n          requestPromise.reject(data);\n        }\n\n        promiseControllers[requestId] = null;\n      }\n    },\n  };\n}\n\n/**\n * Returns send function that returns promises.\n *\n * @param sendEvent Send event function.\n * @param subscribe Subscribe event function.\n * @returns Send function which returns the Promise object.\n */\nexport function promisifySend(\n  sendEvent: <K extends AnyRequestMethodName>(method: K, props?: RequestProps<K> & RequestIdProp) => void,\n  subscribe: (fn: VKBridgeSubscribeHandler) => void\n) {\n  const requestResolver = createRequestResolver();\n\n  // Subscribe to receive a data\n  subscribe((event) => {\n    if (!event.detail || !event.detail.data || typeof event.detail.data !== 'object') {\n      return;\n    }\n\n    // There is no request_id in receive-only events, so we check its existence.\n    if ('request_id' in event.detail.data) {\n      const { request_id: requestId, ...data } = event.detail.data;\n\n      if (requestId) {\n        requestResolver.resolve(requestId, data, (data) => !('error_type' in data));\n      }\n    }\n  });\n\n  return function promisifiedSend<K extends AnyRequestMethodName>(\n    method: K,\n    props: RequestProps<K> & RequestIdProp = {} as RequestProps<K> & RequestIdProp\n  ): Promise<K extends AnyReceiveMethodName ? ReceiveData<K> : void> {\n    return new Promise((resolve, reject) => {\n      const requestId = requestResolver.add({ resolve, reject }, props.request_id);\n\n      sendEvent(method, {\n        ...props,\n        request_id: requestId,\n      });\n    });\n  };\n}\n","import { promisifySend } from './promisifySend';\nimport { VKBridge, VKBridgeSubscribeHandler, AnyRequestMethodName, RequestProps, RequestIdProp } from './types/bridge';\n\n/** Is the client side runtime environment */\nexport const IS_CLIENT_SIDE = typeof window !== 'undefined';\n\n/** Is the runtime environment an Android app */\nexport const IS_ANDROID_WEBVIEW = Boolean(IS_CLIENT_SIDE && (window as any).AndroidBridge);\n\n/** Is the runtime environment an iOS app */\nexport const IS_IOS_WEBVIEW = Boolean(\n  IS_CLIENT_SIDE &&\n    (window as any).webkit &&\n    (window as any).webkit.messageHandlers &&\n    (window as any).webkit.messageHandlers.VKWebAppClose\n);\n\n/** Is the runtime environment a browser */\nexport const IS_WEB = IS_CLIENT_SIDE && !IS_ANDROID_WEBVIEW && !IS_IOS_WEBVIEW;\n\n/** Is the runtime environment m.vk.com */\nexport const IS_MVK = IS_WEB && /(^\\?|&)vk_platform=mobile_web(&|$)/.test(location.search);\n\n/** Is the runtime environment vk.com */\nexport const IS_DESKTOP_VK = IS_WEB && !IS_MVK;\n\n/** Type of subscribe event */\nexport const EVENT_TYPE = IS_WEB ? 'message' : 'VKWebAppEvent';\n\n/** Methods supported on the desktop */\nexport const DESKTOP_METHODS = [\n  'VKWebAppInit',\n  'VKWebAppGetCommunityAuthToken',\n  'VKWebAppAddToCommunity',\n  'VKWebAppAddToHomeScreenInfo',\n  'VKWebAppClose',\n  'VKWebAppCopyText',\n  'VKWebAppGetUserInfo',\n  'VKWebAppSetLocation',\n  'VKWebAppSendToClient',\n  'VKWebAppGetClientVersion',\n  'VKWebAppGetPhoneNumber',\n  'VKWebAppGetEmail',\n  'VKWebAppGetGroupInfo',\n  'VKWebAppGetGeodata',\n  'VKWebAppGetCommunityToken',\n  'VKWebAppSetTitle',\n  'VKWebAppGetAuthToken',\n  'VKWebAppCallAPIMethod',\n  'VKWebAppJoinGroup',\n  'VKWebAppLeaveGroup',\n  'VKWebAppAllowMessagesFromGroup',\n  'VKWebAppDenyNotifications',\n  'VKWebAppAllowNotifications',\n  'VKWebAppOpenPayForm',\n  'VKWebAppOpenApp',\n  'VKWebAppShare',\n  'VKWebAppShowWallPostBox',\n  'VKWebAppScroll',\n  'VKWebAppShowOrderBox',\n  'VKWebAppShowLeaderBoardBox',\n  'VKWebAppShowInviteBox',\n  'VKWebAppShowRequestBox',\n  'VKWebAppAddToFavorites',\n  'VKWebAppShowCommunityWidgetPreviewBox',\n  'VKWebAppShowStoryBox',\n  'VKWebAppStorageGet',\n  'VKWebAppStorageGetKeys',\n  'VKWebAppStorageSet',\n  'VKWebAppFlashGetInfo',\n  'VKWebAppSubscribeStoryApp',\n  'VKWebAppOpenWallPost',\n  'VKWebAppCheckAllowedScopes',\n  'VKWebAppShowNativeAds',\n\n  // Desktop web specific events\n  ...(IS_DESKTOP_VK ? ['VKWebAppResizeWindow', 'VKWebAppAddToMenu', 'VKWebAppShowSubscriptionBox', 'VKWebAppShowInstallPushBox', 'VKWebAppGetFriends'] : ['VKWebAppShowImages']),\n];\n\n/** Android VK Bridge interface. */\nconst androidBridge: Record<string, (serializedData: string) => void> | undefined = IS_CLIENT_SIDE\n  ? (window as any).AndroidBridge\n  : undefined;\n\n/** iOS VK Bridge interface. */\nconst iosBridge: Record<string, { postMessage?: (data: any) => void }> | undefined = IS_IOS_WEBVIEW\n  ? (window as any).webkit.messageHandlers\n  : undefined;\n\n/**\n * Creates a VK Bridge API that holds functions for interact with runtime\n * environment.\n *\n * @param version Version of the package\n */\nexport function createVKBridge(version: string): VKBridge {\n  /** Current frame id. */\n  let webFrameId: string | undefined = undefined;\n\n  /** List of functions that subscribed on events. */\n  const subscribers: VKBridgeSubscribeHandler[] = [];\n\n  /**\n   * Sends an event to the runtime env. In the case of Android/iOS application\n   * env is the application itself. In the case of the browser, the parent\n   * frame in which the event handlers is located.\n   *\n   * @param method The method (event) name to send\n   * @param [props] Method properties\n   */\n  function send<K extends AnyRequestMethodName>(method: K, props?: RequestProps<K> & RequestIdProp) {\n    // Sending data through Android bridge\n    if (androidBridge && androidBridge[method]) {\n      androidBridge[method](JSON.stringify(props));\n    }\n\n    // Sending data through iOS bridge\n    else if (iosBridge && iosBridge[method] && typeof iosBridge[method].postMessage === 'function') {\n      iosBridge[method].postMessage!(props);\n    }\n\n    // Sending data through web bridge\n    else if (IS_WEB) {\n      parent.postMessage(\n        {\n          handler: method,\n          params: props,\n          type: 'vk-connect',\n          webFrameId,\n          connectVersion: version,\n        },\n        '*'\n      );\n    }\n  }\n\n  /**\n   * Adds an event listener. It will be called any time a data is received.\n   *\n   * @param listener A callback to be invoked on every event receive.\n   */\n  function subscribe(listener: VKBridgeSubscribeHandler) {\n    subscribers.push(listener);\n  }\n\n  /**\n   * Removes an event listener which has been subscribed for event listening.\n   *\n   * @param listener A callback to unsubscribe.\n   */\n  function unsubscribe(listener: VKBridgeSubscribeHandler) {\n    const index = subscribers.indexOf(listener);\n\n    if (index > -1) {\n      subscribers.splice(index, 1);\n    }\n  }\n\n  /**\n   * Checks if a method is supported on runtime platform.\n   *\n   * @param method Method (event) name to check.\n   * @returns Result of checking.\n   */\n  function supports<K extends AnyRequestMethodName>(method: K): boolean {\n    if (IS_ANDROID_WEBVIEW) {\n      // Android support check\n      return !!(androidBridge && typeof androidBridge[method] === 'function');\n    } else if (IS_IOS_WEBVIEW) {\n      // iOS support check\n      return !!(iosBridge && iosBridge[method] && typeof iosBridge[method].postMessage === 'function');\n    } else if (IS_WEB) {\n      // Web support check\n      return DESKTOP_METHODS.indexOf(method) > -1;\n    }\n\n    return false;\n  }\n\n  /**\n   * Checks whether the runtime is a WebView.\n   *\n   * @returns Result of checking.\n   */\n  function isWebView(): boolean {\n    return IS_IOS_WEBVIEW || IS_ANDROID_WEBVIEW;\n  }\n\n  /**\n   * Checks whether the runtime is an iframe.\n   *\n   * @returns Result of checking.\n   */\n  function isIframe(): boolean {\n    return IS_WEB && window.parent !== window;\n  }\n\n  /**\n   * Checks whether the runtime is embedded.\n   *\n   * @returns Result of checking.\n   */\n  function isEmbedded(): boolean {\n    return isWebView() || isIframe();\n  }\n\n  /**\n   * Checks whether the runtime is standalone.\n   *\n   * @returns Result of checking.\n   */\n  function isStandalone(): boolean {\n    return !isEmbedded();\n  }\n\n  // Subscribes to listening messages from a runtime for calling each\n  // subscribed event listener.\n  if (typeof window !== 'undefined' && 'addEventListener' in window) {\n    window.addEventListener(EVENT_TYPE, (event: any) => {\n      if (IS_IOS_WEBVIEW || IS_ANDROID_WEBVIEW) {\n        // If it's webview\n        return [...subscribers].map((fn) => fn.call(null, event));\n      } else if (IS_WEB && event && event.data) {\n        // If it's web\n        const { type, data, frameId } = event.data;\n\n        if (type && type === 'VKWebAppSettings') {\n          webFrameId = frameId;\n        } else {\n          [...subscribers].map((fn) => fn({ detail: { type, data } }));\n        }\n      }\n    });\n  }\n\n  /**\n   * Enhanced send functions for the ability to receive response data in\n   * the Promise object.\n   */\n  const sendPromise = promisifySend(send, subscribe);\n\n  return {\n    send: sendPromise,\n    sendPromise,\n    subscribe,\n    unsubscribe,\n    supports,\n    isWebView,\n    isIframe,\n    isEmbedded,\n    isStandalone,\n  };\n}\n","/**\n * Creates the CustomEvent polyfill. VK apps use the CustomEvent for transfer\n * data.\n */\nexport function createCustomEventPolyfill() {\n  function CustomEvent<T>(typeArg: string, eventInitDict?: CustomEventInit<T>): CustomEvent<T> {\n    const params = eventInitDict || { bubbles: false, cancelable: false, detail: undefined };\n\n    const evt = document.createEvent('CustomEvent');\n    evt.initCustomEvent(typeArg, !!params.bubbles, !!params.cancelable, params.detail);\n\n    return evt;\n  }\n\n  CustomEvent.prototype = Event.prototype;\n\n  return CustomEvent;\n}\n","import { createVKBridge } from './bridge';\nimport { createCustomEventPolyfill } from './custom-event';\nimport { version } from '../package.json';\nimport './custom-event';\n\n// Applying CustomEvent polyfill\nif (typeof window !== 'undefined' && !window.CustomEvent) {\n  (window as any).CustomEvent = createCustomEventPolyfill();\n}\n\n// VK Bridge API\nconst bridge = createVKBridge(version);\n\n// Export typings\nexport * from './types/data';\nexport * from './types/bridge';\nexport * from './types/middleware';\nexport * from './types/deprecated';\n\nexport { applyMiddleware } from './applyMiddleware';\nexport { bridge as default };\n","import bridge from './index';\n\n// @ts-ignore\nwindow.vkBridge = window.vkConnect = bridge;\n"],"names":["promisifySend","sendEvent","subscribe","counter","promiseControllers","requestResolver","current","next","this","add","controller","customId","id","resolve","requestId","data","isSuccess","requestPromise","reject","event","detail","_a","method","props","Promise","request_id","IS_CLIENT_SIDE","window","IS_ANDROID_WEBVIEW","Boolean","AndroidBridge","IS_IOS_WEBVIEW","webkit","messageHandlers","VKWebAppClose","IS_WEB","IS_MVK","test","location","search","EVENT_TYPE","DESKTOP_METHODS","androidBridge","undefined","iosBridge","CustomEvent","typeArg","eventInitDict","params","bubbles","cancelable","evt","document","createEvent","initCustomEvent","prototype","Event","bridge","version","webFrameId","subscribers","listener","push","isWebView","isIframe","parent","isEmbedded","addEventListener","__spreadArrays","map","fn","call","type_1","data_1","frameId","type","sendPromise","JSON","stringify","postMessage","handler","connectVersion","send","unsubscribe","index","indexOf","splice","supports","isStandalone","createVKBridge","vkBridge","vkConnect"],"mappings":"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"}