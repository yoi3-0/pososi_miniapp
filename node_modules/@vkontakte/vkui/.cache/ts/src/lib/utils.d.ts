import { ReactNode } from 'react';
import { Ref, RefWithCurrent } from '../types';
export declare function isNumeric(value: any): boolean;
export declare function isFunction(value: any): value is ((...args: any[]) => any);
export declare function throttle(fn: any, threshhold?: number, scope?: Window & typeof globalThis): (...args: any[]) => void;
export declare function debounce(fn: any, delay: number, context?: Window & typeof globalThis): (...a: any[]) => void;
export declare function leadingZero(val: number): string;
export declare function hasReactNode(value: ReactNode): boolean;
export declare function isPrimitiveReactNode(node: ReactNode): boolean;
export declare function setRef<T>(element: T, ref: Ref<T>): void;
export declare function multiRef<T>(...refs: Array<Ref<T>>): RefWithCurrent<T>;
export declare const noop: () => void;
export declare function createCustomEvent(window: any, type: string, eventInitDict?: any): any;
export declare function getTitleFromChildren(children: ReactNode): string;
