import React, { Component, HTMLAttributes } from 'react';
import { AdaptivityProps } from '../../hoc/withAdaptivity';
import { HasPlatform } from '../../types';
import { ItemClickHandler } from './ActionSheetContext';
export declare type PopupDirectionFunction = (elRef: React.RefObject<HTMLDivElement>) => 'top' | 'bottom';
export interface ActionSheetProps extends HTMLAttributes<HTMLDivElement>, HasPlatform, AdaptivityProps {
    header?: React.ReactNode;
    text?: React.ReactNode;
    onClose?: VoidFunction;
    /**
     * Desktop only
     */
    toggleRef: Element;
    /**
     * Desktop only
     */
    popupDirection?: 'top' | 'bottom' | PopupDirectionFunction;
    /**
     * iOS only
     */
    iosCloseItem: React.ReactNode;
}
export interface ActionSheetState {
    closing: boolean;
}
export declare type CloseCallback = () => void;
export declare type AnimationEndCallback = (e?: AnimationEvent) => void;
declare class ActionSheet extends Component<ActionSheetProps, ActionSheetState> {
    constructor(props: ActionSheetProps);
    state: ActionSheetState;
    elRef: React.RefObject<HTMLDivElement>;
    private transitionFinishTimeout;
    static defaultProps: Partial<ActionSheetProps>;
    onClose: CloseCallback;
    onItemClick: ItemClickHandler;
    get isDesktop(): boolean;
    waitTransitionFinish(eventHandler: AnimationEndCallback): void;
    render(): JSX.Element;
}
declare const _default: typeof ActionSheet;
export default _default;
