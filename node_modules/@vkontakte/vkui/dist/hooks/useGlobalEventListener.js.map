{"version":3,"sources":["../../src/hooks/useGlobalEventListener.ts"],"names":["useEffect","useEventListener","useGlobalEventListener","element","event","cb","options","listener","add","remove","Boolean"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,gBAAT;AAcA,OAAO,SAASC,sBAAT,CAAgCC,OAAhC,EAA8CC,KAA9C,EAA6DC,EAA7D,EAAqFC,OAArF,EAAwH;AAC7H,MAAMC,QAAQ,GAAGN,gBAAgB,CAACG,KAAD,EAAQC,EAAR,EAAYC,OAAZ,CAAjC;AACAN,EAAAA,SAAS,CAAC;AAAA,WAAMK,EAAE,GAAGE,QAAQ,CAACC,GAAT,CAAaL,OAAb,CAAH,GAA2BI,QAAQ,CAACE,MAAT,EAAnC;AAAA,GAAD,EAAuD,CAACC,OAAO,CAACL,EAAD,CAAR,CAAvD,CAAT;AACD","sourcesContent":["import { useEffect } from 'react';\nimport { useEventListener } from './useEventListener';\n\nexport function useGlobalEventListener<K extends keyof GlobalEventHandlersEventMap>(\n  element: HTMLElement | HTMLDocument | Window,\n  event: K,\n  cb: false | null | ((ev: GlobalEventHandlersEventMap[K]) => any),\n  options?: AddEventListenerOptions,\n): void;\nexport function useGlobalEventListener(\n  element: HTMLElement | HTMLDocument | Window,\n  event: string,\n  cb: false | null | ((ev: Event) => any),\n  options?: AddEventListenerOptions,\n): void;\nexport function useGlobalEventListener(element: any, event: string, cb: (ev: Event) => any, options?: AddEventListenerOptions) {\n  const listener = useEventListener(event, cb, options);\n  useEffect(() => cb ? listener.add(element) : listener.remove(), [Boolean(cb)]);\n}\n"],"file":"useGlobalEventListener.js"}