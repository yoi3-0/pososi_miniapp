{"version":3,"sources":["../../src/hooks/useEventListener.ts"],"names":["noop","useCallback","useEffect","useRef","canUseDOM","useIsomorphicLayoutEffect","useEventListener","event","_cb","_options","cbRef","current","cb","e","detach","remove","add","el","options","addEventListener","removeEventListener"],"mappings":";AAAA,SAASA,IAAT;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,QAA+C,OAA/C;AACA,SAASC,SAAT;AACA,SAASC,yBAAT;AAaA,OAAO,SAASC,gBAAT,CAA0BC,KAA1B,EAAyCC,GAAzC,EAAkEC,QAAlE,EAAsG;AAC3G,MAAMC,KAAK,GAAGP,MAAM,CAACK,GAAD,CAApB;AACAH,EAAAA,yBAAyB,CAAC,YAAM;AAC9BK,IAAAA,KAAK,CAACC,OAAN,GAAgBH,GAAhB;AACD,GAFwB,EAEtB,CAACA,GAAD,CAFsB,CAAzB;AAGA,MAAMI,EAAE,GAAGX,WAAW,CAAa,UAACY,CAAD;AAAA,WAAOH,KAAK,CAACC,OAAN,CAAcE,CAAd,CAAP;AAAA,GAAb,EAAsC,EAAtC,CAAtB;AAEA,MAAMC,MAAM,GAAGX,MAAM,CAACH,IAAD,CAArB;AACA,MAAMe,MAAM,GAAGd,WAAW,CAAC;AAAA,WAAMa,MAAM,CAACH,OAAP,EAAN;AAAA,GAAD,EAAyB,EAAzB,CAA1B;AACA,MAAMK,GAAG,GAAGf,WAAW,CAAC,UAACgB,EAAD,EAAgC;AACtD,QAAI,CAACb,SAAL,EAAgB;AACd;AACD;;AACDW,IAAAA,MAAM;;AACN,QAAMG,OAAO,qBAAQT,QAAR,CAAb;;AACAQ,IAAAA,EAAE,CAACE,gBAAH,CAAoBZ,KAApB,EAA2BK,EAA3B,EAA+BM,OAA/B;;AACAJ,IAAAA,MAAM,CAACH,OAAP,GAAiB,YAAM;AACrBM,MAAAA,EAAE,CAACG,mBAAH,CAAuBb,KAAvB,EAA8BK,EAA9B,EAAkCM,OAAlC;AACAJ,MAAAA,MAAM,CAACH,OAAP,GAAiBX,IAAjB;AACD,KAHD;AAID,GAXsB,EAWpB,EAXoB,CAAvB;AAYAE,EAAAA,SAAS,CAAC;AAAA,WAAMa,MAAN;AAAA,GAAD,EAAe,EAAf,CAAT;AAEA,SAAO;AAAEC,IAAAA,GAAG,EAAHA,GAAF;AAAOD,IAAAA,MAAM,EAANA;AAAP,GAAP;AACD","sourcesContent":["import { noop } from '../lib/utils';\nimport { useCallback, useEffect, useRef } from 'react';\nimport { canUseDOM } from '../lib/dom';\nimport { useIsomorphicLayoutEffect } from '../lib/useIsomorphicLayoutEffect';\n\ninterface EventListenerHandle {\n  add(el: HTMLElement | Document): void;\n  remove(): void;\n}\n\nexport function useEventListener<K extends keyof GlobalEventHandlersEventMap>(\n  event: K,\n  _cb: (ev: GlobalEventHandlersEventMap[K]) => any,\n  _options?: AddEventListenerOptions,\n): EventListenerHandle;\nexport function useEventListener(event: string, _cb: (ev: Event) => any, _options?: AddEventListenerOptions): EventListenerHandle;\nexport function useEventListener(event: string, _cb: (ev: Event) => any, _options?: AddEventListenerOptions) {\n  const cbRef = useRef(_cb);\n  useIsomorphicLayoutEffect(() => {\n    cbRef.current = _cb;\n  }, [_cb]);\n  const cb = useCallback<typeof _cb>((e) => cbRef.current(e), []);\n\n  const detach = useRef(noop);\n  const remove = useCallback(() => detach.current(), []);\n  const add = useCallback((el: HTMLElement | Document) => {\n    if (!canUseDOM) {\n      return;\n    }\n    remove();\n    const options = { ..._options };\n    el.addEventListener(event, cb, options);\n    detach.current = () => {\n      el.removeEventListener(event, cb, options);\n      detach.current = noop;\n    };\n  }, []);\n  useEffect(() => remove, []);\n\n  return { add, remove };\n}\n"],"file":"useEventListener.js"}