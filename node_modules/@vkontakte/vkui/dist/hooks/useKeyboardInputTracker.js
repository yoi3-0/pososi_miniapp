import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import { useCallback, useState } from 'react';
import { useDOM } from "../lib/dom";
import { useGlobalEventListener } from "./useGlobalEventListener";
export function useKeyboardInputTracker() {
  var _useDOM = useDOM(),
      document = _useDOM.document;

  var _useState = useState(true),
      _useState2 = _slicedToArray(_useState, 2),
      isKeyboardInputActive = _useState2[0],
      toggleKeyboardInput = _useState2[1];

  var enableKeyboardInput = useCallback(function (_ref) {
    var key = _ref.key;

    if (key.toUpperCase() === 'TAB') {
      toggleKeyboardInput(true);
    }
  }, []);
  var disableKeyboardInput = useCallback(function () {
    toggleKeyboardInput(false);
  }, []);
  var eventOptions = {
    passive: true,
    capture: true
  };
  useGlobalEventListener(document, 'keydown', enableKeyboardInput, eventOptions);
  useGlobalEventListener(document, 'mousedown', disableKeyboardInput, eventOptions);
  useGlobalEventListener(document, 'touchstart', disableKeyboardInput, eventOptions);
  return isKeyboardInputActive;
}
//# sourceMappingURL=useKeyboardInputTracker.js.map