{"version":3,"sources":["../../../src/hooks/useInsets.ts"],"names":["initialState","bottom","top","left","right","resolveInsets","e","detail","type","data","insets","vkBridge","subscribe","htmlElement","window","document","documentElement","key","hasOwnProperty","style","setProperty","useInsets","setInsets","connectListener","unsubscribe"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA,IAAIA,YAAoB,GAAG;AACzBC,EAAAA,MAAM,EAAE,IADiB;AAEzBC,EAAAA,GAAG,EAAE,IAFoB;AAGzBC,EAAAA,IAAI,EAAE,IAHmB;AAIzBC,EAAAA,KAAK,EAAE;AAJkB,CAA3B;;AAgBA,SAASC,aAAT,CAAuBC,CAAvB,EAAsD;AAAA,kBAC7BA,CAAC,CAACC,MAD2B;AAAA,MAC5CC,IAD4C,aAC5CA,IAD4C;AAAA,MACtCC,IADsC,aACtCA,IADsC;;AAEpD,UAAQD,IAAR;AACE,SAAK,sBAAL;AACA,SAAK,sBAAL;AAA6B;AAA7B,UACUE,MADV,GACqBD,IADrB,CACUC,MADV;;AAEE,UAAIA,MAAJ,EAAY;AACV,2EACKA,MADL;AAEET,UAAAA,MAAM,EAAES,MAAM,CAACT,MAAP,GAAgB,GAAhB,GAAsB,CAAtB,GAA0BS,MAAM,CAACT,MAF3C,CAEmD;;AAFnD;AAID;;AATL;;AAWA,SAAO,IAAP;AACD;;AAEDU,kBAASC,SAAT,CAAmB,UAACN,CAAD,EAAoB;AACrC,MAAMI,MAAM,GAAGL,aAAa,CAACC,CAAD,CAA5B;;AACA,MAAII,MAAJ,EAAY;AACV,QAAMG,WAAW,GAAGC,MAAM,CAACC,QAAP,CAAgBC,eAApC;;AACA,SAAK,IAAIC,GAAT,IAAgBP,MAAhB,EAAwB;AACtB,UAAIA,MAAM,CAACQ,cAAP,CAAsBD,GAAtB,MAA+BP,MAAM,CAACO,GAAD,CAAN,GAA8B,CAA9B,IAAmCA,GAAG,KAAK,QAA1E,CAAJ,EAAyF;AACvFJ,QAAAA,WAAW,CAACM,KAAZ,CAAkBC,WAAlB,6BAAmDH,GAAnD,aAA6DP,MAAM,CAACO,GAAD,CAAnE;AACD;AACF;;AACDjB,IAAAA,YAAY,GAAGU,MAAf;AACD;AACF,CAXD;;AAaO,SAASW,SAAT,GAA6B;AAAA,kBACN,qBAAiBrB,YAAjB,CADM;AAAA;AAAA,MAC3BU,MAD2B;AAAA,MACnBY,SADmB;;AAGlC,wBAAU,YAAM;AACd,aAASC,eAAT,CAAyBjB,CAAzB,EAAyC;AACvC,UAAMI,MAAM,GAAGL,aAAa,CAACC,CAAD,CAA5B;;AACA,UAAII,MAAJ,EAAY;AACVY,QAAAA,SAAS,CAACZ,MAAD,CAAT;AACD;AACF;;AAEDC,sBAASC,SAAT,CAAmBW,eAAnB;;AACA,WAAO,YAAM;AACXZ,wBAASa,WAAT,CAAqBD,eAArB;AACD,KAFD;AAGD,GAZD,EAYG,EAZH;AAcA,SAAOb,MAAP;AACD","sourcesContent":["import { useEffect, useState } from 'react';\nimport vkBridge, { Insets } from '@vkontakte/vk-bridge';\n\nlet initialState: Insets = {\n  bottom: null,\n  top: null,\n  left: null,\n  right: null,\n};\n\ninterface BridgeEvent {\n  detail: {\n    type: string;\n    data: {\n      [index: string]: any;\n    };\n  };\n}\n\nfunction resolveInsets(e: BridgeEvent): Insets | null {\n  const { type, data } = e.detail;\n  switch (type) {\n    case 'VKWebAppUpdateConfig':\n    case 'VKWebAppUpdateInsets': // Устаревшее событие vk-bridge\n      const { insets } = data;\n      if (insets) {\n        return {\n          ...insets,\n          bottom: insets.bottom > 150 ? 0 : insets.bottom, // если больше 150 – значит открылась клава и она сама работает как инсет, то есть наш нужно занулить\n        };\n      }\n  }\n  return null;\n}\n\nvkBridge.subscribe((e: BridgeEvent) => {\n  const insets = resolveInsets(e);\n  if (insets) {\n    const htmlElement = window.document.documentElement;\n    for (let key in insets) {\n      if (insets.hasOwnProperty(key) && (insets[key as keyof Insets] > 0 || key === 'bottom')) {\n        htmlElement.style.setProperty(`--safe-area-inset-${key}`, `${insets[key as keyof Insets]}px`);\n      }\n    }\n    initialState = insets;\n  }\n});\n\nexport function useInsets(): Insets {\n  const [insets, setInsets] = useState<Insets>(initialState);\n\n  useEffect(() => {\n    function connectListener(e: BridgeEvent) {\n      const insets = resolveInsets(e);\n      if (insets) {\n        setInsets(insets);\n      }\n    }\n\n    vkBridge.subscribe(connectListener);\n    return () => {\n      vkBridge.unsubscribe(connectListener);\n    };\n  }, []);\n\n  return insets;\n}\n"],"file":"useInsets.js"}