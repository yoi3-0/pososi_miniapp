{"version":3,"sources":["../../../../src/components/Slider/Slider.tsx"],"names":["Slider","onChange","defaultValue","props","isControlled","value","min","localValue","setValue","max","handleChange","nextValue","event","disabled","rangeValue","defaultProps","step"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAIA,IAAMA,MAAM,GAAG,SAATA,MAAS,OAAuD;AAAA,MAApDC,QAAoD,QAApDA,QAAoD;AAAA,MAA1CC,YAA0C,QAA1CA,YAA0C;AAAA,MAAzBC,KAAyB;AACpE,MAAMC,YAAY,GAAGD,KAAK,CAACE,KAAN,IAAe,IAApC;;AADoE,kBAGrC,qBAASH,YAAY,IAAI,IAAhB,GAAuBC,KAAK,CAACG,GAA7B,GAAmCJ,YAA5C,CAHqC;AAAA;AAAA,MAG7DK,UAH6D;AAAA,MAGjDC,QAHiD;;AAIpE,MAAMH,KAAK,GAAG,iBAAMD,YAAY,GAAGD,KAAK,CAACE,KAAT,GAAiBE,UAAnC,EAA+CJ,KAAK,CAACG,GAArD,EAA0DH,KAAK,CAACM,GAAhE,CAAd;AAEA,MAAMC,YAA8D,GAAG,wBAAY,UAACC,SAAD,EAAYC,KAAZ,EAAsB;AACvG,QAAIT,KAAK,CAACU,QAAN,IAAkBR,KAAK,KAAKM,SAAS,CAAC,CAAD,CAAzC,EAA8C;AAC5C;AACD;;AACD,KAACP,YAAD,IAAiBI,QAAQ,CAACG,SAAS,CAAC,CAAD,CAAV,CAAzB;AACAV,IAAAA,QAAQ,IAAIA,QAAQ,CAACU,SAAS,CAAC,CAAD,CAAV,EAAeC,KAAf,CAApB;AACD,GANsE,EAMpE,CAACX,QAAD,EAAWG,YAAX,EAAyBC,KAAzB,CANoE,CAAvE;AAQA,MAAMS,UAA0B,GAAG,oBAAQ;AAAA,WAAM,CAAC,IAAD,EAAOT,KAAP,CAAN;AAAA,GAAR,EAA6B,CAACA,KAAD,CAA7B,CAAnC;AACA,SAAO,qCAAC,gCAAD,6BAAqBF,KAArB;AAA4B,IAAA,KAAK,EAAEW,UAAnC;AAA+C,IAAA,QAAQ,EAAEJ;AAAzD,KAAP;AACD,CAhBD;;AAkBAV,MAAM,CAACe,YAAP,GAAsB;AACpBT,EAAAA,GAAG,EAAE,CADe;AAEpBG,EAAAA,GAAG,EAAE,GAFe;AAGpBO,EAAAA,IAAI,EAAE;AAHc,CAAtB;eAMehB,M","sourcesContent":["import { useCallback, useMemo, useState } from 'react';\nimport { clamp } from '../../helpers/math';\nimport { UniversalSlider, UniversalSliderProps, UniversalValue } from '../RangeSlider/UniversalSlider';\n\nexport type SliderProps = UniversalSliderProps<number>;\n\nconst Slider = ({ onChange, defaultValue, ...props }: SliderProps) => {\n  const isControlled = props.value != null;\n\n  const [localValue, setValue] = useState(defaultValue == null ? props.min : defaultValue);\n  const value = clamp(isControlled ? props.value : localValue, props.min, props.max);\n\n  const handleChange: UniversalSliderProps<UniversalValue>['onChange'] = useCallback((nextValue, event) => {\n    if (props.disabled || value === nextValue[1]) {\n      return;\n    }\n    !isControlled && setValue(nextValue[1]);\n    onChange && onChange(nextValue[1], event);\n  }, [onChange, isControlled, value]);\n\n  const rangeValue: [null, number] = useMemo(() => [null, value], [value]);\n  return <UniversalSlider {...props} value={rangeValue} onChange={handleChange} />;\n};\n\nSlider.defaultProps = {\n  min: 0,\n  max: 100,\n  step: 0,\n};\n\nexport default Slider;\n"],"file":"Slider.js"}