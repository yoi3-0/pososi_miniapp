import { AllHTMLAttributes, Component, ElementType, KeyboardEventHandler, RefCallback } from 'react';
import { TouchEventHandler, TouchProps } from '../Touch/Touch';
import { VKUITouchEventHander } from '../../lib/touch';
import { HasPlatform, HasRootRef, Ref } from '../../types';
import { AdaptivityProps } from '../../hoc/withAdaptivity';
export interface TappableProps extends AllHTMLAttributes<HTMLElement>, HasRootRef<HTMLElement>, HasPlatform, AdaptivityProps {
    Component?: ElementType;
    /**
     * Длительность показа active-состояния
     */
    activeEffectDelay?: number;
    stopPropagation?: boolean;
    /**
     * Указывает, должен ли компонент реагировать на hover-состояние
     */
    hasHover?: boolean;
    /**
     * Указывает, должен ли компонент реагировать на active-состояние
     */
    hasActive?: boolean;
    /**
     * Стиль подсветки active-состояния. Если передать произвольную строку, она добавится как css-класс во время active
     */
    activeMode?: 'opacity' | 'background' | string;
    /**
     * Стиль подсветки hover-состояния. Если передать произвольную строку, она добавится как css-класс во время hover
     */
    hoverMode?: 'opacity' | 'background' | string;
    /**
     * @ignore Временное свойство для работы над доступностью. Указывает, должен ли компонент показывать focus ring при навигации с клавиатуры.
     * Исчезнет после того, как мы адаптируем отображение всех компонентов на базе Tappable.
     */
    hasFocusVisible?: boolean;
}
export interface TappableState {
    clicks?: {
        [index: string]: {
            x: number;
            y: number;
        };
    };
    hovered?: boolean;
    active?: boolean;
    ts?: number;
    hasHover?: boolean;
    hasActive?: boolean;
}
export interface RootComponentProps extends TouchProps {
    ref?: Ref<HTMLElement>;
}
export interface StorageItem {
    activeTimeout: number;
    timeout?: number;
    stop(): void;
}
export interface Storage {
    [index: string]: StorageItem;
}
export declare type GetStorage = () => StorageItem;
export declare const ACTIVE_DELAY = 70;
export declare const ACTIVE_EFFECT_DELAY = 600;
declare class Tappable extends Component<TappableProps, TappableState> {
    constructor(props: TappableProps);
    id: string;
    isSlide: boolean;
    insideTouchRoot: boolean;
    container: HTMLElement;
    timeout: number;
    wavesTimeout: number;
    static defaultProps: {
        stopPropagation: boolean;
        disabled: boolean;
        hasFocusVisible: boolean;
        hasHover: boolean;
        hoverMode: string;
        hasActive: boolean;
        activeMode: string;
        activeEffectDelay: number;
    };
    onKeyDown: KeyboardEventHandler;
    onStart: TouchEventHandler;
    onMove: TouchEventHandler;
    onEnd: TouchEventHandler;
    onDown: VKUITouchEventHander;
    onEnter: () => void;
    onLeave: () => void;
    start: VoidFunction;
    stop: VoidFunction;
    getStorage: GetStorage;
    getRef: RefCallback<HTMLElement>;
    componentWillUnmount(): void;
    componentDidUpdate(prevProps: TappableProps): void;
    render(): JSX.Element;
}
declare const _default: typeof Tappable;
export default _default;
