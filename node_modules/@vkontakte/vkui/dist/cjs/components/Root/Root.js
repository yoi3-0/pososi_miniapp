"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _jsxRuntime = require("../../lib/jsxRuntime");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _objectSpread3 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _createSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/createSuper"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _classNames = require("../../lib/classNames");

var _getClassName = require("../../helpers/getClassName");

var _supportEvents = require("../../lib/supportEvents");

var _platform = require("../../lib/platform");

var _withPlatform = require("../../hoc/withPlatform");

var _withContext = require("../../hoc/withContext");

var _ConfigProviderContext = require("../ConfigProvider/ConfigProviderContext");

var _SplitCol = require("../SplitCol/SplitCol");

var _AppRootPortal = require("../AppRoot/AppRootPortal");

var _dom = require("../../lib/dom");

var _ScrollContext = require("../AppRoot/ScrollContext");

var _getNavId = require("../../lib/getNavId");

var _warnOnce = require("../../lib/warnOnce");

var warn = (0, _warnOnce.warnOnce)('Root');

var Root = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(Root, _Component);

  var _super = (0, _createSuper2.default)(Root);

  function Root(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Root);
    _this = _super.call(this, props);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "animationFinishTimeout", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "viewNodes", {});
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "onAnimationEnd", function (e) {
      if (!e || ['vkui-root-android-animation-hide-back', 'vkui-root-android-animation-show-forward', 'vkui-root-ios-animation-hide-back', 'vkui-root-ios-animation-show-forward'].includes(e.animationName)) {
        var isBack = _this.state.isBack;
        var prevView = _this.state.prevView;
        var nextView = _this.state.nextView;

        _this.setState({
          activeView: nextView,
          prevView: null,
          nextView: null,
          visibleViews: [nextView],
          transition: false,
          isBack: undefined
        }, function () {
          _this.props.scroll.scrollTo(0, isBack ? _this.state.scrolls[_this.state.activeView] : 0);

          _this.props.onTransition && _this.props.onTransition({
            isBack: isBack,
            from: prevView,
            to: nextView
          });
        });
      }
    });
    _this.state = {
      activeView: props.activeView,
      prevView: null,
      nextView: null,
      visibleViews: [props.activeView],
      isBack: undefined,
      scrolls: {},
      transition: false
    };
    return _this;
  }

  (0, _createClass2.default)(Root, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      var _this2 = this;

      if (this.props.popout && !prevProps.popout) {
        this.blurActiveElement();
      } // Нужен переход


      if (this.props.activeView !== prevProps.activeView) {
        var pageYOffset = this.props.scroll.getScroll().y;
        var firstLayerId = [].concat(prevProps.children).map(function (view) {
          return (0, _getNavId.getNavId)(view.props, warn);
        }).find(function (id) {
          return id === prevProps.activeView || id === _this2.props.activeView;
        });
        var isBack = firstLayerId === this.props.activeView;
        this.blurActiveElement();
        var nextView = this.props.activeView;
        var prevView = prevProps.activeView;
        this.setState({
          scrolls: (0, _objectSpread3.default)((0, _objectSpread3.default)({}, this.state.scrolls), {}, (0, _defineProperty2.default)({}, prevProps.activeView, pageYOffset)),
          transition: true,
          activeView: null,
          nextView: nextView,
          prevView: prevView,
          visibleViews: [nextView, prevView],
          isBack: isBack
        });
      } // Начался переход


      if (!prevState.transition && this.state.transition) {
        var prevViewElement = this.viewNodes[this.state.prevView];
        var nextViewElement = this.viewNodes[this.state.nextView];

        var setPanelScroll = function setPanelScroll(e, scroll) {
          // eslint-disable-next-line no-restricted-properties
          var pan = e.querySelector('[data-vkui-active-panel=true]');
          pan && (pan.scrollTop = scroll);
        };

        setPanelScroll(prevViewElement, this.state.scrolls[this.state.prevView]);

        if (this.state.isBack) {
          setPanelScroll(nextViewElement, this.state.scrolls[this.state.nextView]);
        }

        this.waitAnimationFinish(this.state.isBack ? prevViewElement : nextViewElement, this.onAnimationEnd);
      }
    }
  }, {
    key: "shouldDisableTransitionMotion",
    value: function shouldDisableTransitionMotion() {
      return this.props.configProvider.transitionMotionEnabled === false || !this.props.splitCol.animate;
    }
  }, {
    key: "waitAnimationFinish",
    value: function waitAnimationFinish(elem, eventHandler) {
      if (this.shouldDisableTransitionMotion()) {
        eventHandler();
        return;
      }

      if (_supportEvents.animationEvent.supported) {
        elem.removeEventListener(_supportEvents.animationEvent.name, eventHandler);
        elem.addEventListener(_supportEvents.animationEvent.name, eventHandler);
      } else {
        clearTimeout(this.animationFinishTimeout);
        this.animationFinishTimeout = setTimeout(eventHandler.bind(this), this.props.platform === _platform.ANDROID || this.props.platform === _platform.VKCOM ? 300 : 600);
      }
    }
  }, {
    key: "blurActiveElement",
    value: function blurActiveElement() {
      if (_dom.canUseDOM && this.document.activeElement) {
        this.document.activeElement.blur();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props = this.props,
          popout = _this$props.popout,
          modal = _this$props.modal,
          platform = _this$props.platform,
          splitCol = _this$props.splitCol,
          configProvider = _this$props.configProvider,
          _1 = _this$props.activeView,
          onTransition = _this$props.onTransition,
          window = _this$props.window,
          document = _this$props.document,
          scroll = _this$props.scroll,
          restProps = (0, _objectWithoutProperties2.default)(_this$props, ["popout", "modal", "platform", "splitCol", "configProvider", "activeView", "onTransition", "window", "document", "scroll"]);
      var _this$state = this.state,
          transition = _this$state.transition,
          isBack = _this$state.isBack,
          prevView = _this$state.prevView,
          activeView = _this$state.activeView,
          nextView = _this$state.nextView;

      var Views = _react.default.Children.toArray(this.props.children).filter(function (view) {
        return _this3.state.visibleViews.includes((0, _getNavId.getNavId)(view.props, warn));
      });

      var baseClassName = (0, _getClassName.getClassName)('Root', platform);
      var disableAnimation = this.shouldDisableTransitionMotion();
      return (0, _jsxRuntime.createScopedElement)("div", (0, _extends2.default)({}, restProps, {
        vkuiClass: (0, _classNames.classNames)(baseClassName, {
          'Root--transition': !disableAnimation && transition,
          'Root--no-motion': disableAnimation
        })
      }), Views.map(function (view) {
        var viewId = (0, _getNavId.getNavId)(view.props, warn);
        return (0, _jsxRuntime.createScopedElement)("div", {
          key: viewId,
          ref: function ref(e) {
            return _this3.viewNodes[viewId] = e;
          },
          vkuiClass: (0, _classNames.classNames)('Root__view', {
            'Root__view--hide-back': viewId === prevView && isBack,
            'Root__view--hide-forward': viewId === prevView && !isBack,
            'Root__view--show-back': viewId === nextView && isBack,
            'Root__view--show-forward': viewId === nextView && !isBack,
            'Root__view--active': viewId === activeView
          })
        }, view);
      }), (0, _jsxRuntime.createScopedElement)(_AppRootPortal.AppRootPortal, null, !!popout && (0, _jsxRuntime.createScopedElement)("div", {
        vkuiClass: "Root__popout"
      }, popout), !!modal && (0, _jsxRuntime.createScopedElement)("div", {
        vkuiClass: "Root__modal"
      }, modal)));
    }
  }, {
    key: "document",
    get: function get() {
      return this.props.document;
    }
  }]);
  return Root;
}(_react.Component);

(0, _defineProperty2.default)(Root, "defaultProps", {
  popout: null
});

var _default = (0, _withContext.withContext)((0, _withContext.withContext)((0, _withContext.withContext)((0, _withPlatform.withPlatform)((0, _dom.withDOM)(Root)), _SplitCol.SplitColContext, 'splitCol'), _ConfigProviderContext.ConfigProviderContext, 'configProvider'), _ScrollContext.ScrollContext, 'scroll');

exports.default = _default;
//# sourceMappingURL=Root.js.map