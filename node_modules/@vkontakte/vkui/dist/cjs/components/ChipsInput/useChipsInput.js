"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useChipsInput = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = require("react");

var useChipsInput = function useChipsInput(props) {
  var value = props.value,
      getOptionValue = props.getOptionValue,
      onChange = props.onChange,
      onInputChange = props.onInputChange,
      getNewOptionData = props.getNewOptionData;

  var _useState = (0, _react.useState)(props.inputValue),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      fieldValue = _useState2[0],
      setFieldValue = _useState2[1];

  var _useState3 = (0, _react.useState)(value),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      selectedOptions = _useState4[0],
      setSelectedOptions = _useState4[1];

  var clearInput = (0, _react.useCallback)(function () {
    setFieldValue('');
    onInputChange({
      target: {
        value: ''
      }
    });
  }, [onInputChange]);
  var handleInputChange = (0, _react.useCallback)(function (e) {
    setFieldValue(e.target.value);
    onInputChange(e);
  }, [onInputChange]);
  var toggleOption = (0, _react.useCallback)(function (newOption, value) {
    var newSelectedOptions = selectedOptions.filter(function (option) {
      return getOptionValue(newOption) !== getOptionValue(option);
    });

    if (value === true) {
      newSelectedOptions.push(newOption);
    }

    setSelectedOptions(newSelectedOptions);
    onChange(newSelectedOptions);
  }, [selectedOptions, getOptionValue, onChange]);
  var addOption = (0, _react.useCallback)(function (newOption) {
    return toggleOption(newOption, true);
  }, [toggleOption]);
  var addOptionFromInput = (0, _react.useCallback)(function () {
    var trimmedValue = fieldValue === null || fieldValue === void 0 ? void 0 : fieldValue.trim();

    if (trimmedValue) {
      addOption(getNewOptionData(undefined, trimmedValue));
      clearInput();
    }
  }, [addOption, clearInput, getNewOptionData, fieldValue]);
  var removeOption = (0, _react.useCallback)(function (value) {
    toggleOption(getNewOptionData(undefined, value), false);
  }, [toggleOption, getNewOptionData]);
  (0, _react.useEffect)(function () {
    setSelectedOptions(value);
    return function () {
      return setSelectedOptions([]);
    };
  }, [props.value]);
  (0, _react.useEffect)(function () {
    setFieldValue(props.inputValue);
    return function () {
      return setFieldValue('');
    };
  }, [props.inputValue]);
  return {
    fieldValue: fieldValue,
    setFieldValue: setFieldValue,
    selectedOptions: selectedOptions,
    setSelectedOptions: setSelectedOptions,
    clearInput: clearInput,
    toggleOption: toggleOption,
    addOption: addOption,
    addOptionFromInput: addOptionFromInput,
    removeOption: removeOption,
    handleInputChange: handleInputChange
  };
};

exports.useChipsInput = useChipsInput;
//# sourceMappingURL=useChipsInput.js.map