"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.chipsInputDefaultProps = void 0;

var _jsxRuntime = require("../../lib/jsxRuntime");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _FormField = _interopRequireDefault(require("../FormField/FormField"));

var _classNames = require("../../lib/classNames");

var _Chip = _interopRequireDefault(require("../Chip/Chip"));

var _utils = require("../../lib/utils");

var _useChipsInput2 = require("./useChipsInput");

var _withAdaptivity = require("../../hoc/withAdaptivity");

var _prefixClass = require("../../lib/prefixClass");

var ChipsInput = function ChipsInput(props) {
  var style = props.style,
      value = props.value,
      onChange = props.onChange,
      onInputChange = props.onInputChange,
      onKeyDown = props.onKeyDown,
      onBlur = props.onBlur,
      onFocus = props.onFocus,
      children = props.children,
      className = props.className,
      inputValue = props.inputValue,
      getRef = props.getRef,
      getRootRef = props.getRootRef,
      disabled = props.disabled,
      placeholder = props.placeholder,
      tabIndex = props.tabIndex,
      getOptionValue = props.getOptionValue,
      getOptionLabel = props.getOptionLabel,
      getNewOptionData = props.getNewOptionData,
      renderChip = props.renderChip,
      sizeY = props.sizeY,
      after = props.after,
      restProps = (0, _objectWithoutProperties2.default)(props, ["style", "value", "onChange", "onInputChange", "onKeyDown", "onBlur", "onFocus", "children", "className", "inputValue", "getRef", "getRootRef", "disabled", "placeholder", "tabIndex", "getOptionValue", "getOptionLabel", "getNewOptionData", "renderChip", "sizeY", "after"]);

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      focused = _useState2[0],
      setFocused = _useState2[1];

  var _useChipsInput = (0, _useChipsInput2.useChipsInput)(props),
      fieldValue = _useChipsInput.fieldValue,
      addOptionFromInput = _useChipsInput.addOptionFromInput,
      removeOption = _useChipsInput.removeOption,
      selectedOptions = _useChipsInput.selectedOptions,
      handleInputChange = _useChipsInput.handleInputChange;

  var handleKeyDown = function handleKeyDown(e) {
    if (disabled || restProps.readOnly) {
      e.preventDefault();
      return;
    }

    onKeyDown(e);

    if (e.key === 'Backspace' && !e.defaultPrevented && !fieldValue && selectedOptions.length) {
      removeOption(getOptionValue(selectedOptions[selectedOptions.length - 1]));
      e.preventDefault();
    }

    if (e.key === 'Enter' && !e.defaultPrevented && fieldValue) {
      addOptionFromInput();
      e.preventDefault();
    }
  };

  var handleBlur = function handleBlur(e) {
    if (focused) {
      setFocused(false);
    }

    onBlur(e);
  };

  var handleFocus = function handleFocus(e) {
    if (!focused) {
      setFocused(true);
    }

    onFocus(e);
  };

  var handleChipRemove = function handleChipRemove(_, value) {
    removeOption(value);
  };

  return (0, _jsxRuntime.createScopedElement)(_FormField.default, {
    Component: "label",
    getRootRef: getRootRef,
    vkuiClass: (0, _classNames.classNames)('ChipsInput', "ChipsInput--sizeY-".concat(sizeY), {
      'ChipsInput--focused': focused,
      'ChipsInput--withChips': !!selectedOptions.length
    }),
    className: className,
    style: style,
    disabled: disabled,
    after: after
  }, (0, _jsxRuntime.createScopedElement)("div", {
    vkuiClass: "ChipsInput__container"
  }, selectedOptions.map(function (option) {
    var value = getOptionValue(option);
    var label = getOptionLabel(option);
    return (0, _jsxRuntime.createScopedElement)(_react.default.Fragment, {
      key: value
    }, renderChip({
      option: option,
      value: value,
      label: label,
      onRemove: handleChipRemove,
      disabled: disabled,
      className: (0, _prefixClass.prefixClass)('ChipsInput__chip')
    }));
  }), (0, _jsxRuntime.createScopedElement)("div", {
    vkuiClass: "ChipsInput__input-container"
  }, (0, _jsxRuntime.createScopedElement)("input", (0, _extends2.default)({
    ref: getRef,
    value: fieldValue,
    autoCapitalize: "none",
    autoComplete: "off",
    autoCorrect: "off",
    spellCheck: false,
    "aria-autocomplete": "list",
    tabIndex: disabled ? null : tabIndex,
    vkuiClass: "ChipsInput__el",
    onChange: handleInputChange,
    onKeyDown: handleKeyDown,
    onFocus: handleFocus,
    onBlur: handleBlur,
    disabled: disabled,
    placeholder: selectedOptions.length ? null : placeholder
  }, restProps)))));
};

var chipsInputDefaultProps = {
  type: 'text',
  onChange: _utils.noop,
  onInputChange: _utils.noop,
  onKeyDown: _utils.noop,
  onBlur: _utils.noop,
  onFocus: _utils.noop,
  value: [],
  tabIndex: 0,
  inputValue: '',
  getOptionValue: function getOptionValue(option) {
    return option.value;
  },
  getOptionLabel: function getOptionLabel(option) {
    return option.label;
  },
  getNewOptionData: function getNewOptionData(_, label) {
    return {
      value: label,
      label: label
    };
  },
  renderChip: function renderChip(_ref) {
    var disabled = _ref.disabled,
        value = _ref.value,
        label = _ref.label,
        rest = (0, _objectWithoutProperties2.default)(_ref, ["disabled", "value", "label"]);
    return (0, _jsxRuntime.createScopedElement)(_Chip.default, (0, _extends2.default)({
      value: value,
      removable: !disabled
    }, rest), label);
  }
};
exports.chipsInputDefaultProps = chipsInputDefaultProps;
ChipsInput.defaultProps = chipsInputDefaultProps;

var _default = (0, _withAdaptivity.withAdaptivity)(ChipsInput, {
  sizeY: true
});

exports.default = _default;
//# sourceMappingURL=ChipsInput.js.map