{"version":3,"sources":["../../../../src/components/ChipsInput/ChipsInput.tsx"],"names":["ChipsInput","props","style","value","onChange","onInputChange","onKeyDown","onBlur","onFocus","children","className","inputValue","getRef","getRootRef","disabled","placeholder","tabIndex","getOptionValue","getOptionLabel","getNewOptionData","renderChip","sizeY","after","restProps","focused","setFocused","fieldValue","addOptionFromInput","removeOption","selectedOptions","handleInputChange","handleKeyDown","e","readOnly","preventDefault","key","defaultPrevented","length","handleBlur","handleFocus","handleChipRemove","_","map","option","label","onRemove","chipsInputDefaultProps","type","noop","rest","defaultProps"],"mappings":"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","sourcesContent":["import React, {\n  useState,\n  KeyboardEvent,\n  FocusEvent,\n  InputHTMLAttributes,\n  ReactNode,\n  ChangeEvent,\n  MouseEvent,\n} from 'react';\nimport { HasAlign, HasRef, HasRootRef } from '../../types';\nimport FormField, { FormFieldProps } from '../FormField/FormField';\nimport { classNames } from '../../lib/classNames';\nimport Chip, { ChipProps } from '../Chip/Chip';\nimport { noop } from '../../lib/utils';\nimport { useChipsInput } from './useChipsInput';\nimport { withAdaptivity, AdaptivityProps } from '../../hoc/withAdaptivity';\nimport { prefixClass } from '../../lib/prefixClass';\n\nexport type ChipsInputValue = string | number;\n\nexport interface ChipsInputOption {\n  value?: ChipsInputValue;\n  label?: string;\n  [otherProp: string]: any;\n}\n\nexport interface RenderChip<Option extends ChipsInputOption> extends ChipProps {\n  label: string;\n  option: Option;\n  disabled: boolean;\n}\n\nexport interface ChipsInputProps<Option extends ChipsInputOption> extends\n  Omit<InputHTMLAttributes<HTMLInputElement>, 'value' | 'onChange'>,\n  HasRef<HTMLInputElement>,\n  HasRootRef<HTMLDivElement>,\n  HasAlign,\n  FormFieldProps,\n  AdaptivityProps {\n  value: Option[];\n  inputValue?: string;\n  onChange?: (o: Option[]) => void;\n  onInputChange?: (e?: ChangeEvent<HTMLInputElement>) => void;\n  getOptionValue?: (o?: Option) => ChipsInputValue;\n  getOptionLabel?: (o?: Option) => string;\n  getNewOptionData?: (v?: ChipsInputValue, l?: string) => Option;\n  renderChip?: (props?: RenderChip<Option>) => ReactNode;\n}\n\nconst ChipsInput = <Option extends ChipsInputOption>(props: ChipsInputProps<Option>) => {\n  const { style, value, onChange, onInputChange, onKeyDown, onBlur, onFocus, children, className, inputValue,\n    getRef, getRootRef, disabled, placeholder, tabIndex, getOptionValue, getOptionLabel, getNewOptionData, renderChip,\n    sizeY, after, ...restProps } = props;\n  const [focused, setFocused] = useState(false);\n  const { fieldValue, addOptionFromInput, removeOption, selectedOptions, handleInputChange } = useChipsInput(props);\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (disabled || restProps.readOnly) {\n      e.preventDefault();\n      return;\n    }\n\n    onKeyDown(e);\n\n    if (e.key === 'Backspace' && !e.defaultPrevented && !fieldValue && selectedOptions.length) {\n      removeOption(getOptionValue(selectedOptions[selectedOptions.length - 1]));\n      e.preventDefault();\n    }\n\n    if (e.key === 'Enter' && !e.defaultPrevented && fieldValue) {\n      addOptionFromInput();\n      e.preventDefault();\n    }\n  };\n\n  const handleBlur = (e: FocusEvent<HTMLInputElement>) => {\n    if (focused) {\n      setFocused(false);\n    }\n    onBlur(e);\n  };\n\n  const handleFocus = (e: FocusEvent<HTMLInputElement>) => {\n    if (!focused) {\n      setFocused(true);\n    }\n    onFocus(e);\n  };\n\n  const handleChipRemove = (_: MouseEvent<HTMLInputElement>, value: ChipsInputValue) => {\n    removeOption(value);\n  };\n\n  return (\n    <FormField\n      Component=\"label\"\n      getRootRef={getRootRef}\n      vkuiClass={classNames('ChipsInput', `ChipsInput--sizeY-${sizeY}`, {\n        'ChipsInput--focused': focused,\n        'ChipsInput--withChips': !!selectedOptions.length,\n      })}\n      className={className}\n      style={style}\n      disabled={disabled}\n      after={after}\n    >\n      <div vkuiClass=\"ChipsInput__container\">\n        {selectedOptions.map((option: Option) => {\n          const value = getOptionValue(option);\n          const label = getOptionLabel(option);\n\n          return (\n            <React.Fragment key={value}>\n              {renderChip({ option, value, label, onRemove: handleChipRemove, disabled, className: prefixClass('ChipsInput__chip') })}\n            </React.Fragment>\n          );\n        })}\n        <div vkuiClass=\"ChipsInput__input-container\">\n          <input ref={getRef}\n            value={fieldValue}\n            autoCapitalize=\"none\"\n            autoComplete=\"off\"\n            autoCorrect=\"off\"\n            spellCheck={false}\n            aria-autocomplete=\"list\"\n            tabIndex={disabled ? null : tabIndex}\n            vkuiClass=\"ChipsInput__el\"\n            onChange={handleInputChange}\n            onKeyDown={handleKeyDown}\n            onFocus={handleFocus}\n            onBlur={handleBlur}\n            disabled={disabled}\n            placeholder={selectedOptions.length ? null : placeholder}\n            {...restProps} />\n        </div>\n      </div>\n    </FormField>\n  );\n};\n\nexport const chipsInputDefaultProps: ChipsInputProps<any> = {\n  type: 'text',\n  onChange: noop,\n  onInputChange: noop,\n  onKeyDown: noop,\n  onBlur: noop,\n  onFocus: noop,\n  value: [],\n  tabIndex: 0,\n  inputValue: '',\n  getOptionValue: (option: ChipsInputOption): ChipsInputValue => option.value,\n  getOptionLabel: (option: ChipsInputOption): string => option.label,\n  getNewOptionData: (_: ChipsInputValue, label: string): ChipsInputOption => ({ value: label, label }),\n  renderChip({ disabled, value, label, ...rest }: RenderChip<ChipsInputOption>) {\n    return <Chip value={value}\n      removable={!disabled}\n      {...rest}\n    >{label}</Chip>;\n  },\n};\nChipsInput.defaultProps = chipsInputDefaultProps;\n\nexport default withAdaptivity(ChipsInput, { sizeY: true });\n"],"file":"ChipsInput.js"}