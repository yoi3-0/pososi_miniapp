{"version":3,"sources":["../../../../src/components/ChipsInput/useChipsInput.ts"],"names":["useChipsInput","props","value","getOptionValue","onChange","onInputChange","getNewOptionData","inputValue","fieldValue","setFieldValue","selectedOptions","setSelectedOptions","clearInput","target","handleInputChange","e","toggleOption","newOption","newSelectedOptions","filter","option","push","addOption","addOptionFromInput","trimmedValue","trim","undefined","removeOption"],"mappings":"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","sourcesContent":["import { ChangeEvent, useCallback, useEffect, useState } from 'react';\nimport { ChipsInputOption, ChipsInputProps, ChipsInputValue } from './ChipsInput';\n\nexport const useChipsInput = <Option extends ChipsInputOption>(props: Partial<ChipsInputProps<Option>>) => {\n  const { value, getOptionValue, onChange, onInputChange, getNewOptionData } = props;\n\n  const [fieldValue, setFieldValue] = useState(props.inputValue);\n  const [selectedOptions, setSelectedOptions] = useState(value);\n\n  const clearInput = useCallback(() => {\n    setFieldValue('');\n    onInputChange({ target: { value: '' } } as any);\n  }, [onInputChange]);\n\n  const handleInputChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFieldValue(e.target.value);\n    onInputChange(e);\n  }, [onInputChange]);\n\n  const toggleOption = useCallback((newOption: Option, value?: boolean) => {\n    const newSelectedOptions = selectedOptions.filter((option: Option) => getOptionValue(newOption) !== getOptionValue(option));\n\n    if (value === true) {\n      newSelectedOptions.push(newOption);\n    }\n\n    setSelectedOptions(newSelectedOptions);\n    onChange(newSelectedOptions);\n  }, [selectedOptions, getOptionValue, onChange]);\n\n  const addOption = useCallback((newOption: Option) => toggleOption(newOption, true), [toggleOption]);\n  const addOptionFromInput = useCallback(() => {\n    const trimmedValue = fieldValue?.trim();\n\n    if (trimmedValue) {\n      addOption(getNewOptionData(undefined, trimmedValue));\n      clearInput();\n    }\n  }, [addOption, clearInput, getNewOptionData, fieldValue]);\n  const removeOption = useCallback((value: ChipsInputValue) => {\n    toggleOption(getNewOptionData(undefined, value as string), false);\n  }, [toggleOption, getNewOptionData]);\n\n  useEffect(() => {\n    setSelectedOptions(value);\n\n    return () => setSelectedOptions([]);\n  }, [props.value]);\n\n  useEffect(() => {\n    setFieldValue(props.inputValue);\n\n    return () => setFieldValue('');\n  }, [props.inputValue]);\n\n  return { fieldValue, setFieldValue, selectedOptions, setSelectedOptions, clearInput, toggleOption, addOption, addOptionFromInput, removeOption, handleInputChange };\n};\n"],"file":"useChipsInput.js"}