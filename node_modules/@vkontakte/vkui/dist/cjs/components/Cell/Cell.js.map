{"version":3,"sources":["../../../../src/components/Cell/Cell.tsx"],"names":["Cell","props","onRemove","removePlaceholder","onDragFinish","className","style","before","after","disabled","removable","draggable","selectable","Component","onChange","name","checked","defaultChecked","getRootRef","restProps","rootElRef","platform","dragging","setDragging","undefined","siblings","setSiblings","dragStartIndex","setDragStartIndex","dragEndIndex","setDragEndIndex","dragShift","setDragShift","dragDirection","setDragDirection","onDragStart","rootEl","current","_siblings","Array","from","parentElement","childNodes","indexOf","onDragMove","e","originalEvent","preventDefault","transform","shiftY","forEach","sibling","siblingIndex","rootGesture","getBoundingClientRect","siblingGesture","bottom","top","height","onDragEnd","to","onDragClick","nativeEvent","stopPropagation","ListContext","toggleDrag","simpleCell","ANDROID","VKCOM","IOS","defaultProps"],"mappings":"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","sourcesContent":["import { MouseEvent, FC, useState, useRef, useEffect, useContext, Fragment } from 'react';\nimport { classNames } from '../../lib/classNames';\nimport { getClassName } from '../../helpers/getClassName';\nimport Touch, { TouchEvent } from '../Touch/Touch';\nimport { ANDROID, IOS, VKCOM } from '../../lib/platform';\nimport { Icon24Reorder, Icon24ReorderIos, Icon24CheckCircleOn, Icon24CheckCircleOff } from '@vkontakte/icons';\nimport SimpleCell, { SimpleCellProps } from '../SimpleCell/SimpleCell';\nimport { HasPlatform } from '../../types';\nimport { Removable, RemovePlaceholderProps } from '../Removable/Removable';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport { ListContext } from '../../components/List/ListContext';\n\nexport interface CellProps extends SimpleCellProps, HasPlatform, RemovePlaceholderProps {\n  /**\n   * В режиме перетаскивания ячейка перестает быть кликабельной, то есть при клике переданный onClick вызываться не будет\n   */\n  draggable?: boolean;\n  removable?: boolean;\n  /**\n   * Имя для input в режиме selectable\n   */\n  name?: string;\n  selectable?: boolean;\n  /**\n   * В режиме selectable реагирует на входящие значения пропса cheсked, как зависящий напрямую от входящего значения\n   */\n  checked?: boolean;\n  /**\n   * В режиме selectable реагирует на входящие значения пропса defaultChecked как неконтролируемый компонент\n   */\n  defaultChecked?: boolean;\n  /**\n   * Коллбэк срабатывает при клике на контрол удаления.\n   */\n  onRemove?: (e: MouseEvent, rootEl: HTMLElement) => void;\n  /**\n   * Коллбэк срабатывает при завершении перетаскивания.\n   * **Важно:** режим перетаскивания не меняет порядок ячеек в DOM. В коллбэке есть объект с полями `from` и `to`.\n   * Эти числа нужны для того, чтобы разработчик понимал, с какого индекса на какой произошел переход. В песочнице\n   * есть рабочий пример с обработкой этих чисел и перерисовкой списка.\n   */\n  onDragFinish?: ({ from, to }: { from: number; to: number }) => void;\n}\n\nexport const Cell: FC<CellProps> = (props: CellProps) => {\n  const {\n    onRemove,\n    removePlaceholder,\n    onDragFinish,\n    className,\n    style,\n    before,\n    after,\n    disabled,\n    removable,\n    draggable,\n    selectable,\n    Component,\n    onChange,\n    name,\n    checked,\n    defaultChecked,\n    getRootRef,\n    ...restProps\n  } = props;\n  const rootElRef = useRef(null);\n  const platform = usePlatform();\n\n  const [dragging, setDragging] = useState<boolean>(false);\n\n  const [siblings, setSiblings] = useState<HTMLElement[]>(undefined);\n  const [dragStartIndex, setDragStartIndex] = useState<number>(undefined);\n  const [dragEndIndex, setDragEndIndex] = useState<number>(undefined);\n  const [dragShift, setDragShift] = useState<number>(0);\n  const [dragDirection, setDragDirection] = useState<'down' | 'up'>(undefined);\n\n  const onDragStart = () => {\n    const rootEl = rootElRef?.current;\n\n    setDragging(true);\n\n    const _siblings: HTMLElement[] = Array.from(rootEl.parentElement.childNodes);\n\n    setDragStartIndex(_siblings.indexOf(rootEl));\n    setSiblings(_siblings);\n    setDragShift(0);\n  };\n\n  const onDragMove = (e: TouchEvent) => {\n    e.originalEvent.preventDefault();\n\n    const rootEl = rootElRef?.current;\n\n    rootEl.style.transform = `translateY(${e.shiftY}px)`;\n    setDragDirection(dragShift - e.shiftY < 0 ? 'down' : 'up');\n    setDragShift(e.shiftY);\n    setDragEndIndex(dragStartIndex);\n\n    siblings.forEach((sibling: HTMLElement, siblingIndex: number) => {\n      const rootGesture = rootEl.getBoundingClientRect();\n\n      const siblingGesture = sibling.getBoundingClientRect();\n\n      if (dragStartIndex < siblingIndex) {\n        if (rootGesture.bottom > siblingGesture.top + siblingGesture.height / 2) {\n          if (dragDirection === 'down') {\n            sibling.style.transform = 'translateY(-100%)';\n          }\n\n          setDragEndIndex((dragEndIndex) => dragEndIndex + 1);\n        }\n        if (rootGesture.top < siblingGesture.bottom - siblingGesture.height / 2 && dragDirection === 'up') {\n          sibling.style.transform = 'translateY(0)';\n        }\n      } else if (dragStartIndex > siblingIndex) {\n        if (rootGesture.top < siblingGesture.bottom - siblingGesture.height / 2) {\n          if (dragDirection === 'up') {\n            sibling.style.transform = 'translateY(100%)';\n          }\n\n          setDragEndIndex((dragEndIndex) => dragEndIndex - 1);\n        }\n        if (rootGesture.bottom > siblingGesture.top + siblingGesture.height / 2 && dragDirection === 'down') {\n          sibling.style.transform = 'translateY(0)';\n        }\n      }\n    });\n  };\n\n  const onDragEnd = () => {\n    const [from, to] = [dragStartIndex, dragEndIndex];\n\n    siblings.forEach((sibling: HTMLElement) => {\n      sibling.style.transform = null;\n    });\n\n    setSiblings(undefined);\n    setDragEndIndex(undefined);\n    setDragStartIndex(undefined);\n    setDragDirection(undefined);\n    setDragShift(undefined);\n\n    setDragging(false);\n\n    props.onDragFinish && props.onDragFinish({ from, to });\n  };\n\n  const onDragClick = (e: MouseEvent) => {\n    e.nativeEvent.stopPropagation();\n    e.preventDefault();\n  };\n\n  const { toggleDrag } = useContext(ListContext);\n  useEffect(() => {\n    if (dragging) {\n      toggleDrag(true);\n      return () => toggleDrag(false);\n    }\n    return undefined;\n  }, [dragging]);\n\n  const simpleCell = (\n    <SimpleCell\n      {...restProps}\n      disabled={draggable || removable || disabled}\n      Component={selectable ? 'label' : Component}\n      htmlFor={selectable ? name : undefined}\n      before={\n        <Fragment>\n          {(platform === ANDROID || platform === VKCOM) && draggable && (\n            <Touch\n              vkuiClass=\"Cell__dragger\"\n              onStart={onDragStart}\n              onMoveY={onDragMove}\n              onEnd={onDragEnd}\n              onClick={onDragClick}\n            ><Icon24Reorder /></Touch>\n          )}\n          {selectable && (\n            <Fragment>\n              <input\n                type=\"checkbox\"\n                vkuiClass=\"Cell__checkbox\"\n                name={name}\n                onChange={onChange}\n                defaultChecked={defaultChecked}\n                checked={checked}\n                disabled={disabled}\n              />\n              <span vkuiClass=\"Cell__marker\">\n                <Icon24CheckCircleOff vkuiClass=\"Cell__marker-in\" />\n                <Icon24CheckCircleOn vkuiClass=\"Cell__marker-in Cell__marker-in--checked\" />\n              </span>\n            </Fragment>\n          )}\n          {before}\n        </Fragment>\n      }\n      after={\n        <Fragment>\n          {platform === IOS && draggable && (\n            <Touch\n              vkuiClass=\"Cell__dragger\"\n              onStart={onDragStart}\n              onMoveY={onDragMove}\n              onEnd={onDragEnd}\n              onClick={onDragClick}\n            ><Icon24ReorderIos /></Touch>\n          )}\n          {after}\n        </Fragment>\n      }\n    />\n  );\n\n  return (\n    <div\n      vkuiClass={classNames(getClassName('Cell', platform), {\n        'Cell--dragging': dragging,\n        'Cell--removable': removable,\n        'Cell--selectable': selectable,\n        'Cell--disabled': disabled,\n      })}\n      className={className}\n      style={style}\n      ref={rootElRef}\n    >\n      {removable\n        ? <Removable removePlaceholder={removePlaceholder} onRemove={(e) => onRemove(e, rootElRef?.current)}>{simpleCell}</Removable>\n        : simpleCell\n      }\n    </div>\n  );\n};\n\nCell.defaultProps = {\n  removePlaceholder: 'Удалить',\n};\n"],"file":"Cell.js"}