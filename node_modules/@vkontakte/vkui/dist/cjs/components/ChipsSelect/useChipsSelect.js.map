{"version":3,"sources":["../../../../src/components/ChipsSelect/useChipsSelect.ts"],"names":["useChipsSelect","props","options","filterFn","getOptionLabel","getOptionValue","showSelected","opened","setOpened","focusedOptionIndex","setFocusedOptionIndex","focusedOption","setFocusedOption","fieldValue","selectedOptions","chipsInputState","handleInputChange","e","filteredOptions","filter","option","length","filteredSet","Set","selected","map","item","includes","delete"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AAGO,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAAkCC,KAAlC,EAA+E;AAAA,MACnGC,OADmG,GAC/BD,KAD+B,CACnGC,OADmG;AAAA,MAC1FC,QAD0F,GAC/BF,KAD+B,CAC1FE,QAD0F;AAAA,MAChFC,cADgF,GAC/BH,KAD+B,CAChFG,cADgF;AAAA,MAChEC,cADgE,GAC/BJ,KAD+B,CAChEI,cADgE;AAAA,MAChDC,YADgD,GAC/BL,KAD+B,CAChDK,YADgD;;AAAA,kBAG/E,qBAAS,KAAT,CAH+E;AAAA;AAAA,MAGpGC,MAHoG;AAAA,MAG5FC,SAH4F;;AAAA,mBAIvD,qBAAiB,CAAjB,CAJuD;AAAA;AAAA,MAIpGC,kBAJoG;AAAA,MAIhFC,qBAJgF;;AAAA,mBAKjE,qBAAiB,IAAjB,CALiE;AAAA;AAAA,MAKpGC,aALoG;AAAA,MAKrFC,gBALqF;;AAAA,uBAO/C,mCAAcX,KAAd,CAP+C;AAAA,MAOnGY,UAPmG,kBAOnGA,UAPmG;AAAA,MAOvFC,eAPuF,kBAOvFA,eAPuF;AAAA,MAOnEC,eAPmE;;AAS3G,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,CAAD,EAAsC;AAC9DF,IAAAA,eAAe,CAACC,iBAAhB,CAAkCC,CAAlC;;AAEA,QAAI,CAACV,MAAL,EAAa;AACXC,MAAAA,SAAS,CAAC,IAAD,CAAT;AACAE,MAAAA,qBAAqB,CAAC,CAAD,CAArB;AACD;AACF,GAPD;;AASA,MAAIQ,eAAe,GAAG,oBAAQ,YAAM;AAClC,WAAOhB,OAAO,CAACiB,MAAR,CAAe,UAACC,MAAD;AAAA,aAAoBjB,QAAQ,CAACU,UAAD,EAAaO,MAAb,EAAqBhB,cAArB,CAA5B;AAAA,KAAf,CAAP;AACD,GAFqB,EAEnB,CAACF,OAAD,EAAUC,QAAV,EAAoBU,UAApB,EAAgCT,cAAhC,CAFmB,CAAtB;AAIAc,EAAAA,eAAe,GAAG,oBAAQ,YAAM;AAC9B,QAAI,CAACA,eAAe,CAACG,MAArB,EAA6B;AAC3B,aAAOH,eAAP;AACD;;AAED,QAAMI,WAAW,GAAG,IAAIC,GAAJ,CAAQL,eAAR,CAApB;AACA,QAAMM,QAAQ,GAAGV,eAAe,CAACW,GAAhB,CAAoB,UAACC,IAAD;AAAA,aAAUrB,cAAc,CAACqB,IAAD,CAAxB;AAAA,KAApB,CAAjB;;AAN8B,6DAQXJ,WARW;AAAA;;AAAA;AAQ9B,0DAAgC;AAAA,YAArBI,IAAqB;;AAC9B,YAAIF,QAAQ,CAACG,QAAT,CAAkBtB,cAAc,CAACqB,IAAD,CAAhC,CAAJ,EAA6C;AAC3CJ,UAAAA,WAAW,CAACM,MAAZ,CAAmBF,IAAnB;AACD;AACF;AAZ6B;AAAA;AAAA;AAAA;AAAA;;AAc9B,4CAAWJ,WAAX;AACD,GAfiB,EAef,CAAChB,YAAD,EAAeY,eAAf,EAAgCJ,eAAhC,CAfe,CAAlB;AAiBA,qEACKC,eADL;AACsBF,IAAAA,UAAU,EAAVA,UADtB;AACkCG,IAAAA,iBAAiB,EAAjBA,iBADlC;AACqDT,IAAAA,MAAM,EAANA,MADrD;AAC6DC,IAAAA,SAAS,EAATA,SAD7D;AACwEU,IAAAA,eAAe,EAAfA,eADxE;AAEET,IAAAA,kBAAkB,EAAlBA,kBAFF;AAEsBC,IAAAA,qBAAqB,EAArBA,qBAFtB;AAE6CC,IAAAA,aAAa,EAAbA,aAF7C;AAE4DC,IAAAA,gBAAgB,EAAhBA,gBAF5D;AAE8EE,IAAAA,eAAe,EAAfA;AAF9E;AAID,CA3CM","sourcesContent":["import { ChangeEvent, useMemo, useState } from 'react';\nimport { ChipsInputOption } from '../ChipsInput/ChipsInput';\nimport { useChipsInput } from '../ChipsInput/useChipsInput';\nimport { ChipsSelectProps } from './ChipsSelect';\n\nexport const useChipsSelect = <Option extends ChipsInputOption>(props: Partial<ChipsSelectProps<Option>>) => {\n  const { options, filterFn, getOptionLabel, getOptionValue, showSelected } = props;\n\n  const [opened, setOpened] = useState(false);\n  const [focusedOptionIndex, setFocusedOptionIndex] = useState<number>(0);\n  const [focusedOption, setFocusedOption] = useState<Option>(null);\n\n  const { fieldValue, selectedOptions, ...chipsInputState } = useChipsInput(props);\n\n  const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    chipsInputState.handleInputChange(e);\n\n    if (!opened) {\n      setOpened(true);\n      setFocusedOptionIndex(0);\n    }\n  };\n\n  let filteredOptions = useMemo(() => {\n    return options.filter((option: Option) => filterFn(fieldValue, option, getOptionLabel));\n  }, [options, filterFn, fieldValue, getOptionLabel]);\n\n  filteredOptions = useMemo(() => {\n    if (!filteredOptions.length) {\n      return filteredOptions;\n    }\n\n    const filteredSet = new Set(filteredOptions);\n    const selected = selectedOptions.map((item) => getOptionValue(item));\n\n    for (const item of filteredSet) {\n      if (selected.includes(getOptionValue(item))) {\n        filteredSet.delete(item);\n      }\n    }\n\n    return [...filteredSet];\n  }, [showSelected, filteredOptions, selectedOptions]);\n\n  return {\n    ...chipsInputState, fieldValue, handleInputChange, opened, setOpened, filteredOptions,\n    focusedOptionIndex, setFocusedOptionIndex, focusedOption, setFocusedOption, selectedOptions,\n  };\n};\n"],"file":"useChipsSelect.js"}