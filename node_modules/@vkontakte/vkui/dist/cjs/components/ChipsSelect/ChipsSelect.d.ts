import React, { ReactNode } from 'react';
import { ChipsInputOption, ChipsInputProps } from '../ChipsInput/ChipsInput';
import { CustomSelectOptionProps } from '../CustomSelectOption/CustomSelectOption';
import { AdaptivityProps } from '../../hoc/withAdaptivity';
export interface ChipsSelectProps<Option extends ChipsInputOption> extends ChipsInputProps<Option>, AdaptivityProps {
    popupDirection?: 'top' | 'bottom';
    options?: Option[];
    filterFn?: (value?: string, option?: Option, getOptionLabel?: Pick<ChipsInputProps<ChipsInputOption>, 'getOptionLabel'>['getOptionLabel']) => boolean;
    /**
     * Возможность создавать чипы которых нет в списке (по enter или с помощью пункта в меню, см creatableText)
     */
    creatable?: boolean;
    /**
     * Отрисовка лоадера вместо списка опций в выпадающем списке
     */
    fetching?: boolean;
    renderOption?: (props: CustomSelectOptionProps) => ReactNode;
    /**
     * Показывать или скрывать уже выбранные опции
     */
    showSelected?: boolean;
    /**
     * Текст для пункта создающего чипы при клике, так же отвечает за то будет ли показан этот пункт (показывается после того как в списке не отсанется опций)
     */
    creatableText?: string;
    /**
     * Текст который показывается если список опций пуст
     */
    emptyText?: string;
    /**
     * Событие срабатывающее перед onChange
     */
    onChangeStart?: (e: React.MouseEvent | React.KeyboardEvent, option: Option) => void;
    /**
     * Закрытие выпадающиего списка после выбора элемента
     */
    closeAfterSelect?: boolean;
}
declare const _default: {
    <Option extends ChipsInputOption>(props: ChipsSelectProps<Option>): JSX.Element;
    defaultProps: ChipsSelectProps<any>;
};
export default _default;
