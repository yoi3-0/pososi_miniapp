/// <reference path="../../../../types/global.d.ts" />
/// <reference types="react" />
import { AppearanceSchemeType, AppearanceType } from '@vkontakte/vk-bridge';
import { PlatformType } from '../../lib/platform';
export declare enum Appearance {
    DARK = "dark",
    LIGHT = "light"
}
export declare enum Scheme {
    DEPRECATED_CLIENT_LIGHT = "client_light",
    DEPRECATED_CLIENT_DARK = "client_dark",
    BRIGHT_LIGHT = "bright_light",
    SPACE_GRAY = "space_gray",
    VKCOM = "vkcom"
}
export declare enum ExternalScheme {
    VKCOM_LIGHT = "vkcom_light",
    VKCOM_DARK = "vkcom_dark"
}
export declare type AppearanceScheme = AppearanceSchemeType | Scheme.VKCOM | 'inherit';
export declare enum WebviewType {
    VKAPPS = "vkapps",
    INTERNAL = "internal"
}
export interface ConfigProviderContextInterface {
    /**
     * Подсказывает приложению, обёрнутому в `ConfigProvider`, где открыто приложение: внутри webview или в мобильном браузере
     */
    isWebView?: boolean;
    /**
     * Тип вебвью.<br>
     * В случае `WebviewType.VKAPPS` интерфейс будет адаптирован для отображения в вебвью Mini Apps (системные контролы в правой части шапки)
     */
    webviewType?: WebviewType.INTERNAL | WebviewType.VKAPPS;
    /**
     * Тип приложения
     */
    app?: string;
    /**
     * Тип цветовой схемы – `light` или `dark`
     */
    appearance?: AppearanceType;
    /**
     * Включена ли анимация переходов между экранами в `Root` и `View`
     */
    transitionMotionEnabled?: boolean;
    /**
     * Платформа
     */
    platform?: PlatformType;
}
export declare const defaultConfigProviderProps: {
    webviewType: WebviewType;
    isWebView: boolean;
    scheme: Scheme;
    transitionMotionEnabled: boolean;
    platform: import("../../lib/platform").Platform;
};
export declare const ConfigProviderContext: import("react").Context<ConfigProviderContextInterface>;
