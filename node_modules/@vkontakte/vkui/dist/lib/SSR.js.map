{"version":3,"sources":["../../src/lib/SSR.tsx"],"names":["createContext","platform","computeBrowserInfo","DOMContext","getDOM","SSRContext","userAgent","browserInfo","undefined","SSRWrapper","props","children","contextValue","dom"],"mappings":";AAAA,SAASA,aAAT,QAAkC,OAAlC;AACA,SAAuBC,QAAvB;AACA,SAAsBC,kBAAtB;AACA,SAASC,UAAT,EAAqBC,MAArB;AAQA,OAAO,IAAMC,UAAU,gBAAGL,aAAa,CAAsB;AAC3DC,EAAAA,QAAQ,EAAE,IADiD;AAE3DK,EAAAA,SAAS,EAAE,EAFgD;AAG3DC,EAAAA,WAAW,EAAEC;AAH8C,CAAtB,CAAhC;AAWP,OAAO,IAAMC,UAA+B,GAAG,SAAlCA,UAAkC,CAACC,KAAD,EAAW;AAAA,MAClDJ,SADkD,GACbI,KADa,CAClDJ,SADkD;AAAA,MACvCC,WADuC,GACbG,KADa,CACvCH,WADuC;AAAA,MAC1BI,QAD0B,GACbD,KADa,CAC1BC,QAD0B;;AAGxD,MAAI,CAACJ,WAAD,IAAgBD,SAApB,EAA+B;AAC7BC,IAAAA,WAAW,GAAGL,kBAAkB,CAACI,SAAD,CAAhC;AACD,GALuD,CAOxD;;;AACA,MAAMM,YAAY,GAAG;AACnBX,IAAAA,QAAQ,EAAEA,QAAQ,CAACM,WAAD,CADC;AAEnBA,IAAAA,WAAW,EAAXA,WAFmB;AAGnBD,IAAAA,SAAS,EAATA;AAHmB,GAArB,CARwD,CAcxD;;AACA,MAAMO,GAAG,GAAGT,MAAM,EAAlB;AAEA,SACE,oBAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAEQ;AAA5B,KACE,oBAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAEC;AAA5B,KACGF,QADH,CADF,CADF;AAOD,CAxBM","sourcesContent":["import { createContext, FC } from 'react';\nimport { PlatformType, platform } from './platform';\nimport { BrowserInfo, computeBrowserInfo } from './browser';\nimport { DOMContext, getDOM } from '../lib/dom';\n\nexport interface SSRContextInterface {\n  platform: PlatformType;\n  userAgent?: string;\n  browserInfo?: BrowserInfo;\n}\n\nexport const SSRContext = createContext<SSRContextInterface>({\n  platform: null,\n  userAgent: '',\n  browserInfo: undefined,\n});\n\nexport interface SSRWrapperProps {\n  userAgent?: string;\n  browserInfo?: BrowserInfo;\n}\n\nexport const SSRWrapper: FC<SSRWrapperProps> = (props) => {\n  let { userAgent, browserInfo, children } = props;\n\n  if (!browserInfo && userAgent) {\n    browserInfo = computeBrowserInfo(userAgent);\n  }\n\n  // TODO: Каждый раз создаётся новый объект для контекста – плохо\n  const contextValue = {\n    platform: platform(browserInfo),\n    browserInfo,\n    userAgent,\n  };\n\n  // TODO: move to state, and update in effect?\n  const dom = getDOM();\n\n  return (\n    <SSRContext.Provider value={contextValue}>\n      <DOMContext.Provider value={dom}>\n        {children}\n      </DOMContext.Provider>\n    </SSRContext.Provider>\n  );\n};\n"],"file":"SSR.js"}