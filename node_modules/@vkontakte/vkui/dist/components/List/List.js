import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import { createScopedElement } from "../../lib/jsxRuntime";
import { useMemo, useState } from 'react';
import { classNames } from "../../lib/classNames";
import { getClassName } from "../../helpers/getClassName";
import { usePlatform } from "../../hooks/usePlatform";
import { ListContext } from "./ListContext";

var List = function List(_ref) {
  var children = _ref.children,
      restProps = _objectWithoutProperties(_ref, ["children"]);

  var platform = usePlatform();

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isDragging = _useState2[0],
      toggleDrag = _useState2[1];

  return createScopedElement("div", _extends({
    role: "list"
  }, restProps, {
    vkuiClass: classNames(getClassName('List', platform), {
      'List--dragging': isDragging
    })
  }), createScopedElement(ListContext.Provider, {
    value: useMemo(function () {
      return {
        toggleDrag: toggleDrag
      };
    }, [])
  }, children));
};

export default List;
//# sourceMappingURL=List.js.map