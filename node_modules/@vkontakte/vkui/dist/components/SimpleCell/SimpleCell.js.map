{"version":3,"sources":["../../../src/components/SimpleCell/SimpleCell.tsx"],"names":["classNames","getClassName","Tappable","Icon24Chevron","IOS","usePlatform","hasReactNode","withAdaptivity","SizeType","Title","Text","Caption","SimpleCellTypography","props","sizeY","children","restProps","COMPACT","SimpleCell","badge","before","indicator","after","description","expandable","multiline","platform","hasAfter"],"mappings":";;;AACA,SAASA,UAAT;AACA,SAASC,YAAT;AACA,OAAOC,QAAP;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,GAAT;AACA,SAASC,WAAT;AACA,SAASC,YAAT;AACA,SAASC,cAAT,EAAyBC,QAAzB;AACA,OAAOC,KAAP;AACA,OAAOC,IAAP;AACA,OAAOC,OAAP;AAIA,IAAMC,oBAAmD,GAAGL,cAAc,CAAC,UAACM,KAAD,EAAsC;AAAA,MACvGC,KADuG,GACrED,KADqE,CACvGC,KADuG;AAAA,MAChGC,QADgG,GACrEF,KADqE,CAChGE,QADgG;AAAA,MACnFC,SADmF,4BACrEH,KADqE;;AAG/G,MAAIC,KAAK,KAAKN,QAAQ,CAACS,OAAvB,EAAgC;AAC9B,WAAO,oBAAC,IAAD;AAAM,MAAA,MAAM,EAAC;AAAb,OAA2BD,SAA3B,GAAuCD,QAAvC,CAAP;AACD;;AAED,SAAO,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAC,GAAb;AAAiB,IAAA,MAAM,EAAC;AAAxB,KAAsCC,SAAtC,GAAkDD,QAAlD,CAAP;AACD,CARyE,EAQvE;AAAED,EAAAA,KAAK,EAAE;AAAT,CARuE,CAA1E;;AA6CA,IAAMI,UAA+B,GAAG,SAAlCA,UAAkC,OAWlC;AAAA,MAVJC,KAUI,QAVJA,KAUI;AAAA,MATJC,MASI,QATJA,MASI;AAAA,MARJC,SAQI,QARJA,SAQI;AAAA,MAPJN,QAOI,QAPJA,QAOI;AAAA,MANJO,KAMI,QANJA,KAMI;AAAA,MALJC,WAKI,QALJA,WAKI;AAAA,MAJJC,UAII,QAJJA,UAII;AAAA,MAHJC,SAGI,QAHJA,SAGI;AAAA,MAFJX,KAEI,QAFJA,KAEI;AAAA,MADDE,SACC;;AACJ,MAAMU,QAAQ,GAAGrB,WAAW,EAA5B;AACA,MAAMsB,QAAQ,GAAGrB,YAAY,CAACgB,KAAD,CAAZ,IAAuBE,UAAU,IAAIE,QAAQ,KAAKtB,GAAnE;AAEA,SACE,oBAAC,QAAD,eACMY,SADN;AAEE,IAAA,SAAS,EACPhB,UAAU,CACRC,YAAY,CAAC,YAAD,EAAeyB,QAAf,CADJ,EAER;AACE,yBAAmBF,UADrB;AAEE,0BAAoBC;AAFtB,KAFQ,8BAMaX,KANb;AAHd,MAaGM,MAbH,EAcE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE,oBAAC,oBAAD;AAAsB,IAAA,SAAS,EAAC;AAAhC,KAAwDL,QAAxD,CADF,EAEGT,YAAY,CAACa,KAAD,CAAZ,IACC;AAAM,IAAA,SAAS,EAAC;AAAhB,KACGA,KADH,CAHJ,CADF,EASGI,WAAW,IAAI,oBAAC,OAAD;AAAS,IAAA,MAAM,EAAC,SAAhB;AAA0B,IAAA,KAAK,EAAC,GAAhC;AAAoC,IAAA,SAAS,EAAC;AAA9C,KAAyEA,WAAzE,CATlB,CAdF,EAyBGjB,YAAY,CAACe,SAAD,CAAZ,IACC,oBAAC,oBAAD;AAAsB,IAAA,SAAS,EAAC;AAAhC,KAAyDA,SAAzD,CA1BJ,EA4BGM,QAAQ,IACP;AAAK,IAAA,SAAS,EAAC;AAAf,KACGL,KADH,EAEGE,UAAU,IAAIE,QAAQ,KAAKtB,GAA3B,IAAkC,oBAAC,aAAD,OAFrC,CA7BJ,CADF;AAqCD,CApDD;;AAsDA,eAAeG,cAAc,CAACW,UAAD,EAAa;AAAEJ,EAAAA,KAAK,EAAE;AAAT,CAAb,CAA7B","sourcesContent":["import { ReactNode, FC, ElementType, HTMLAttributes } from 'react';\nimport { classNames } from '../../lib/classNames';\nimport { getClassName } from '../../helpers/getClassName';\nimport Tappable, { TappableProps } from '../Tappable/Tappable';\nimport { Icon24Chevron } from '@vkontakte/icons';\nimport { IOS } from '../../lib/platform';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport { hasReactNode } from '../../lib/utils';\nimport { withAdaptivity, SizeType, AdaptivityProps } from '../../hoc/withAdaptivity';\nimport Title from '../Typography/Title/Title';\nimport Text from '../Typography/Text/Text';\nimport Caption from '../Typography/Caption/Caption';\n\ninterface SimpleCellTypographyProps extends HTMLAttributes<HTMLDivElement>, AdaptivityProps {}\n\nconst SimpleCellTypography: FC<SimpleCellTypographyProps> = withAdaptivity((props: SimpleCellTypographyProps) => {\n  const { sizeY, children, ...restProps } = props;\n\n  if (sizeY === SizeType.COMPACT) {\n    return <Text weight=\"regular\" {...restProps}>{children}</Text>;\n  }\n\n  return <Title level=\"3\" weight=\"regular\" {...restProps}>{children}</Title>;\n}, { sizeY: true });\n\nexport interface SimpleCellOwnProps {\n  /**\n   * Иконка 28 или `<Avatar size={28|32|40|48|72} />`\n   */\n  before?: ReactNode;\n  /**\n   * Иконка 12 или `<Badge />`. Добавится справа от текста `children`.\n   */\n  badge?: ReactNode;\n  /**\n   * Контейнер для текста справа от `children`.\n   */\n  indicator?: ReactNode;\n  /**\n   * Иконка 24|28 или `<Switch />`. Располагается справа от `indicator`.\n   */\n  after?: ReactNode;\n  /**\n   * Контейнер для текста под `children`.\n   */\n  description?: ReactNode;\n  /**\n   * Убирает анимацию нажатия\n   */\n  disabled?: boolean;\n  /**\n   * В iOS добавляет chevron справа. Передавать `true`, если предполагается переход при клике по ячейке.\n   */\n  expandable?: boolean;\n  multiline?: boolean;\n  Component?: ElementType;\n}\n\nexport interface SimpleCellProps extends SimpleCellOwnProps, TappableProps {}\n\nconst SimpleCell: FC<SimpleCellProps> = ({\n  badge,\n  before,\n  indicator,\n  children,\n  after,\n  description,\n  expandable,\n  multiline,\n  sizeY,\n  ...restProps\n}) => {\n  const platform = usePlatform();\n  const hasAfter = hasReactNode(after) || expandable && platform === IOS;\n\n  return (\n    <Tappable\n      {...restProps}\n      vkuiClass={\n        classNames(\n          getClassName('SimpleCell', platform),\n          {\n            'SimpleCell--exp': expandable,\n            'SimpleCell--mult': multiline,\n          },\n          `SimpleCell--sizeY-${sizeY}`,\n        )\n      }\n    >\n      {before}\n      <div vkuiClass=\"SimpleCell__main\">\n        <div vkuiClass=\"SimpleCell__content\">\n          <SimpleCellTypography vkuiClass=\"SimpleCell__children\">{children}</SimpleCellTypography>\n          {hasReactNode(badge) &&\n            <span vkuiClass=\"SimpleCell__badge\">\n              {badge}\n            </span>\n          }\n        </div>\n        {description && <Caption weight=\"regular\" level=\"1\" vkuiClass=\"SimpleCell__description\">{description}</Caption>}\n      </div>\n      {hasReactNode(indicator) &&\n        <SimpleCellTypography vkuiClass=\"SimpleCell__indicator\">{indicator}</SimpleCellTypography>\n      }\n      {hasAfter &&\n        <div vkuiClass=\"SimpleCell__after\">\n          {after}\n          {expandable && platform === IOS && <Icon24Chevron />}\n        </div>\n      }\n    </Tappable>\n  );\n};\n\nexport default withAdaptivity(SimpleCell, { sizeY: true });\n"],"file":"SimpleCell.js"}