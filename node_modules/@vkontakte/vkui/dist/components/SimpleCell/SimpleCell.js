import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import { createScopedElement } from "../../lib/jsxRuntime";
import { classNames } from "../../lib/classNames";
import { getClassName } from "../../helpers/getClassName";
import Tappable from "../Tappable/Tappable";
import { Icon24Chevron } from '@vkontakte/icons';
import { IOS } from "../../lib/platform";
import { usePlatform } from "../../hooks/usePlatform";
import { hasReactNode } from "../../lib/utils";
import { withAdaptivity, SizeType } from "../../hoc/withAdaptivity";
import Title from "../Typography/Title/Title";
import Text from "../Typography/Text/Text";
import Caption from "../Typography/Caption/Caption";
var SimpleCellTypography = withAdaptivity(function (props) {
  var sizeY = props.sizeY,
      children = props.children,
      restProps = _objectWithoutProperties(props, ["sizeY", "children"]);

  if (sizeY === SizeType.COMPACT) {
    return createScopedElement(Text, _extends({
      weight: "regular"
    }, restProps), children);
  }

  return createScopedElement(Title, _extends({
    level: "3",
    weight: "regular"
  }, restProps), children);
}, {
  sizeY: true
});

var SimpleCell = function SimpleCell(_ref) {
  var badge = _ref.badge,
      before = _ref.before,
      indicator = _ref.indicator,
      children = _ref.children,
      after = _ref.after,
      description = _ref.description,
      expandable = _ref.expandable,
      multiline = _ref.multiline,
      sizeY = _ref.sizeY,
      restProps = _objectWithoutProperties(_ref, ["badge", "before", "indicator", "children", "after", "description", "expandable", "multiline", "sizeY"]);

  var platform = usePlatform();
  var hasAfter = hasReactNode(after) || expandable && platform === IOS;
  return createScopedElement(Tappable, _extends({}, restProps, {
    vkuiClass: classNames(getClassName('SimpleCell', platform), {
      'SimpleCell--exp': expandable,
      'SimpleCell--mult': multiline
    }, "SimpleCell--sizeY-".concat(sizeY))
  }), before, createScopedElement("div", {
    vkuiClass: "SimpleCell__main"
  }, createScopedElement("div", {
    vkuiClass: "SimpleCell__content"
  }, createScopedElement(SimpleCellTypography, {
    vkuiClass: "SimpleCell__children"
  }, children), hasReactNode(badge) && createScopedElement("span", {
    vkuiClass: "SimpleCell__badge"
  }, badge)), description && createScopedElement(Caption, {
    weight: "regular",
    level: "1",
    vkuiClass: "SimpleCell__description"
  }, description)), hasReactNode(indicator) && createScopedElement(SimpleCellTypography, {
    vkuiClass: "SimpleCell__indicator"
  }, indicator), hasAfter && createScopedElement("div", {
    vkuiClass: "SimpleCell__after"
  }, after, expandable && platform === IOS && createScopedElement(Icon24Chevron, null)));
};

export default withAdaptivity(SimpleCell, {
  sizeY: true
});
//# sourceMappingURL=SimpleCell.js.map