import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import { useCallback, useEffect, useState } from 'react';
export var useChipsInput = function useChipsInput(props) {
  var value = props.value,
      getOptionValue = props.getOptionValue,
      onChange = props.onChange,
      onInputChange = props.onInputChange,
      getNewOptionData = props.getNewOptionData;

  var _useState = useState(props.inputValue),
      _useState2 = _slicedToArray(_useState, 2),
      fieldValue = _useState2[0],
      setFieldValue = _useState2[1];

  var _useState3 = useState(value),
      _useState4 = _slicedToArray(_useState3, 2),
      selectedOptions = _useState4[0],
      setSelectedOptions = _useState4[1];

  var clearInput = useCallback(function () {
    setFieldValue('');
    onInputChange({
      target: {
        value: ''
      }
    });
  }, [onInputChange]);
  var handleInputChange = useCallback(function (e) {
    setFieldValue(e.target.value);
    onInputChange(e);
  }, [onInputChange]);
  var toggleOption = useCallback(function (newOption, value) {
    var newSelectedOptions = selectedOptions.filter(function (option) {
      return getOptionValue(newOption) !== getOptionValue(option);
    });

    if (value === true) {
      newSelectedOptions.push(newOption);
    }

    setSelectedOptions(newSelectedOptions);
    onChange(newSelectedOptions);
  }, [selectedOptions, getOptionValue, onChange]);
  var addOption = useCallback(function (newOption) {
    return toggleOption(newOption, true);
  }, [toggleOption]);
  var addOptionFromInput = useCallback(function () {
    var trimmedValue = fieldValue === null || fieldValue === void 0 ? void 0 : fieldValue.trim();

    if (trimmedValue) {
      addOption(getNewOptionData(undefined, trimmedValue));
      clearInput();
    }
  }, [addOption, clearInput, getNewOptionData, fieldValue]);
  var removeOption = useCallback(function (value) {
    toggleOption(getNewOptionData(undefined, value), false);
  }, [toggleOption, getNewOptionData]);
  useEffect(function () {
    setSelectedOptions(value);
    return function () {
      return setSelectedOptions([]);
    };
  }, [props.value]);
  useEffect(function () {
    setFieldValue(props.inputValue);
    return function () {
      return setFieldValue('');
    };
  }, [props.inputValue]);
  return {
    fieldValue: fieldValue,
    setFieldValue: setFieldValue,
    selectedOptions: selectedOptions,
    setSelectedOptions: setSelectedOptions,
    clearInput: clearInput,
    toggleOption: toggleOption,
    addOption: addOption,
    addOptionFromInput: addOptionFromInput,
    removeOption: removeOption,
    handleInputChange: handleInputChange
  };
};
//# sourceMappingURL=useChipsInput.js.map