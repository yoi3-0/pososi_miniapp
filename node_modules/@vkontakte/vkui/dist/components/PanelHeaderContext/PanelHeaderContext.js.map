{"version":3,"sources":["../../../src/components/PanelHeaderContext/PanelHeaderContext.tsx"],"names":["React","Component","FixedLayout","classNames","getClassName","animationEvent","withAdaptivity","ViewWidth","withDOM","withPlatform","PanelHeaderContext","closing","createRef","event","elementRef","current","contains","target","props","onClose","document","removeEventListener","startClosing","setState","opened","isDesktop","addEventListener","prevProps","viewWidth","state","waitAnimationFinish","onAnimationFinish","eventHandler","supported","name","clearTimeout","animationFinishTimeout","setTimeout","children","platform","hasMouse","window","restProps","baseClassNames","SMALL_TABLET"],"mappings":"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","sourcesContent":["import React, { Component, HTMLAttributes, RefObject } from 'react';\nimport FixedLayout from '../FixedLayout/FixedLayout';\nimport { classNames } from '../../lib/classNames';\nimport { getClassName } from '../../helpers/getClassName';\nimport { animationEvent } from '../../lib/supportEvents';\nimport { withAdaptivity, AdaptivityProps, ViewWidth } from '../../hoc/withAdaptivity';\nimport { DOMProps, withDOM } from '../../lib/dom';\nimport { withPlatform } from '../../hoc/withPlatform';\nimport { HasPlatform } from '../../types';\n\nexport interface PanelHeaderContextProps extends HTMLAttributes<HTMLDivElement>, HasPlatform, AdaptivityProps {\n  opened: boolean;\n  onClose: VoidFunction;\n}\n\nexport interface PanelHeaderContextState {\n  closing: boolean;\n}\n\nexport class PanelHeaderContext extends Component<PanelHeaderContextProps & DOMProps, PanelHeaderContextState> {\n  static defaultProps: Partial<PanelHeaderContextProps> = {\n    opened: false,\n  };\n\n  state: PanelHeaderContextState = {\n    closing: false,\n  };\n\n  elementRef: RefObject<HTMLDivElement> = React.createRef();\n\n  private animationFinishTimeout: ReturnType<typeof setTimeout>;\n\n  get isDesktop(): boolean {\n    return this.props.viewWidth >= ViewWidth.SMALL_TABLET;\n  }\n\n  startClosing = (event: Event) => {\n    if (this.elementRef && this.elementRef.current && !this.elementRef.current.contains(event.target as Node)) {\n      this.props.onClose();\n      this.props.document.removeEventListener('click', this.startClosing);\n    }\n  };\n\n  componentDidMount() {\n    if (this.props.opened && this.isDesktop) {\n      this.props.document.addEventListener('click', this.startClosing);\n    }\n  }\n\n  componentDidUpdate(prevProps: PanelHeaderContextProps) {\n    if (this.props.opened !== prevProps.opened || this.props.viewWidth !== prevProps.viewWidth) {\n      if (this.props.opened === false && !this.state.closing) {\n        this.setState({ closing: true });\n        this.waitAnimationFinish(this.onAnimationFinish);\n      }\n\n      if (this.isDesktop && this.props.opened) {\n        this.props.document.addEventListener('click', this.startClosing);\n      } else {\n        this.props.document.removeEventListener('click', this.startClosing);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.isDesktop) {\n      this.props.document.removeEventListener('click', this.startClosing);\n    }\n  }\n\n  waitAnimationFinish(eventHandler: VoidFunction) {\n    if (this.elementRef.current) {\n      if (animationEvent.supported) {\n        this.elementRef.current.removeEventListener(animationEvent.name, eventHandler);\n        this.elementRef.current.addEventListener(animationEvent.name, eventHandler);\n      } else {\n        clearTimeout(this.animationFinishTimeout);\n        this.animationFinishTimeout = setTimeout(eventHandler, 200);\n      }\n    }\n  }\n\n  onAnimationFinish: VoidFunction = () => {\n    this.setState({ closing: false });\n  };\n\n  render() {\n    const { children, opened, onClose, platform, viewWidth, hasMouse, window, document, ...restProps } = this.props;\n    const { closing } = this.state;\n    const baseClassNames = getClassName('PanelHeaderContext', platform);\n\n    return (\n      <FixedLayout {...restProps} vkuiClass={classNames(baseClassNames, {\n        'PanelHeaderContext--opened': opened,\n        'PanelHeaderContext--closing': closing,\n        'PanelHeaderContext--desktop': this.isDesktop,\n      })} vertical=\"top\">\n        <div vkuiClass=\"PanelHeaderContext__in\" ref={this.elementRef}>\n          <div vkuiClass=\"PanelHeaderContext__content\">\n            {(opened || closing) && children}\n          </div>\n        </div>\n        {!this.isDesktop && (opened || closing) && <div onClick={onClose} vkuiClass=\"PanelHeaderContext__fade\" />}\n      </FixedLayout>\n    );\n  }\n}\n\nexport default withAdaptivity(withPlatform(withDOM(PanelHeaderContext)), {\n  viewWidth: true,\n  hasMouse: true,\n});\n"],"file":"PanelHeaderContext.js"}