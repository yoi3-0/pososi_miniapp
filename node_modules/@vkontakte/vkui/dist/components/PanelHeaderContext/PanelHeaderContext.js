import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { createScopedElement } from "../../lib/jsxRuntime";
import React, { Component } from 'react';
import FixedLayout from "../FixedLayout/FixedLayout";
import { classNames } from "../../lib/classNames";
import { getClassName } from "../../helpers/getClassName";
import { animationEvent } from "../../lib/supportEvents";
import { withAdaptivity, ViewWidth } from "../../hoc/withAdaptivity";
import { withDOM } from "../../lib/dom";
import { withPlatform } from "../../hoc/withPlatform";
export var PanelHeaderContext = /*#__PURE__*/function (_Component) {
  _inherits(PanelHeaderContext, _Component);

  var _super = _createSuper(PanelHeaderContext);

  function PanelHeaderContext() {
    var _this;

    _classCallCheck(this, PanelHeaderContext);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      closing: false
    });

    _defineProperty(_assertThisInitialized(_this), "elementRef", /*#__PURE__*/React.createRef());

    _defineProperty(_assertThisInitialized(_this), "animationFinishTimeout", void 0);

    _defineProperty(_assertThisInitialized(_this), "startClosing", function (event) {
      if (_this.elementRef && _this.elementRef.current && !_this.elementRef.current.contains(event.target)) {
        _this.props.onClose();

        _this.props.document.removeEventListener('click', _this.startClosing);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onAnimationFinish", function () {
      _this.setState({
        closing: false
      });
    });

    return _this;
  }

  _createClass(PanelHeaderContext, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.opened && this.isDesktop) {
        this.props.document.addEventListener('click', this.startClosing);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.opened !== prevProps.opened || this.props.viewWidth !== prevProps.viewWidth) {
        if (this.props.opened === false && !this.state.closing) {
          this.setState({
            closing: true
          });
          this.waitAnimationFinish(this.onAnimationFinish);
        }

        if (this.isDesktop && this.props.opened) {
          this.props.document.addEventListener('click', this.startClosing);
        } else {
          this.props.document.removeEventListener('click', this.startClosing);
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.isDesktop) {
        this.props.document.removeEventListener('click', this.startClosing);
      }
    }
  }, {
    key: "waitAnimationFinish",
    value: function waitAnimationFinish(eventHandler) {
      if (this.elementRef.current) {
        if (animationEvent.supported) {
          this.elementRef.current.removeEventListener(animationEvent.name, eventHandler);
          this.elementRef.current.addEventListener(animationEvent.name, eventHandler);
        } else {
          clearTimeout(this.animationFinishTimeout);
          this.animationFinishTimeout = setTimeout(eventHandler, 200);
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          opened = _this$props.opened,
          onClose = _this$props.onClose,
          platform = _this$props.platform,
          viewWidth = _this$props.viewWidth,
          hasMouse = _this$props.hasMouse,
          window = _this$props.window,
          document = _this$props.document,
          restProps = _objectWithoutProperties(_this$props, ["children", "opened", "onClose", "platform", "viewWidth", "hasMouse", "window", "document"]);

      var closing = this.state.closing;
      var baseClassNames = getClassName('PanelHeaderContext', platform);
      return createScopedElement(FixedLayout, _extends({}, restProps, {
        vkuiClass: classNames(baseClassNames, {
          'PanelHeaderContext--opened': opened,
          'PanelHeaderContext--closing': closing,
          'PanelHeaderContext--desktop': this.isDesktop
        }),
        vertical: "top"
      }), createScopedElement("div", {
        vkuiClass: "PanelHeaderContext__in",
        ref: this.elementRef
      }, createScopedElement("div", {
        vkuiClass: "PanelHeaderContext__content"
      }, (opened || closing) && children)), !this.isDesktop && (opened || closing) && createScopedElement("div", {
        onClick: onClose,
        vkuiClass: "PanelHeaderContext__fade"
      }));
    }
  }, {
    key: "isDesktop",
    get: function get() {
      return this.props.viewWidth >= ViewWidth.SMALL_TABLET;
    }
  }]);

  return PanelHeaderContext;
}(Component);

_defineProperty(PanelHeaderContext, "defaultProps", {
  opened: false
});

export default withAdaptivity(withPlatform(withDOM(PanelHeaderContext)), {
  viewWidth: true,
  hasMouse: true
});
//# sourceMappingURL=PanelHeaderContext.js.map