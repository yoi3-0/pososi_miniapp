import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { createScopedElement } from "../../lib/jsxRuntime";
import React, { Component } from 'react';
import { getClassName } from "../../helpers/getClassName";
import { classNames } from "../../lib/classNames";
import { ANDROID, VKCOM } from "../../lib/platform";
import { animationEvent } from "../../lib/supportEvents";
import { withPlatform } from "../../hoc/withPlatform";
import { canUseDOM, withDOM } from "../../lib/dom";

var PopoutWrapper = /*#__PURE__*/function (_Component) {
  _inherits(PopoutWrapper, _Component);

  var _super = _createSuper(PopoutWrapper);

  function PopoutWrapper(props) {
    var _this;

    _classCallCheck(this, PopoutWrapper);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "elRef", void 0);

    _defineProperty(_assertThisInitialized(_this), "animationFinishTimeout", void 0);

    _defineProperty(_assertThisInitialized(_this), "onFadeInEnd", function (e) {
      if (!e || e.animationName === 'vkui-animation-full-fade-in') {
        _this.setState({
          opened: true
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "preventTouch", function (e) {
      return e.preventDefault();
    });

    _this.state = {
      opened: !props.hasMask
    };
    _this.elRef = /*#__PURE__*/React.createRef();
    return _this;
  }

  _createClass(PopoutWrapper, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (canUseDOM) {
        this.props.window.addEventListener('touchmove', this.preventTouch, {
          passive: false
        });
        this.waitAnimationFinish(this.elRef.current, this.onFadeInEnd);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      // Здесь нужен последний аргумент с такими же параметрами, потому что
      // некоторые браузеры на странных вендорах типа Meizu не удаляют обработчик.
      // https://github.com/VKCOM/VKUI/issues/444
      if (canUseDOM) {
        // @ts-ignore (В интерфейсе EventListenerOptions нет поля passive)
        this.props.window.removeEventListener('touchmove', this.preventTouch, {
          passive: false
        });
        clearTimeout(this.animationFinishTimeout);
      }
    }
  }, {
    key: "waitAnimationFinish",
    value: function waitAnimationFinish(elem, eventHandler) {
      if (animationEvent.supported) {
        elem.removeEventListener(animationEvent.name, eventHandler);
        elem.addEventListener(animationEvent.name, eventHandler);
      } else {
        clearTimeout(this.animationFinishTimeout);
        this.animationFinishTimeout = setTimeout(eventHandler, this.props.platform === ANDROID || this.props.platform === VKCOM ? 200 : 300);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          alignY = _this$props.alignY,
          alignX = _this$props.alignX,
          closing = _this$props.closing,
          children = _this$props.children,
          hasMask = _this$props.hasMask,
          fixed = _this$props.fixed,
          platform = _this$props.platform,
          onClick = _this$props.onClick,
          window = _this$props.window,
          document = _this$props.document,
          restProps = _objectWithoutProperties(_this$props, ["alignY", "alignX", "closing", "children", "hasMask", "fixed", "platform", "onClick", "window", "document"]);

      var baseClassNames = getClassName('PopoutWrapper', platform);
      return createScopedElement("div", _extends({}, restProps, {
        vkuiClass: classNames(baseClassNames, "PopoutWrapper--v-".concat(alignY), "PopoutWrapper--h-".concat(alignX), {
          'PopoutWrapper--closing': closing,
          'PopoutWrapper--opened': this.state.opened,
          'PopoutWrapper--fixed': fixed,
          'PopoutWrapper--masked': hasMask
        }),
        ref: this.elRef
      }), createScopedElement("div", {
        vkuiClass: "PopoutWrapper__container"
      }, createScopedElement("div", {
        vkuiClass: "PopoutWrapper__overlay",
        onClick: onClick
      }), createScopedElement("div", {
        vkuiClass: "PopoutWrapper__content"
      }, children)));
    }
  }]);

  return PopoutWrapper;
}(Component);

_defineProperty(PopoutWrapper, "defaultProps", {
  hasMask: true,
  fixed: true,
  alignY: 'center',
  alignX: 'center',
  closing: false
});

export default withPlatform(withDOM(PopoutWrapper));
//# sourceMappingURL=PopoutWrapper.js.map