{"version":3,"sources":["../../../src/components/Slider/Slider.tsx"],"names":["useCallback","useMemo","useState","clamp","UniversalSlider","Slider","onChange","defaultValue","props","isControlled","value","min","localValue","setValue","max","handleChange","nextValue","event","disabled","rangeValue","defaultProps","step"],"mappings":";;;;AAAA,SAASA,WAAT,EAAsBC,OAAtB,EAA+BC,QAA/B,QAA+C,OAA/C;AACA,SAASC,KAAT;AACA,SAASC,eAAT;;AAIA,IAAMC,MAAM,GAAG,SAATA,MAAS,OAAuD;AAAA,MAApDC,QAAoD,QAApDA,QAAoD;AAAA,MAA1CC,YAA0C,QAA1CA,YAA0C;AAAA,MAAzBC,KAAyB;;AACpE,MAAMC,YAAY,GAAGD,KAAK,CAACE,KAAN,IAAe,IAApC;;AADoE,kBAGrCR,QAAQ,CAACK,YAAY,IAAI,IAAhB,GAAuBC,KAAK,CAACG,GAA7B,GAAmCJ,YAApC,CAH6B;AAAA;AAAA,MAG7DK,UAH6D;AAAA,MAGjDC,QAHiD;;AAIpE,MAAMH,KAAK,GAAGP,KAAK,CAACM,YAAY,GAAGD,KAAK,CAACE,KAAT,GAAiBE,UAA9B,EAA0CJ,KAAK,CAACG,GAAhD,EAAqDH,KAAK,CAACM,GAA3D,CAAnB;AAEA,MAAMC,YAA8D,GAAGf,WAAW,CAAC,UAACgB,SAAD,EAAYC,KAAZ,EAAsB;AACvG,QAAIT,KAAK,CAACU,QAAN,IAAkBR,KAAK,KAAKM,SAAS,CAAC,CAAD,CAAzC,EAA8C;AAC5C;AACD;;AACD,KAACP,YAAD,IAAiBI,QAAQ,CAACG,SAAS,CAAC,CAAD,CAAV,CAAzB;AACAV,IAAAA,QAAQ,IAAIA,QAAQ,CAACU,SAAS,CAAC,CAAD,CAAV,EAAeC,KAAf,CAApB;AACD,GANiF,EAM/E,CAACX,QAAD,EAAWG,YAAX,EAAyBC,KAAzB,CAN+E,CAAlF;AAQA,MAAMS,UAA0B,GAAGlB,OAAO,CAAC;AAAA,WAAM,CAAC,IAAD,EAAOS,KAAP,CAAN;AAAA,GAAD,EAAsB,CAACA,KAAD,CAAtB,CAA1C;AACA,SAAO,oBAAC,eAAD,eAAqBF,KAArB;AAA4B,IAAA,KAAK,EAAEW,UAAnC;AAA+C,IAAA,QAAQ,EAAEJ;AAAzD,KAAP;AACD,CAhBD;;AAkBAV,MAAM,CAACe,YAAP,GAAsB;AACpBT,EAAAA,GAAG,EAAE,CADe;AAEpBG,EAAAA,GAAG,EAAE,GAFe;AAGpBO,EAAAA,IAAI,EAAE;AAHc,CAAtB;AAMA,eAAehB,MAAf","sourcesContent":["import { useCallback, useMemo, useState } from 'react';\nimport { clamp } from '../../helpers/math';\nimport { UniversalSlider, UniversalSliderProps, UniversalValue } from '../RangeSlider/UniversalSlider';\n\nexport type SliderProps = UniversalSliderProps<number>;\n\nconst Slider = ({ onChange, defaultValue, ...props }: SliderProps) => {\n  const isControlled = props.value != null;\n\n  const [localValue, setValue] = useState(defaultValue == null ? props.min : defaultValue);\n  const value = clamp(isControlled ? props.value : localValue, props.min, props.max);\n\n  const handleChange: UniversalSliderProps<UniversalValue>['onChange'] = useCallback((nextValue, event) => {\n    if (props.disabled || value === nextValue[1]) {\n      return;\n    }\n    !isControlled && setValue(nextValue[1]);\n    onChange && onChange(nextValue[1], event);\n  }, [onChange, isControlled, value]);\n\n  const rangeValue: [null, number] = useMemo(() => [null, value], [value]);\n  return <UniversalSlider {...props} value={rangeValue} onChange={handleChange} />;\n};\n\nSlider.defaultProps = {\n  min: 0,\n  max: 100,\n  step: 0,\n};\n\nexport default Slider;\n"],"file":"Slider.js"}