import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _createSuper from "@babel/runtime/helpers/createSuper";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import { createScopedElement } from "../../lib/jsxRuntime";
import { Component } from 'react';
import { getSupportedEvents, coordX, coordY, touchEnabled } from "../../lib/touch";
import { canUseDOM, withDOM } from "../../lib/dom";
import { setRef, noop } from "../../lib/utils";
var events = getSupportedEvents();

var Touch = /*#__PURE__*/function (_Component) {
  _inherits(Touch, _Component);

  var _super = _createSuper(Touch);

  function Touch() {
    var _this;

    _classCallCheck(this, Touch);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "didSlide", false);

    _defineProperty(_assertThisInitialized(_this), "gesture", {});

    _defineProperty(_assertThisInitialized(_this), "container", void 0);

    _defineProperty(_assertThisInitialized(_this), "onEnter", function (e) {
      if (_this.props.onEnter) {
        _this.props.onEnter(e);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onLeave", function (e) {
      if (_this.props.onLeave) {
        _this.props.onLeave(e);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onStart", function (e) {
      _this.gesture = {
        startX: coordX(e),
        startY: coordY(e),
        startT: new Date(),
        isPressed: true
      }; // Вызываем нужные колбеки из props

      var outputEvent = _objectSpread(_objectSpread({}, _this.gesture), {}, {
        originalEvent: e
      });

      if (_this.props.onStart) {
        _this.props.onStart(outputEvent);
      }

      if (_this.props.onStartX) {
        _this.props.onStartX(outputEvent);
      }

      if (_this.props.onStartY) {
        _this.props.onStartY(outputEvent);
      }

      !touchEnabled && _this.subscribe(_this.document);
    });

    _defineProperty(_assertThisInitialized(_this), "onMove", function (e) {
      var _this$gesture = _this.gesture,
          isPressed = _this$gesture.isPressed,
          isX = _this$gesture.isX,
          isY = _this$gesture.isY,
          startX = _this$gesture.startX,
          startY = _this$gesture.startY;

      if (isPressed) {
        // смещения
        var shiftX = coordX(e) - startX;
        var shiftY = coordY(e) - startY; // абсолютные значения смещений

        var shiftXAbs = Math.abs(shiftX);
        var shiftYAbs = Math.abs(shiftY); // Если определяем мультитач, то прерываем жест

        if (!!e.touches && e.touches.length > 1) {
          return _this.onEnd(e);
        } // если мы ещё не определились


        if (!isX && !isY) {
          var willBeX = shiftXAbs >= 5 && shiftXAbs > shiftYAbs;
          var willBeY = shiftYAbs >= 5 && shiftYAbs > shiftXAbs;
          var willBeSlidedX = willBeX && !!_this.props.onMoveX || !!_this.props.onMove;
          var willBeSlidedY = willBeY && !!_this.props.onMoveY || !!_this.props.onMove;
          _this.gesture.isY = willBeY;
          _this.gesture.isX = willBeX;
          _this.gesture.isSlideX = willBeSlidedX;
          _this.gesture.isSlideY = willBeSlidedY;
          _this.gesture.isSlide = willBeSlidedX || willBeSlidedY;
        }

        if (_this.gesture.isSlide) {
          _this.gesture.shiftX = shiftX;
          _this.gesture.shiftY = shiftY;
          _this.gesture.shiftXAbs = shiftXAbs;
          _this.gesture.shiftYAbs = shiftYAbs; // Вызываем нужные колбеки из props

          var _outputEvent = _objectSpread(_objectSpread({}, _this.gesture), {}, {
            originalEvent: e
          });

          if (_this.props.onMove) {
            _this.props.onMove(_outputEvent);
          }

          if (_this.gesture.isSlideX && _this.props.onMoveX) {
            _this.props.onMoveX(_outputEvent);
          }

          if (_this.gesture.isSlideY && _this.props.onMoveY) {
            _this.props.onMoveY(_outputEvent);
          }
        }
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onEnd", function (e) {
      var _this$gesture2 = _this.gesture,
          isPressed = _this$gesture2.isPressed,
          isSlide = _this$gesture2.isSlide,
          isSlideX = _this$gesture2.isSlideX,
          isSlideY = _this$gesture2.isSlideY;

      if (isPressed) {
        // Вызываем нужные колбеки из props
        var _outputEvent2 = _objectSpread(_objectSpread({}, _this.gesture), {}, {
          originalEvent: e
        });

        if (_this.props.onEnd) {
          _this.props.onEnd(_outputEvent2);
        }

        if (isSlideY && _this.props.onEndY) {
          _this.props.onEndY(_outputEvent2);
        }

        if (isSlideX && _this.props.onEndX) {
          _this.props.onEndX(_outputEvent2);
        }
      }

      _this.didSlide = isSlide;
      _this.gesture = {}; // Если это был тач-евент, симулируем отмену hover

      if (e.type === 'touchend' || e.type === 'touchcancel') {
        _this.onLeave(e);
      }

      !touchEnabled && _this.unsubscribe();
    });

    _defineProperty(_assertThisInitialized(_this), "unsubscribe", noop);

    _defineProperty(_assertThisInitialized(_this), "onDragStart", function (e) {
      var target = e.target;

      if (target.tagName === 'A' || target.tagName === 'IMG') {
        e.preventDefault();
      }
    });

    _defineProperty(_assertThisInitialized(_this), "postGestureClick", function (e) {
      var _this$props = _this.props,
          onClickCapture = _this$props.onClickCapture,
          noSlideClick = _this$props.noSlideClick;

      if (!_this.didSlide) {
        return onClickCapture && onClickCapture(e);
      }

      if (e.target.tagName === 'A') {
        e.preventDefault();
      }

      if (noSlideClick) {
        e.stopPropagation();
      } else {
        onClickCapture && onClickCapture(e);
      }

      _this.didSlide = false;
    });

    _defineProperty(_assertThisInitialized(_this), "getRef", function (container) {
      _this.container = container;
      setRef(container, _this.props.getRootRef);
    });

    return _this;
  }

  _createClass(Touch, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (canUseDOM) {
        this.container.addEventListener(events[0], this.onStart, {
          capture: this.props.useCapture,
          passive: false
        });
        touchEnabled && this.subscribe(this.container);
        this.container.addEventListener('mouseenter', this.onEnter, {
          capture: this.props.useCapture,
          passive: true
        });
        this.container.addEventListener('mouseleave', this.onLeave, {
          capture: this.props.useCapture,
          passive: true
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.container.removeEventListener(events[0], this.onStart);
      this.unsubscribe();
      this.container.removeEventListener('mouseenter', this.onEnter);
      this.container.removeEventListener('mouseleave', this.onLeave);
    }
    /**
     * Обработчик событий mouseenter
     *
     * @param {Object} e Браузерное событие
     * @return {void}
     */

  }, {
    key: "subscribe",
    value: function subscribe(element) {
      var _this2 = this;

      this.unsubscribe();
      var listenerParams = {
        capture: this.props.useCapture,
        passive: false
      };
      element.addEventListener(events[1], this.onMove, listenerParams);
      element.addEventListener(events[2], this.onEnd, listenerParams);
      element.addEventListener(events[3], this.onEnd, listenerParams);

      this.unsubscribe = function () {
        // Здесь нужен последний аргумент с такими же параметрами, потому что
        // некоторые браузеры на странных вендорах типа Meizu не удаляют обработчик.
        // https://github.com/VKCOM/VKUI/issues/444
        element.removeEventListener(events[1], _this2.onMove, listenerParams);
        element.removeEventListener(events[2], _this2.onEnd, listenerParams);
        element.removeEventListener(events[3], _this2.onEnd, listenerParams);
        _this2.unsubscribe = noop;
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          onStart = _this$props2.onStart,
          onStartX = _this$props2.onStartX,
          onStartY = _this$props2.onStartY,
          onMove = _this$props2.onMove,
          onMoveX = _this$props2.onMoveX,
          onMoveY = _this$props2.onMoveY,
          onLeave = _this$props2.onLeave,
          onEnter = _this$props2.onEnter,
          onEnd = _this$props2.onEnd,
          onEndX = _this$props2.onEndX,
          onEndY = _this$props2.onEndY,
          useCapture = _this$props2.useCapture,
          Component = _this$props2.Component,
          getRootRef = _this$props2.getRootRef,
          noSlideClick = _this$props2.noSlideClick,
          window = _this$props2.window,
          document = _this$props2.document,
          restProps = _objectWithoutProperties(_this$props2, ["onStart", "onStartX", "onStartY", "onMove", "onMoveX", "onMoveY", "onLeave", "onEnter", "onEnd", "onEndX", "onEndY", "useCapture", "Component", "getRootRef", "noSlideClick", "window", "document"]);

      return createScopedElement(Component, _extends({}, restProps, {
        onDragStart: this.onDragStart,
        onClickCapture: this.postGestureClick,
        ref: this.getRef
      }), this.props.children);
    }
  }, {
    key: "document",
    get: function get() {
      return this.props.document;
    }
  }]);

  return Touch;
}(Component);

_defineProperty(Touch, "defaultProps", {
  Component: 'div',
  children: '',
  useCapture: false,
  noSlideClick: false
});

export default withDOM(Touch);
//# sourceMappingURL=Touch.js.map