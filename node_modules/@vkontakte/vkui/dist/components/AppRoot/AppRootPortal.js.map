{"version":3,"sources":["../../../src/components/AppRoot/AppRootPortal.tsx"],"names":["useContext","Fragment","createPortal","AppRootContext","AppRootPortal","children","className","portalRoot","embedded"],"mappings":";AAAA,SAAgCA,UAAhC,EAA4CC,QAA5C,QAA4D,OAA5D;AACA,SAASC,YAAT,QAA6B,WAA7B;AACA,SAASC,cAAT;AAEA,OAAO,IAAMC,aAA4D,GAAG,SAA/DA,aAA+D,OAA6B;AAAA,MAA1BC,QAA0B,QAA1BA,QAA0B;AAAA,MAAhBC,SAAgB,QAAhBA,SAAgB;;AAAA,oBACtEN,UAAU,CAACG,cAAD,CAD4D;AAAA,MAC/FI,UAD+F,eAC/FA,UAD+F;AAAA,MACnFC,QADmF,eACnFA,QADmF;;AAEvG,SAAOA,QAAQ,IAAID,UAAZ,gBACHL,YAAY,CAAE;AAAK,IAAA,SAAS,EAAEI;AAAhB,KAA4BD,QAA5B,CAAF,EAAgDE,UAAhD,CADT,GAEH,oBAAC,QAAD,QAAWF,QAAX,CAFJ;AAGD,CALM","sourcesContent":["import { FC, PropsWithChildren, useContext, Fragment } from 'react';\nimport { createPortal } from 'react-dom';\nimport { AppRootContext } from './AppRootContext';\n\nexport const AppRootPortal: FC<PropsWithChildren<{ className?: string }>> = ({ children, className }) => {\n  const { portalRoot, embedded } = useContext(AppRootContext);\n  return embedded && portalRoot\n    ? createPortal((<div className={className}>{children}</div>), portalRoot)\n    : <Fragment>{children}</Fragment>;\n};\n"],"file":"AppRootPortal.js"}