import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import { createScopedElement } from "../../lib/jsxRuntime";
import { useContext } from 'react';
import { getClassName } from "../../helpers/getClassName";
import Tappable from "../Tappable/Tappable";
import { classNames } from "../../lib/classNames";
import { VKCOM } from "../../lib/platform";
import { usePlatform } from "../../hooks/usePlatform";
import { hasReactNode } from "../../lib/utils";
import { TabsModeContext } from "../Tabs/Tabs";
import Headline from "../Typography/Headline/Headline";
import Subhead from "../Typography/Subhead/Subhead";
import Text from "../Typography/Text/Text";

var TabsItem = function TabsItem(_ref) {
  var children = _ref.children,
      selected = _ref.selected,
      after = _ref.after,
      restProps = _objectWithoutProperties(_ref, ["children", "selected", "after"]);

  var platform = usePlatform();
  var mode = useContext(TabsModeContext);
  var TypographyComponent = platform === VKCOM ? Text : mode === 'buttons' || mode === 'segmented' ? Subhead : Headline;
  return createScopedElement(Tappable, _extends({}, restProps, {
    vkuiClass: classNames(getClassName('TabsItem', platform), {
      'TabsItem--selected': selected
    }),
    hasActive: mode === 'segmented',
    activeMode: "TabsItem--active"
  }), createScopedElement(TypographyComponent, {
    vkuiClass: "TabsItem__in",
    weight: "medium"
  }, children), hasReactNode(after) && createScopedElement("div", {
    vkuiClass: "TabsItem__after"
  }, after));
};

TabsItem.defaultProps = {
  selected: false
};
export default TabsItem;
//# sourceMappingURL=TabsItem.js.map