import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import { createScopedElement } from "../../lib/jsxRuntime";
import React, { useEffect, useRef, useState } from 'react';
import { classNames } from "../../lib/classNames";
import { getTitleFromChildren } from "../../lib/utils";
import { usePlatform } from "../../hooks/usePlatform";
import { getClassName } from "../../helpers/getClassName";
import { withAdaptivity } from "../../hoc/withAdaptivity";
import { useDOM } from "../../lib/dom";
import { ANDROID, IOS, VKCOM } from "../../lib/platform";
import { Icon24Cancel } from '@vkontakte/icons';
import IconButton from "../IconButton/IconButton";
import { useGlobalEventListener } from "../../hooks/useGlobalEventListener";
export var Removable = withAdaptivity(function (props) {
  var children = props.children,
      sizeY = props.sizeY,
      onRemove = props.onRemove,
      removePlaceholder = props.removePlaceholder,
      align = props.align,
      restProps = _objectWithoutProperties(props, ["children", "sizeY", "onRemove", "removePlaceholder", "align"]);

  var platform = usePlatform();

  var _useDOM = useDOM(),
      document = _useDOM.document;

  var removeButtonRef = useRef(null);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isRemoveActivated = _useState2[0],
      setRemoveActivated = _useState2[1];

  var _useState3 = useState(0),
      _useState4 = _slicedToArray(_useState3, 2),
      removeOffset = _useState4[0],
      updateRemoveOffset = _useState4[1];

  useGlobalEventListener(document, 'click', isRemoveActivated && function () {
    setRemoveActivated(false);
    updateRemoveOffset(0);
  });

  var onRemoveActivateClick = function onRemoveActivateClick(e) {
    e.nativeEvent.stopPropagation();
    e.preventDefault();
    setRemoveActivated(true);
  };

  var onRemoveClick = function onRemoveClick(e) {
    e.nativeEvent.stopImmediatePropagation();
    e.preventDefault();
    onRemove && onRemove(e);
  };

  useEffect(function () {
    if (isRemoveActivated && (removeButtonRef === null || removeButtonRef === void 0 ? void 0 : removeButtonRef.current)) {
      updateRemoveOffset(removeButtonRef.current.offsetWidth);
    }
  }, [isRemoveActivated]);
  var removePlaceholderString = getTitleFromChildren(removePlaceholder);
  return createScopedElement("div", _extends({}, restProps, {
    vkuiClass: classNames(getClassName('Removable', platform), "Removable--".concat(align), "Removable--sizeY-".concat(sizeY))
  }), (platform === ANDROID || platform === VKCOM) && createScopedElement("div", {
    vkuiClass: "Removable__content"
  }, children, createScopedElement(IconButton, {
    "aria-label": removePlaceholderString,
    vkuiClass: "Removable__action Removable__action--remove",
    onClick: onRemoveClick
  }, createScopedElement(Icon24Cancel, null))), platform === IOS && createScopedElement(React.Fragment, null, createScopedElement("div", {
    vkuiClass: "Removable__content",
    style: {
      transform: "translateX(-".concat(removeOffset, "px)")
    }
  }, createScopedElement("button", {
    type: "button",
    "aria-label": removePlaceholderString,
    vkuiClass: "Removable__action Removable__action--indicator",
    onClick: onRemoveActivateClick
  }, createScopedElement("i", {
    vkuiClass: "Removable__action-in",
    role: "presentation"
  })), children, createScopedElement("span", {
    vkuiClass: "Removable__offset",
    "aria-hidden": "true"
  })), createScopedElement("button", {
    type: "button",
    tabIndex: isRemoveActivated ? null : -1,
    ref: removeButtonRef,
    vkuiClass: "Removable__action Removable__action--remove",
    onClick: onRemoveClick,
    style: {
      transform: "translateX(-".concat(removeOffset, "px)")
    }
  }, createScopedElement("span", {
    vkuiClass: "Removable__action-in"
  }, removePlaceholder))));
}, {
  sizeY: true
});
Removable.defaultProps = {
  align: 'center',
  removePlaceholder: 'Удалить'
};
//# sourceMappingURL=Removable.js.map