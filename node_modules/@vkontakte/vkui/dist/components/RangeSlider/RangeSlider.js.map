{"version":3,"sources":["../../../src/components/RangeSlider/RangeSlider.tsx"],"names":["useCallback","useState","clamp","UniversalSlider","RangeSlider","onChange","defaultValue","props","isControlled","Boolean","value","min","max","localValue","setValue","start","end","handleChange","nextValue","event","disabled","defaultProps","step"],"mappings":";;;;AAAA,SAAaA,WAAb,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,SAASC,KAAT;AACA,SAASC,eAAT;;AAKA,IAAMC,WAAiC,GAAG,SAApCA,WAAoC,OAA4D;AAAA,MAAzDC,QAAyD,QAAzDA,QAAyD;AAAA,MAA/CC,YAA+C,QAA/CA,YAA+C;AAAA,MAA9BC,KAA8B;;AACpG,MAAMC,YAAY,GAAGC,OAAO,CAACF,KAAK,CAACG,KAAP,CAA5B;;AADoG,kBAGrET,QAAQ,CAACK,YAAY,IAAI,CAACC,KAAK,CAACI,GAAP,EAAYJ,KAAK,CAACK,GAAlB,CAAjB,CAH6D;AAAA;AAAA,MAG7FC,UAH6F;AAAA,MAGjFC,QAHiF;;AAAA,cAI/EP,KAAK,CAACG,KAAN,IAAeG,UAJgE;AAAA;AAAA,MAI7FE,KAJ6F;AAAA,MAItFC,GAJsF;;AAKpG,MAAMN,KAAK,GAAG,CAACR,KAAK,CAACa,KAAD,EAAQR,KAAK,CAACI,GAAd,EAAmBJ,KAAK,CAACK,GAAzB,CAAN,EAAqCV,KAAK,CAACc,GAAD,EAAMT,KAAK,CAACI,GAAZ,EAAiBJ,KAAK,CAACK,GAAvB,CAA1C,CAAd;AAEA,MAAMK,YAA0C,GAAGjB,WAAW,CAAC,UAACkB,SAAD,EAAYC,KAAZ,EAAsB;AACnF,QAAIZ,KAAK,CAACa,QAAN,IAAkBV,KAAK,CAAC,CAAD,CAAL,KAAaQ,SAAS,CAAC,CAAD,CAAtB,IAA6BR,KAAK,CAAC,CAAD,CAAL,KAAaQ,SAAS,CAAC,CAAD,CAAzE,EAA8E;AAC5E;AACD;;AACD,KAACV,YAAD,IAAiBM,QAAQ,CAACI,SAAD,CAAzB;AACAb,IAAAA,QAAQ,IAAIA,QAAQ,CAACa,SAAD,EAAYC,KAAZ,CAApB;AACD,GAN6D,EAM3D,CAACd,QAAD,EAAWG,YAAX,EAAyBE,KAAzB,CAN2D,CAA9D;AAQA,SAAO,oBAAC,eAAD,eAAqBH,KAArB;AAA4B,IAAA,KAAK,EAAEG,KAAnC;AAA0C,IAAA,QAAQ,EAAEO;AAApD,KAAP;AACD,CAhBD;;AAkBAb,WAAW,CAACiB,YAAZ,GAA2B;AACzBV,EAAAA,GAAG,EAAE,CADoB;AAEzBC,EAAAA,GAAG,EAAE,GAFoB;AAGzBU,EAAAA,IAAI,EAAE;AAHmB,CAA3B;AAMA,eAAelB,WAAf","sourcesContent":["import { FC, useCallback, useState } from 'react';\nimport { clamp } from '../../helpers/math';\nimport { UniversalSlider, UniversalSliderProps } from './UniversalSlider';\n\nexport type Value = [number, number];\nexport type RangeSliderProps = UniversalSliderProps<Value>;\n\nconst RangeSlider: FC<RangeSliderProps> = ({ onChange, defaultValue, ...props }: RangeSliderProps) => {\n  const isControlled = Boolean(props.value);\n\n  const [localValue, setValue] = useState(defaultValue || [props.min, props.max] as Value);\n  const [start, end] = props.value || localValue;\n  const value = [clamp(start, props.min, props.max), clamp(end, props.min, props.max)] as Value;\n\n  const handleChange: RangeSliderProps['onChange'] = useCallback((nextValue, event) => {\n    if (props.disabled || value[0] === nextValue[0] && value[1] === nextValue[1]) {\n      return;\n    }\n    !isControlled && setValue(nextValue);\n    onChange && onChange(nextValue, event);\n  }, [onChange, isControlled, value]);\n\n  return <UniversalSlider {...props} value={value} onChange={handleChange} />;\n};\n\nRangeSlider.defaultProps = {\n  min: 0,\n  max: 100,\n  step: 0,\n};\n\nexport default RangeSlider;\n"],"file":"RangeSlider.js"}