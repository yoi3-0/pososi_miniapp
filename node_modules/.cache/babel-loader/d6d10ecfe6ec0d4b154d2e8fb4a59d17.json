{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport { useState, useEffect } from 'react';\nimport { canUseDOM, useDOM } from \"../../lib/dom\";\nimport { ConfigProviderContext, Scheme, defaultConfigProviderProps, ExternalScheme } from \"./ConfigProviderContext\";\nimport { VKCOM } from \"../../lib/platform\";\nimport { useIsomorphicLayoutEffect } from \"../../lib/useIsomorphicLayoutEffect\";\nimport { useObjectMemo } from \"../../hooks/useObjectMemo\";\nimport { noop } from \"../../lib/utils\";\nimport { warnOnce } from \"../../lib/warnOnce\";\n\nfunction useSchemeDetector(node, _scheme) {\n  var inherit = _scheme === 'inherit';\n\n  var getScheme = function getScheme() {\n    if (!inherit || !canUseDOM) {\n      return undefined;\n    }\n\n    return node.getAttribute('scheme');\n  };\n\n  var _useState = useState(getScheme()),\n      _useState2 = _slicedToArray(_useState, 2),\n      resolvedScheme = _useState2[0],\n      setScheme = _useState2[1];\n\n  useEffect(function () {\n    if (!inherit) {\n      return noop;\n    }\n\n    setScheme(getScheme());\n    var observer = new MutationObserver(function () {\n      return setScheme(getScheme());\n    });\n    observer.observe(node, {\n      attributes: true,\n      attributeFilter: ['scheme']\n    });\n    return function () {\n      return observer.disconnect();\n    };\n  }, [inherit]);\n  return _scheme === 'inherit' ? resolvedScheme : _scheme;\n}\n\nvar deriveAppearance = function deriveAppearance(scheme) {\n  return scheme === Scheme.SPACE_GRAY || scheme === ExternalScheme.VKCOM_DARK ? 'dark' : 'light';\n};\n\nfunction normalizeScheme(scheme, platform) {\n  if (scheme === 'inherit') {\n    return scheme;\n  }\n\n  if (platform === VKCOM) {\n    return Scheme.VKCOM;\n  }\n\n  switch (scheme) {\n    case Scheme.DEPRECATED_CLIENT_LIGHT:\n      return Scheme.BRIGHT_LIGHT;\n\n    case Scheme.DEPRECATED_CLIENT_DARK:\n      return Scheme.SPACE_GRAY;\n\n    default:\n      return scheme;\n  }\n}\n\nvar warn = warnOnce('ConfigProvider');\n\nvar ConfigProvider = function ConfigProvider(_ref) {\n  var children = _ref.children,\n      schemeTarget = _ref.schemeTarget,\n      config = _objectWithoutProperties(_ref, [\"children\", \"schemeTarget\"]);\n\n  var scheme = normalizeScheme(config.scheme, config.platform);\n\n  var _useDOM = useDOM(),\n      document = _useDOM.document;\n\n  var target = schemeTarget || (document === null || document === void 0 ? void 0 : document.body);\n  useIsomorphicLayoutEffect(function () {\n    if (scheme === 'inherit') {\n      return noop;\n    }\n\n    if (process.env.NODE_ENV === 'development' && target.hasAttribute('scheme')) {\n      warn('<body scheme> was set before VKUI mount - did you forget scheme=\"inherit\"?');\n    }\n\n    target.setAttribute('scheme', scheme);\n    return function () {\n      return target.removeAttribute('scheme');\n    };\n  }, [scheme]);\n  var realScheme = useSchemeDetector(target, scheme);\n  var configContext = useObjectMemo(_objectSpread({\n    appearance: deriveAppearance(realScheme)\n  }, config));\n  return createScopedElement(ConfigProviderContext.Provider, {\n    value: configContext\n  }, children);\n}; // Деструктуризация нужна из бага в react-docgen-typescript\n// https://github.com/styleguidist/react-docgen-typescript/issues/195\n\n\nConfigProvider.defaultProps = _objectSpread({}, defaultConfigProviderProps);\nexport default ConfigProvider;","map":{"version":3,"sources":["../../../src/components/ConfigProvider/ConfigProvider.tsx"],"names":["inherit","_scheme","getScheme","node","resolvedScheme","setScheme","useState","useEffect","observer","attributes","attributeFilter","deriveAppearance","scheme","Scheme","ExternalScheme","platform","warn","warnOnce","ConfigProvider","children","schemeTarget","config","normalizeScheme","document","useDOM","target","useIsomorphicLayoutEffect","process","realScheme","useSchemeDetector","configContext","useObjectMemo","appearance"],"mappings":"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","sourcesContent":["import { FC, useState, useEffect, ReactNode } from 'react';\nimport { AppearanceType } from '@vkontakte/vk-bridge';\nimport { canUseDOM, useDOM } from '../../lib/dom';\nimport {\n  ConfigProviderContext,\n  ConfigProviderContextInterface,\n  Scheme,\n  AppearanceScheme,\n  defaultConfigProviderProps,\n  ExternalScheme,\n} from './ConfigProviderContext';\nimport { PlatformType, VKCOM } from '../../lib/platform';\nimport { useIsomorphicLayoutEffect } from '../../lib/useIsomorphicLayoutEffect';\nimport { useObjectMemo } from '../../hooks/useObjectMemo';\nimport { noop } from '../../lib/utils';\nimport { warnOnce } from '../../lib/warnOnce';\n\nexport interface ConfigProviderProps extends ConfigProviderContextInterface {\n  /**\n   * Цветовая схема приложения\n   */\n  scheme?: AppearanceScheme;\n}\n\nfunction useSchemeDetector(node: HTMLElement, _scheme: Scheme | 'inherit') {\n  const inherit = _scheme === 'inherit';\n  const getScheme = () => {\n    if (!inherit || !canUseDOM) {\n      return undefined;\n    }\n    return node.getAttribute('scheme') as Scheme | ExternalScheme;\n  };\n  const [resolvedScheme, setScheme] = useState(getScheme());\n\n  useEffect(() => {\n    if (!inherit) {\n      return noop;\n    }\n    setScheme(getScheme());\n    const observer = new MutationObserver(() => setScheme(getScheme()));\n    observer.observe(node, { attributes: true, attributeFilter: ['scheme'] });\n    return () => observer.disconnect();\n  }, [inherit]);\n\n  return _scheme === 'inherit' ? resolvedScheme : _scheme;\n}\n\nconst deriveAppearance = (scheme: Scheme | ExternalScheme): AppearanceType =>\n  scheme === Scheme.SPACE_GRAY || scheme === ExternalScheme.VKCOM_DARK ? 'dark' : 'light';\n\nfunction normalizeScheme(scheme: AppearanceScheme, platform: PlatformType): Scheme | 'inherit' {\n  if (scheme === 'inherit') {\n    return scheme;\n  }\n  if (platform === VKCOM) {\n    return Scheme.VKCOM;\n  }\n  switch (scheme) {\n    case Scheme.DEPRECATED_CLIENT_LIGHT:\n      return Scheme.BRIGHT_LIGHT;\n    case Scheme.DEPRECATED_CLIENT_DARK:\n      return Scheme.SPACE_GRAY;\n    default:\n      return scheme as Scheme;\n  }\n}\n\nconst warn = warnOnce('ConfigProvider');\n\nconst ConfigProvider: FC<ConfigProviderProps> = ({\n  children,\n  schemeTarget,\n  ...config\n}: ConfigProviderProps & { children?: ReactNode; schemeTarget?: HTMLElement }) => {\n  const scheme = normalizeScheme(config.scheme, config.platform);\n  const { document } = useDOM();\n  const target = schemeTarget || document?.body;\n\n  useIsomorphicLayoutEffect(() => {\n    if (scheme === 'inherit') {\n      return noop;\n    }\n    if (process.env.NODE_ENV === 'development' && target.hasAttribute('scheme')) {\n      warn('<body scheme> was set before VKUI mount - did you forget scheme=\"inherit\"?');\n    }\n    target.setAttribute('scheme', scheme);\n    return () => target.removeAttribute('scheme');\n  }, [scheme]);\n\n  const realScheme = useSchemeDetector(target, scheme);\n  const configContext = useObjectMemo({ appearance: deriveAppearance(realScheme), ...config });\n\n  return (\n    <ConfigProviderContext.Provider value={configContext}>\n      {children}\n    </ConfigProviderContext.Provider>\n  );\n};\n\n// Деструктуризация нужна из бага в react-docgen-typescript\n// https://github.com/styleguidist/react-docgen-typescript/issues/195\nConfigProvider.defaultProps = { ...defaultConfigProviderProps };\n\nexport default ConfigProvider;\n"]},"metadata":{},"sourceType":"module"}