{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/createSuper\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport React, { createRef } from 'react';\nimport SliderSwitchButton from \"./SliderSwitchButton\";\nimport { classNames } from \"../../lib/classNames\";\n\nvar SliderSwitch = /*#__PURE__*/function (_React$Component) {\n  _inherits(SliderSwitch, _React$Component);\n\n  var _super = _createSuper(SliderSwitch);\n\n  function SliderSwitch(props) {\n    var _props$activeValue;\n\n    var _this;\n\n    _classCallCheck(this, SliderSwitch);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"firstButton\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"secondButton\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onSwitch\", function (value) {\n      var onSwitch = _this.props.onSwitch;\n\n      _this.setState(function () {\n        return {\n          activeValue: value\n        };\n      }, function () {\n        onSwitch && onSwitch(value);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFirstClick\", function () {\n      var options = _this.props.options;\n      var value = options[0].value;\n\n      _this.onSwitch(value);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSecondClick\", function () {\n      var options = _this.props.options;\n      var value = options[1].value;\n\n      _this.onSwitch(value);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFirstHover\", function () {\n      _this.setState(function () {\n        return {\n          hoveredOptionId: 0\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSecondHover\", function () {\n      _this.setState(function () {\n        return {\n          hoveredOptionId: 1\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"resetFocusedOption\", function () {\n      _this.setState(function () {\n        return {\n          hoveredOptionId: -1\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"switchByKey\", function (event) {\n      if (event.key !== 'Enter' && event.key !== 'Spacebar' && event.key !== ' ') {\n        return;\n      }\n\n      event.preventDefault();\n      var options = _this.props.options;\n      var activeValue = _this.state.activeValue;\n\n      var _options$find = options.find(function (option) {\n        return option.value !== activeValue;\n      }),\n          value = _options$find.value;\n\n      _this.onSwitch(value);\n\n      if (options[0].value === value) {\n        _this.firstButton.current.focus();\n      } else {\n        _this.secondButton.current.focus();\n      }\n    });\n\n    _this.state = {\n      activeValue: (_props$activeValue = props.activeValue) !== null && _props$activeValue !== void 0 ? _props$activeValue : '',\n      hoveredOptionId: -1\n    };\n    _this.firstButton = /*#__PURE__*/createRef();\n    _this.secondButton = /*#__PURE__*/createRef();\n    return _this;\n  }\n\n  _createClass(SliderSwitch, [{\n    key: \"render\",\n    value: function render() {\n      var _classNames;\n\n      var _this$props = this.props,\n          name = _this$props.name,\n          options = _this$props.options,\n          _activeValue = _this$props.activeValue,\n          onSwitch = _this$props.onSwitch,\n          restProps = _objectWithoutProperties(_this$props, [\"name\", \"options\", \"activeValue\", \"onSwitch\"]);\n\n      var _this$state = this.state,\n          activeValue = _this$state.activeValue,\n          hoveredOptionId = _this$state.hoveredOptionId;\n\n      var _options = _slicedToArray(options, 2),\n          firstOption = _options[0],\n          secondOption = _options[1];\n\n      var firstActive = firstOption.value === activeValue;\n      var secondActive = secondOption.value === activeValue;\n      return createScopedElement(\"div\", _extends({}, restProps, {\n        vkuiClass: \"SliderSwitch\",\n        onKeyDown: this.switchByKey,\n        onMouseLeave: this.resetFocusedOption\n      }), !firstActive && !secondActive && createScopedElement(\"div\", {\n        vkuiClass: \"SliderSwitch__border\"\n      }), createScopedElement(\"div\", {\n        vkuiClass: classNames('SliderSwitch__slider', (_classNames = {}, _defineProperty(_classNames, 'SliderSwitch--firstActive', firstActive), _defineProperty(_classNames, 'SliderSwitch--secondActive', secondActive), _classNames))\n      }), createScopedElement(\"input\", {\n        type: \"hidden\",\n        name: name,\n        value: activeValue\n      }), createScopedElement(SliderSwitchButton, {\n        active: firstActive,\n        hovered: hoveredOptionId === 0,\n        \"aria-pressed\": firstActive,\n        onClick: this.handleFirstClick,\n        onMouseEnter: this.handleFirstHover,\n        getRootRef: this.firstButton\n      }, firstOption.name), createScopedElement(SliderSwitchButton, {\n        active: secondActive,\n        hovered: hoveredOptionId === 1,\n        onClick: this.handleSecondClick,\n        onMouseEnter: this.handleSecondHover,\n        getRootRef: this.secondButton\n      }, secondOption.name));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (nextProps.activeValue && nextProps.activeValue !== prevState.activeValue) {\n        return {\n          activeValue: nextProps.activeValue\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return SliderSwitch;\n}(React.Component);\n\n_defineProperty(SliderSwitch, \"defaultProps\", {\n  options: [{\n    name: '',\n    value: ''\n  }, {\n    name: '',\n    value: ''\n  }]\n});\n\nexport { SliderSwitch as default };","map":{"version":3,"sources":["../../../src/components/SliderSwitch/SliderSwitch.tsx"],"names":["SliderSwitch","React","Component","activeValue","props","hoveredOptionId","createRef","options","name","value","onSwitch","event","option","nextProps","prevState","_activeValue","restProps","firstOption","secondOption","firstActive","secondActive","resetFocusedOption","classNames","firstButton","secondButton"],"mappings":"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","sourcesContent":["import React, { HTMLAttributes, KeyboardEvent, RefObject, createRef } from 'react';\nimport SliderSwitchButton from './SliderSwitchButton';\nimport { classNames } from '../../lib/classNames';\nimport { HasPlatform } from '../../types';\n\nexport interface SliderSwitchOptionInterface {\n  name: string;\n  value: string | number;\n}\n\nexport interface SliderSwitchProps extends HTMLAttributes<HTMLDivElement>, HasPlatform {\n  options: Array<{\n    name: string;\n    value: string | number;\n  }>;\n  activeValue?: SliderSwitchOptionInterface['value'];\n  name?: string;\n  onSwitch?: (value: SliderSwitchOptionInterface['value']) => void;\n}\n\ninterface SliderSwitchState {\n  activeValue: SliderSwitchOptionInterface['value'];\n  hoveredOptionId: number;\n}\n\nexport default class SliderSwitch extends React.Component<SliderSwitchProps, SliderSwitchState> {\n  public constructor(props: SliderSwitchProps) {\n    super(props);\n\n    this.state = {\n      activeValue: props.activeValue ?? '',\n      hoveredOptionId: -1,\n    };\n\n    this.firstButton = createRef();\n    this.secondButton = createRef();\n  }\n\n  static defaultProps = {\n    options: [{ name: '', value: '' }, { name: '', value: '' }],\n  };\n\n  firstButton: RefObject<HTMLDivElement>;\n  secondButton: RefObject<HTMLDivElement>;\n\n  onSwitch = (value: SliderSwitchOptionInterface['value']) => {\n    const { onSwitch } = this.props;\n\n    this.setState(() => ({\n      activeValue: value,\n    }), () => {\n      onSwitch && onSwitch(value);\n    });\n  };\n\n  handleFirstClick = () => {\n    const { options } = this.props;\n    const { value } = options[0];\n\n    this.onSwitch(value);\n  };\n\n  handleSecondClick = () => {\n    const { options } = this.props;\n    const { value } = options[1];\n\n    this.onSwitch(value);\n  };\n\n  handleFirstHover = () => {\n    this.setState(() =>({\n      hoveredOptionId: 0,\n    }));\n  };\n\n  handleSecondHover = () => {\n    this.setState(() =>({\n      hoveredOptionId: 1,\n    }));\n  };\n\n  resetFocusedOption = () => {\n    this.setState(() => ({\n      hoveredOptionId: -1,\n    }));\n  };\n\n  switchByKey = (event: KeyboardEvent) => {\n    if (event.key !== 'Enter' && event.key !== 'Spacebar' && event.key !== ' ') {\n      return;\n    }\n    event.preventDefault();\n\n    const { options } = this.props;\n    const { activeValue } = this.state;\n    const { value } = options.find((option) => option.value !== activeValue);\n\n    this.onSwitch(value);\n\n    if (options[0].value === value) {\n      this.firstButton.current.focus();\n    } else {\n      this.secondButton.current.focus();\n    }\n  };\n\n  static getDerivedStateFromProps(nextProps: SliderSwitchProps, prevState: SliderSwitchState) {\n    if (nextProps.activeValue && nextProps.activeValue !== prevState.activeValue) {\n      return {\n        activeValue: nextProps.activeValue,\n      };\n    }\n\n    return null;\n  }\n\n  public render() {\n    const { name, options, activeValue: _activeValue, onSwitch, ...restProps } = this.props;\n    const { activeValue, hoveredOptionId } = this.state;\n\n    const [firstOption, secondOption] = options;\n    const firstActive = firstOption.value === activeValue;\n    const secondActive = secondOption.value === activeValue;\n\n    return (\n      <div\n        {...restProps}\n        vkuiClass=\"SliderSwitch\"\n        onKeyDown={this.switchByKey}\n        onMouseLeave={this.resetFocusedOption}\n      >\n        {!firstActive && !secondActive &&\n          <div vkuiClass=\"SliderSwitch__border\" />\n        }\n        <div vkuiClass={classNames(\n          'SliderSwitch__slider',\n          {\n            ['SliderSwitch--firstActive']: firstActive,\n            ['SliderSwitch--secondActive']: secondActive,\n          },\n        )} />\n        <input type=\"hidden\" name={name} value={activeValue} />\n        <SliderSwitchButton\n          active={firstActive}\n          hovered={hoveredOptionId === 0}\n          aria-pressed={firstActive}\n          onClick={this.handleFirstClick}\n          onMouseEnter={this.handleFirstHover}\n          getRootRef={this.firstButton}\n        >\n          {firstOption.name}\n        </SliderSwitchButton>\n        <SliderSwitchButton\n          active={secondActive}\n          hovered={hoveredOptionId === 1}\n          onClick={this.handleSecondClick}\n          onMouseEnter={this.handleSecondHover}\n          getRootRef={this.secondButton}\n        >\n          {secondOption.name}\n        </SliderSwitchButton>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}