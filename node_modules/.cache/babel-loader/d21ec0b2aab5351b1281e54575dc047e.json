{"ast":null,"code":"import { leadingZero } from './numbers';\nexport var SECONDS_IN_THE_DAY = 86400;\nvar MILLISECONDS_IN_THE_DAY = SECONDS_IN_THE_DAY * 1000;\n/**\n * Проверяет, что переданная дата является сегодняшним днём\n */\n\nexport function isDateToday(date) {\n  var now = new Date();\n  var d = now.getDate();\n  var m = now.getMonth();\n  var y = now.getFullYear();\n  return date.getFullYear() === y && date.getMonth() === m && date.getDate() === d;\n}\n/**\n * Проверяет, что переданная дата - вчерашний день\n */\n\nexport function isDateYesterday(date) {\n  var yesterdayDate = new Date(date.getTime() + MILLISECONDS_IN_THE_DAY);\n  return isDateToday(yesterdayDate);\n}\n/**\n * Проверяет, что переданная дата - завтрашний день\n */\n\nexport function isDateTomorrow(date) {\n  var tomorrowDate = new Date(date.getTime() - MILLISECONDS_IN_THE_DAY);\n  return isDateToday(tomorrowDate);\n}\n/**\n * Проверяет что переданные даты находятся в одном дне\n */\n\nexport function isSameDate(d1, d2) {\n  return d1.getDate() === d2.getDate() && d1.getMonth() === d2.getMonth() && d1.getFullYear() === d2.getFullYear();\n}\n/**\n * Возвращает новую дату — начало переданного дня\n */\n\nexport function getBeginningOfDay(date) {\n  var year = date.getFullYear();\n  var month = date.getMonth();\n  var day = date.getDate();\n  return new Date(year, month, day, 0, 0, 0, 0);\n}\nexport function isLeapYear(year) {\n  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\n/**\n * Возвращает кол-во дней в месяце (последнее число месяца)\n */\n\nexport function getLastDayOfMonth(year, month) {\n  if (+month === 2) {\n    return isLeapYear(year) ? 29 : 28;\n  } else if (month > 0 && (month < 8 && month % 2 === 0 || month > 7 && month % 2 === 1)) {\n    return 30;\n  }\n\n  return 31;\n}\n/**\n * Ближайший понедельник в прошлом относительно date\n */\n\nexport function getStartOfWeek(date) {\n  var weekDay = date.getDay();\n\n  if (weekDay === 0) {\n    return addDays(date, -6);\n  }\n\n  return addDays(date, -weekDay + 1);\n}\n/**\n * Добавляет дни к дате и возвращает новый объект\n */\n\nexport function addDays(date, dayCount) {\n  var modified = new Date(date.getTime());\n  modified.setDate(modified.getDate() + dayCount);\n  return modified;\n}\n/**\n * Создаёт дату из Unix Timestamp\n */\n\nexport function createDateFromUnixTimestamp(timestamp) {\n  return new Date(timestamp * 1000);\n}\n/**\n * Возвращает Unix Timestamp из даты\n */\n\nexport function getUnixTimestampFromDate(date) {\n  return Math.floor(date.getTime() / 1000);\n}\n/**\n * Возвращает дату в формате YYYY-MM-DD\n */\n\nexport function convertDateToInputFormat(date) {\n  var day = date.getDate();\n  var month = date.getMonth() + 1;\n  var year = date.getFullYear();\n  return [year, leadingZero(month), leadingZero(day)].join('-');\n}","map":{"version":3,"sources":["../../src/date.ts"],"names":["SECONDS_IN_THE_DAY","MILLISECONDS_IN_THE_DAY","now","d","m","y","date","yesterdayDate","isDateToday","tomorrowDate","d1","d2","year","month","day","isLeapYear","weekDay","addDays","modified","timestamp","Math","leadingZero"],"mappings":"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","sourcesContent":["import { leadingZero } from './numbers';\n\nexport const SECONDS_IN_THE_DAY = 86400;\nconst MILLISECONDS_IN_THE_DAY = SECONDS_IN_THE_DAY * 1000;\n\n/**\n * Проверяет, что переданная дата является сегодняшним днём\n */\nexport function isDateToday(date: Date): boolean {\n  const now = new Date();\n  const d = now.getDate();\n  const m = now.getMonth();\n  const y = now.getFullYear();\n\n  return date.getFullYear() === y && date.getMonth() === m && date.getDate() === d;\n}\n\n/**\n * Проверяет, что переданная дата - вчерашний день\n */\nexport function isDateYesterday(date: Date): boolean {\n  const yesterdayDate = new Date(date.getTime() + MILLISECONDS_IN_THE_DAY);\n  return isDateToday(yesterdayDate);\n}\n\n/**\n * Проверяет, что переданная дата - завтрашний день\n */\nexport function isDateTomorrow(date: Date): boolean {\n  const tomorrowDate = new Date(date.getTime() - MILLISECONDS_IN_THE_DAY);\n  return isDateToday(tomorrowDate);\n}\n\n/**\n * Проверяет что переданные даты находятся в одном дне\n */\nexport function isSameDate(d1: Date, d2: Date): boolean {\n  return d1.getDate() === d2.getDate()\n    && d1.getMonth() === d2.getMonth()\n    && d1.getFullYear() === d2.getFullYear();\n}\n\n/**\n * Возвращает новую дату — начало переданного дня\n */\nexport function getBeginningOfDay(date: Date) {\n  const year = date.getFullYear();\n  const month = date.getMonth();\n  const day = date.getDate();\n\n  return new Date(year, month, day, 0, 0, 0, 0);\n}\n\nexport function isLeapYear(year: number) {\n  return ((year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0));\n}\n\n/**\n * Возвращает кол-во дней в месяце (последнее число месяца)\n */\nexport function getLastDayOfMonth(year: number, month: number): number {\n  if (+month === 2) {\n    return isLeapYear(year) ? 29 : 28;\n  } else if (month > 0 && ((month < 8 && month % 2 === 0) || (month > 7 && month % 2 === 1))) {\n    return 30;\n  }\n  return 31;\n}\n\n/**\n * Ближайший понедельник в прошлом относительно date\n */\nexport function getStartOfWeek(date: Date): Date {\n  const weekDay = date.getDay();\n  if (weekDay === 0) {\n    return addDays(date, -6);\n  }\n  return addDays(date, -weekDay + 1);\n}\n\n/**\n * Добавляет дни к дате и возвращает новый объект\n */\nexport function addDays(date: Date, dayCount: number): Date {\n  const modified = new Date(date.getTime());\n  modified.setDate(modified.getDate() + dayCount);\n  return modified;\n}\n\n/**\n * Создаёт дату из Unix Timestamp\n */\nexport function createDateFromUnixTimestamp(timestamp: number): Date {\n  return new Date(timestamp * 1000);\n}\n\n/**\n * Возвращает Unix Timestamp из даты\n */\nexport function getUnixTimestampFromDate(date: Date): number {\n  return Math.floor(date.getTime() / 1000);\n}\n\n/**\n * Возвращает дату в формате YYYY-MM-DD\n */\nexport function convertDateToInputFormat(date: Date): string {\n  const day = date.getDate();\n  const month = date.getMonth() + 1;\n  const year = date.getFullYear();\n\n  return [year, leadingZero(month), leadingZero(day)].join('-');\n}\n"]},"metadata":{},"sourceType":"module"}