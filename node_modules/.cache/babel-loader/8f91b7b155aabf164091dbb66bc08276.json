{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport { classNames } from \"../../lib/classNames\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport Tappable from \"../Tappable/Tappable\";\nimport { Icon24Chevron } from '@vkontakte/icons';\nimport { IOS } from \"../../lib/platform\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { hasReactNode } from \"../../lib/utils\";\nimport { withAdaptivity, SizeType } from \"../../hoc/withAdaptivity\";\nimport Title from \"../Typography/Title/Title\";\nimport Text from \"../Typography/Text/Text\";\nimport Caption from \"../Typography/Caption/Caption\";\nvar SimpleCellTypography = withAdaptivity(function (props) {\n  var sizeY = props.sizeY,\n      children = props.children,\n      restProps = _objectWithoutProperties(props, [\"sizeY\", \"children\"]);\n\n  if (sizeY === SizeType.COMPACT) {\n    return createScopedElement(Text, _extends({\n      weight: \"regular\"\n    }, restProps), children);\n  }\n\n  return createScopedElement(Title, _extends({\n    level: \"3\",\n    weight: \"regular\"\n  }, restProps), children);\n}, {\n  sizeY: true\n});\n\nvar SimpleCell = function SimpleCell(_ref) {\n  var badge = _ref.badge,\n      before = _ref.before,\n      indicator = _ref.indicator,\n      children = _ref.children,\n      after = _ref.after,\n      description = _ref.description,\n      expandable = _ref.expandable,\n      multiline = _ref.multiline,\n      sizeY = _ref.sizeY,\n      restProps = _objectWithoutProperties(_ref, [\"badge\", \"before\", \"indicator\", \"children\", \"after\", \"description\", \"expandable\", \"multiline\", \"sizeY\"]);\n\n  var platform = usePlatform();\n  var hasAfter = hasReactNode(after) || expandable && platform === IOS;\n  return createScopedElement(Tappable, _extends({}, restProps, {\n    vkuiClass: classNames(getClassName('SimpleCell', platform), {\n      'SimpleCell--exp': expandable,\n      'SimpleCell--mult': multiline\n    }, \"SimpleCell--sizeY-\".concat(sizeY))\n  }), before, createScopedElement(\"div\", {\n    vkuiClass: \"SimpleCell__main\"\n  }, createScopedElement(\"div\", {\n    vkuiClass: \"SimpleCell__content\"\n  }, createScopedElement(SimpleCellTypography, {\n    vkuiClass: \"SimpleCell__children\"\n  }, children), hasReactNode(badge) && createScopedElement(\"span\", {\n    vkuiClass: \"SimpleCell__badge\"\n  }, badge)), description && createScopedElement(Caption, {\n    weight: \"regular\",\n    level: \"1\",\n    vkuiClass: \"SimpleCell__description\"\n  }, description)), hasReactNode(indicator) && createScopedElement(SimpleCellTypography, {\n    vkuiClass: \"SimpleCell__indicator\"\n  }, indicator), hasAfter && createScopedElement(\"div\", {\n    vkuiClass: \"SimpleCell__after\"\n  }, after, expandable && platform === IOS && createScopedElement(Icon24Chevron, null)));\n};\n\nexport default withAdaptivity(SimpleCell, {\n  sizeY: true\n});","map":{"version":3,"sources":["../../../src/components/SimpleCell/SimpleCell.tsx"],"names":["SimpleCellTypography","withAdaptivity","sizeY","children","restProps","props","SizeType","SimpleCell","badge","before","indicator","after","description","expandable","multiline","platform","usePlatform","hasAfter","hasReactNode","classNames","getClassName"],"mappings":"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","sourcesContent":["import { ReactNode, FC, ElementType, HTMLAttributes } from 'react';\nimport { classNames } from '../../lib/classNames';\nimport { getClassName } from '../../helpers/getClassName';\nimport Tappable, { TappableProps } from '../Tappable/Tappable';\nimport { Icon24Chevron } from '@vkontakte/icons';\nimport { IOS } from '../../lib/platform';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport { hasReactNode } from '../../lib/utils';\nimport { withAdaptivity, SizeType, AdaptivityProps } from '../../hoc/withAdaptivity';\nimport Title from '../Typography/Title/Title';\nimport Text from '../Typography/Text/Text';\nimport Caption from '../Typography/Caption/Caption';\n\ninterface SimpleCellTypographyProps extends HTMLAttributes<HTMLDivElement>, AdaptivityProps {}\n\nconst SimpleCellTypography: FC<SimpleCellTypographyProps> = withAdaptivity((props: SimpleCellTypographyProps) => {\n  const { sizeY, children, ...restProps } = props;\n\n  if (sizeY === SizeType.COMPACT) {\n    return <Text weight=\"regular\" {...restProps}>{children}</Text>;\n  }\n\n  return <Title level=\"3\" weight=\"regular\" {...restProps}>{children}</Title>;\n}, { sizeY: true });\n\nexport interface SimpleCellOwnProps {\n  /**\n   * Иконка 28 или `<Avatar size={28|32|40|48|72} />`\n   */\n  before?: ReactNode;\n  /**\n   * Иконка 12 или `<Badge />`. Добавится справа от текста `children`.\n   */\n  badge?: ReactNode;\n  /**\n   * Контейнер для текста справа от `children`.\n   */\n  indicator?: ReactNode;\n  /**\n   * Иконка 24|28 или `<Switch />`. Располагается справа от `indicator`.\n   */\n  after?: ReactNode;\n  /**\n   * Контейнер для текста под `children`.\n   */\n  description?: ReactNode;\n  /**\n   * Убирает анимацию нажатия\n   */\n  disabled?: boolean;\n  /**\n   * В iOS добавляет chevron справа. Передавать `true`, если предполагается переход при клике по ячейке.\n   */\n  expandable?: boolean;\n  multiline?: boolean;\n  Component?: ElementType;\n}\n\nexport interface SimpleCellProps extends SimpleCellOwnProps, TappableProps {}\n\nconst SimpleCell: FC<SimpleCellProps> = ({\n  badge,\n  before,\n  indicator,\n  children,\n  after,\n  description,\n  expandable,\n  multiline,\n  sizeY,\n  ...restProps\n}) => {\n  const platform = usePlatform();\n  const hasAfter = hasReactNode(after) || expandable && platform === IOS;\n\n  return (\n    <Tappable\n      {...restProps}\n      vkuiClass={\n        classNames(\n          getClassName('SimpleCell', platform),\n          {\n            'SimpleCell--exp': expandable,\n            'SimpleCell--mult': multiline,\n          },\n          `SimpleCell--sizeY-${sizeY}`,\n        )\n      }\n    >\n      {before}\n      <div vkuiClass=\"SimpleCell__main\">\n        <div vkuiClass=\"SimpleCell__content\">\n          <SimpleCellTypography vkuiClass=\"SimpleCell__children\">{children}</SimpleCellTypography>\n          {hasReactNode(badge) &&\n            <span vkuiClass=\"SimpleCell__badge\">\n              {badge}\n            </span>\n          }\n        </div>\n        {description && <Caption weight=\"regular\" level=\"1\" vkuiClass=\"SimpleCell__description\">{description}</Caption>}\n      </div>\n      {hasReactNode(indicator) &&\n        <SimpleCellTypography vkuiClass=\"SimpleCell__indicator\">{indicator}</SimpleCellTypography>\n      }\n      {hasAfter &&\n        <div vkuiClass=\"SimpleCell__after\">\n          {after}\n          {expandable && platform === IOS && <Icon24Chevron />}\n        </div>\n      }\n    </Tappable>\n  );\n};\n\nexport default withAdaptivity(SimpleCell, { sizeY: true });\n"]},"metadata":{},"sourceType":"module"}