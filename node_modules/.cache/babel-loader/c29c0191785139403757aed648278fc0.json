{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport { useEffect, useRef, useState } from 'react';\nimport Touch from \"../Touch/Touch\";\nimport { classNames } from \"../../lib/classNames\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport { ANDROID, VKCOM } from \"../../lib/platform\";\nimport { rubber } from \"../../lib/touch\";\nimport { withAdaptivity, ViewWidth } from \"../../hoc/withAdaptivity\";\nimport Text from \"../Typography/Text/Text\";\nimport Button from \"../Button/Button\";\nimport { AppRootPortal } from \"../AppRoot/AppRootPortal\";\nimport { useWaitTransitionFinish } from \"../../hooks/useWaitTransitionFinish\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { useTimeout } from \"../../hooks/useTimeout\";\n\nvar SnackbarComponent = function SnackbarComponent(props) {\n  var children = props.children,\n      layout = props.layout,\n      action = props.action,\n      before = props.before,\n      after = props.after,\n      viewWidth = props.viewWidth,\n      duration = props.duration,\n      onActionClick = props.onActionClick,\n      onClose = props.onClose,\n      restProps = _objectWithoutProperties(props, [\"children\", \"layout\", \"action\", \"before\", \"after\", \"viewWidth\", \"duration\", \"onActionClick\", \"onClose\"]);\n\n  var platform = usePlatform();\n\n  var _useWaitTransitionFin = useWaitTransitionFinish(),\n      waitTransitionFinish = _useWaitTransitionFin.waitTransitionFinish;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      closing = _useState2[0],\n      setClosing = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      touched = _useState4[0],\n      setTouched = _useState4[1];\n\n  var shiftXPercentRef = useRef(0);\n  var shiftXCurrentRef = useRef(0);\n  var touchStartTimeRef = useRef(null);\n  var bodyElRef = useRef(null);\n  var innerElRef = useRef(null);\n  var animationFrameRef = useRef(null);\n  var isDesktop = viewWidth >= ViewWidth.SMALL_TABLET;\n  var transitionFinishDurationFallback = platform === ANDROID || platform === VKCOM ? 400 : 320;\n\n  var close = function close() {\n    setClosing(true);\n    waitTransitionFinish(innerElRef.current, function () {\n      onClose();\n    }, transitionFinishDurationFallback);\n  };\n\n  var handleActionClick = function handleActionClick(e) {\n    close();\n\n    if (action && typeof onActionClick === 'function') {\n      onActionClick(e);\n    }\n  };\n\n  var closeTimeout = useTimeout(close, duration);\n\n  var setBodyTransform = function setBodyTransform(percent) {\n    cancelAnimationFrame(animationFrameRef.current);\n    animationFrameRef.current = requestAnimationFrame(function () {\n      if (bodyElRef.current) {\n        bodyElRef.current.style.transform = \"translate3d(\".concat(percent, \"%, 0, 0)\");\n      }\n    });\n  };\n\n  var onTouchStart = closeTimeout.clear;\n\n  var onTouchMoveX = function onTouchMoveX(event) {\n    var shiftX = event.shiftX,\n        startT = event.startT,\n        originalEvent = event.originalEvent;\n    originalEvent.preventDefault();\n\n    if (!touched) {\n      setTouched(true);\n    }\n\n    shiftXPercentRef.current = shiftX / bodyElRef.current.offsetWidth * 100;\n    shiftXCurrentRef.current = rubber(shiftXPercentRef.current, 72, 1.2, platform === ANDROID || platform === VKCOM);\n    touchStartTimeRef.current = startT;\n    setBodyTransform(shiftXCurrentRef.current);\n  };\n\n  var onTouchEnd = function onTouchEnd() {\n    var callback;\n\n    if (touched) {\n      var shiftXCurrent = shiftXCurrentRef.current;\n      var expectTranslateY = shiftXCurrent / (Date.now() - touchStartTimeRef.current.getTime()) * 240 * 0.6;\n      shiftXCurrent = shiftXCurrent + expectTranslateY;\n\n      if (isDesktop && shiftXCurrent <= -50) {\n        closeTimeout.clear();\n        waitTransitionFinish(bodyElRef.current, function () {\n          onClose();\n        }, transitionFinishDurationFallback);\n        setBodyTransform(-120);\n      } else if (!isDesktop && shiftXCurrent >= 50) {\n        closeTimeout.clear();\n        waitTransitionFinish(bodyElRef.current, function () {\n          onClose();\n        }, transitionFinishDurationFallback);\n        setBodyTransform(120);\n      } else {\n        callback = function callback() {\n          closeTimeout.set();\n          setBodyTransform(0);\n        };\n      }\n    } else {\n      closeTimeout.set();\n    }\n\n    setTouched(false);\n    callback && requestAnimationFrame(callback);\n  };\n\n  useEffect(closeTimeout.set, []);\n  var resolvedLayout = after || isDesktop ? 'vertical' : layout;\n  return createScopedElement(AppRootPortal, null, createScopedElement(\"div\", _extends({}, restProps, {\n    vkuiClass: classNames(getClassName('Snackbar', platform), \"Snackbar--l-\".concat(resolvedLayout), {\n      'Snackbar--closing': closing,\n      'Snackbar--touched': touched,\n      'Snackbar--desktop': isDesktop\n    })\n  }), createScopedElement(Touch, {\n    vkuiClass: \"Snackbar__in\",\n    getRootRef: innerElRef,\n    onStart: onTouchStart,\n    onMoveX: onTouchMoveX,\n    onEnd: onTouchEnd\n  }, createScopedElement(\"div\", {\n    vkuiClass: \"Snackbar__body\",\n    ref: bodyElRef\n  }, before && createScopedElement(\"div\", {\n    vkuiClass: \"Snackbar__before\"\n  }, before), createScopedElement(\"div\", {\n    vkuiClass: \"Snackbar__content\"\n  }, createScopedElement(Text, {\n    weight: \"regular\",\n    vkuiClass: \"Snackbar__content-text\"\n  }, children), action && createScopedElement(Button, {\n    align: \"left\",\n    hasHover: false,\n    mode: \"tertiary\",\n    size: \"s\",\n    vkuiClass: \"Snackbar__action\",\n    onClick: handleActionClick\n  }, action)), after && createScopedElement(\"div\", {\n    vkuiClass: \"Snackbar__after\"\n  }, after)))));\n};\n\nSnackbarComponent.displayName = 'Snackbar';\nSnackbarComponent.defaultProps = {\n  duration: 4000,\n  layout: 'horizontal'\n};\nexport var Snackbar = withAdaptivity(SnackbarComponent, {\n  viewWidth: true\n});","map":{"version":3,"sources":["../../../src/components/Snackbar/Snackbar.tsx"],"names":["SnackbarComponent","children","layout","action","before","after","viewWidth","duration","onActionClick","onClose","restProps","props","platform","usePlatform","waitTransitionFinish","useWaitTransitionFinish","closing","setClosing","useState","touched","setTouched","shiftXPercentRef","useRef","shiftXCurrentRef","touchStartTimeRef","bodyElRef","innerElRef","animationFrameRef","isDesktop","ViewWidth","transitionFinishDurationFallback","close","handleActionClick","closeTimeout","useTimeout","setBodyTransform","cancelAnimationFrame","requestAnimationFrame","onTouchStart","onTouchMoveX","shiftX","startT","originalEvent","event","rubber","onTouchEnd","shiftXCurrent","expectTranslateY","Date","callback","useEffect","resolvedLayout","classNames","getClassName","Snackbar","withAdaptivity"],"mappings":"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","sourcesContent":["import React, {\n  FC,\n  HTMLAttributes,\n  MouseEventHandler,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport Touch, { TouchEvent } from '../Touch/Touch';\nimport { classNames } from '../../lib/classNames';\nimport { HasPlatform } from '../../types';\nimport { getClassName } from '../../helpers/getClassName';\nimport { ANDROID, VKCOM } from '../../lib/platform';\nimport { rubber } from '../../lib/touch';\nimport { withAdaptivity, AdaptivityProps, ViewWidth } from '../../hoc/withAdaptivity';\nimport Text from '../Typography/Text/Text';\nimport Button from '../Button/Button';\nimport { AppRootPortal } from '../AppRoot/AppRootPortal';\nimport { useWaitTransitionFinish } from '../../hooks/useWaitTransitionFinish';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport { useTimeout } from '../../hooks/useTimeout';\n\nexport interface SnackbarProps extends HTMLAttributes<HTMLElement>, HasPlatform, AdaptivityProps {\n  /**\n   * Название кнопки действия в уведомлении\n   */\n  action?: string | React.ComponentType;\n\n  /**\n   * Будет вызвано при клике на кнопку действия\n   */\n  onActionClick?: (e: React.MouseEvent) => void;\n\n  /**\n   * Цветная иконка 24x24 пикселя\n   */\n  before?: React.ReactNode;\n  /**\n   * Контент в правой части, может быть `<Avatar size={32} />`\n   */\n  after?: React.ReactNode;\n  /**\n   * Варианты расположения кнопки\n   */\n  layout?: 'vertical' | 'horizontal';\n  /**\n   * Время в миллисекундах, через которое плашка скроется\n   */\n  duration?: number;\n  /**\n   * Обработчик закрытия уведомления\n   */\n  onClose: () => void;\n}\n\nconst SnackbarComponent: FC<SnackbarProps> = (props: SnackbarProps) => {\n  const {\n    children,\n    layout,\n    action,\n    before,\n    after,\n    viewWidth,\n    duration,\n    onActionClick,\n    onClose,\n    ...restProps\n  } = props;\n\n  const platform = usePlatform();\n\n  const { waitTransitionFinish } = useWaitTransitionFinish();\n\n  const [closing, setClosing] = useState(false);\n  const [touched, setTouched] = useState(false);\n\n  const shiftXPercentRef = useRef<number>(0);\n  const shiftXCurrentRef = useRef<number>(0);\n  const touchStartTimeRef = useRef<Date | null>(null);\n\n  const bodyElRef = useRef<HTMLDivElement | null>(null);\n  const innerElRef = useRef<HTMLDivElement | null>(null);\n\n  const animationFrameRef = useRef<ReturnType<typeof requestAnimationFrame> | null>(null);\n\n  const isDesktop = viewWidth >= ViewWidth.SMALL_TABLET;\n  const transitionFinishDurationFallback = platform === ANDROID || platform === VKCOM ? 400 : 320;\n\n  const close = () => {\n    setClosing(true);\n    waitTransitionFinish(innerElRef.current, () => {\n      onClose();\n    }, transitionFinishDurationFallback);\n  };\n\n  const handleActionClick: MouseEventHandler<HTMLElement> = (e) => {\n    close();\n\n    if (action && typeof onActionClick === 'function') {\n      onActionClick(e);\n    }\n  };\n\n  const closeTimeout = useTimeout(close, duration);\n\n  const setBodyTransform = (percent: number) => {\n    cancelAnimationFrame(animationFrameRef.current);\n    animationFrameRef.current = requestAnimationFrame(() => {\n      if (bodyElRef.current) {\n        bodyElRef.current.style.transform = `translate3d(${percent}%, 0, 0)`;\n      }\n    });\n  };\n\n  const onTouchStart = closeTimeout.clear;\n\n  const onTouchMoveX = (event: TouchEvent) => {\n    const { shiftX, startT, originalEvent } = event;\n    originalEvent.preventDefault();\n\n    if (!touched) {\n      setTouched(true);\n    }\n\n    shiftXPercentRef.current = shiftX / bodyElRef.current.offsetWidth * 100;\n    shiftXCurrentRef.current = rubber(shiftXPercentRef.current, 72, 1.2, platform === ANDROID || platform === VKCOM);\n    touchStartTimeRef.current = startT;\n\n    setBodyTransform(shiftXCurrentRef.current);\n  };\n\n  const onTouchEnd = () => {\n    let callback: VoidFunction | undefined;\n\n    if (touched) {\n      let shiftXCurrent = shiftXCurrentRef.current;\n      const expectTranslateY = shiftXCurrent / (Date.now() - touchStartTimeRef.current.getTime()) * 240 * 0.6;\n      shiftXCurrent = shiftXCurrent + expectTranslateY;\n\n      if (isDesktop && shiftXCurrent <= -50) {\n        closeTimeout.clear();\n        waitTransitionFinish(bodyElRef.current, () => {\n          onClose();\n        }, transitionFinishDurationFallback);\n        setBodyTransform(-120);\n      } else if (!isDesktop && shiftXCurrent >= 50) {\n        closeTimeout.clear();\n        waitTransitionFinish(bodyElRef.current, () => {\n          onClose();\n        }, transitionFinishDurationFallback);\n        setBodyTransform(120);\n      } else {\n        callback = () => {\n          closeTimeout.set();\n          setBodyTransform(0);\n        };\n      }\n    } else {\n      closeTimeout.set();\n    }\n\n    setTouched(false);\n    callback && requestAnimationFrame(callback);\n  };\n\n  useEffect(closeTimeout.set, []);\n\n  const resolvedLayout = after || isDesktop ? 'vertical' : layout;\n\n  return (\n    <AppRootPortal>\n      <div\n        {...restProps}\n        vkuiClass={classNames(getClassName('Snackbar', platform), `Snackbar--l-${resolvedLayout}`, {\n          'Snackbar--closing': closing,\n          'Snackbar--touched': touched,\n          'Snackbar--desktop': isDesktop,\n        })}\n      >\n        <Touch\n          vkuiClass=\"Snackbar__in\"\n          getRootRef={innerElRef}\n          onStart={onTouchStart}\n          onMoveX={onTouchMoveX}\n          onEnd={onTouchEnd}\n        >\n          <div vkuiClass=\"Snackbar__body\" ref={bodyElRef}>\n            {before &&\n            <div vkuiClass=\"Snackbar__before\">\n              {before}\n            </div>}\n\n            <div vkuiClass=\"Snackbar__content\">\n              <Text weight=\"regular\" vkuiClass=\"Snackbar__content-text\">{children}</Text>\n\n              {action &&\n              <Button align=\"left\" hasHover={false} mode=\"tertiary\" size=\"s\" vkuiClass=\"Snackbar__action\" onClick={handleActionClick}>\n                {action}\n              </Button>}\n            </div>\n\n            {after &&\n            <div vkuiClass=\"Snackbar__after\">\n              {after}\n            </div>}\n          </div>\n        </Touch>\n      </div>\n    </AppRootPortal>\n  );\n};\n\nSnackbarComponent.displayName = 'Snackbar';\n\nSnackbarComponent.defaultProps = {\n  duration: 4000,\n  layout: 'horizontal',\n};\n\nexport const Snackbar = withAdaptivity(SnackbarComponent, {\n  viewWidth: true,\n});\n"]},"metadata":{},"sourceType":"module"}