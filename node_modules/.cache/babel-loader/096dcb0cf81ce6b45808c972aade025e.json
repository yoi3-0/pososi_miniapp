{"ast":null,"code":"export var clamp = function clamp(value, min, max) {\n  return Math.max(min, Math.min(value, max));\n};\nexport function precisionRound(number) {\n  var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var factor = Math.pow(10, precision);\n  return Math.round(number * factor) / factor;\n}\n\nfunction precision(number) {\n  return (\"\".concat(number).split('.')[1] || '').length;\n}\n\nfunction decimatedClamp(val, min, max, step) {\n  if (step == null || step <= 0) {\n    return clamp(val, min, max);\n  }\n\n  var prec = precision(step); // Round value to nearest min + k1 * step\n\n  var decimatedOffset = precisionRound(Math.round((val - min) / step) * step, prec); // Round range length _down_ to nearest min + k2 * step\n\n  var decimatedRange = precisionRound(Math.floor((max - min) / step) * step, prec);\n  return min + clamp(decimatedOffset, 0, decimatedRange);\n}\n\nexport function rescale(value, from, to) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var scaled = (value - from[0]) / (from[1] - from[0]) * (to[1] - to[0]) + to[0];\n  return decimatedClamp(scaled, to[0], to[1], options.step);\n}","map":{"version":3,"sources":["../../src/helpers/math.ts"],"names":["clamp","Math","precision","factor","number","step","prec","decimatedOffset","precisionRound","val","decimatedRange","max","min","options","scaled","value","from","to","decimatedClamp"],"mappings":"AAAA,OAAO,IAAMA,KAAK,GAAG,SAARA,KAAQ,CAAA,KAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAA,SAA6CC,IAAI,CAAJA,GAAAA,CAAAA,GAAAA,EAAcA,IAAI,CAAJA,GAAAA,CAAAA,KAAAA,EAA3D,GAA2DA,CAAdA,CAA7C;AAAd,CAAA;AAEP,OAAO,SAAA,cAAA,CAAA,MAAA,EAAuD;AAAA,MAAfC,SAAe,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAH,CAAG;AAC5D,MAAIC,MAAM,GAAGF,IAAI,CAAJA,GAAAA,CAAAA,EAAAA,EAAb,SAAaA,CAAb;AACA,SAAOA,IAAI,CAAJA,KAAAA,CAAWG,MAAM,GAAjBH,MAAAA,IAAP,MAAA;AACD;;AAED,SAAA,SAAA,CAAA,MAAA,EAAmC;AACjC,SAAO,CAAC,GAAA,MAAA,CAAA,MAAA,EAAA,KAAA,CAAA,GAAA,EAAA,CAAA,KAAD,EAAA,EAAP,MAAA;AACD;;AAED,SAAA,cAAA,CAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAA8E;AAC5E,MAAII,IAAI,IAAJA,IAAAA,IAAgBA,IAAI,IAAxB,CAAA,EAA+B;AAC7B,WAAOL,KAAK,CAAA,GAAA,EAAA,GAAA,EAAZ,GAAY,CAAZ;AACD;;AACD,MAAMM,IAAI,GAAGJ,SAAS,CAJsD,IAItD,CAAtB,CAJ4E,CAK5E;;AACA,MAAMK,eAAe,GAAGC,cAAc,CAACP,IAAI,CAAJA,KAAAA,CAAW,CAACQ,GAAG,GAAJ,GAAA,IAAXR,IAAAA,IAAD,IAAA,EANsC,IAMtC,CAAtC,CAN4E,CAO5E;;AACA,MAAMS,cAAc,GAAGF,cAAc,CAACP,IAAI,CAAJA,KAAAA,CAAW,CAACU,GAAG,GAAJ,GAAA,IAAXV,IAAAA,IAAD,IAAA,EAArC,IAAqC,CAArC;AACA,SAAOW,GAAG,GAAGZ,KAAK,CAAA,eAAA,EAAA,CAAA,EAAlB,cAAkB,CAAlB;AACD;;AAED,OAAO,SAAA,OAAA,CAAA,KAAA,EAAA,IAAA,EAAA,EAAA,EAKL;AAAA,MADAa,OACA,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAD6B,EAC7B;AACA,MAAMC,MAAM,GAAG,CAACC,KAAK,GAAGC,IAAI,CAAb,CAAa,CAAb,KAAqBA,IAAI,CAAJA,CAAI,CAAJA,GAAUA,IAAI,CAAnC,CAAmC,CAAnC,KAA2CC,EAAE,CAAFA,CAAE,CAAFA,GAAQA,EAAE,CAArD,CAAqD,CAArD,IAA4DA,EAAE,CAA7E,CAA6E,CAA7E;AACA,SAAOC,cAAc,CAAA,MAAA,EAASD,EAAE,CAAX,CAAW,CAAX,EAAgBA,EAAE,CAAlB,CAAkB,CAAlB,EAAuBJ,OAAO,CAAnD,IAAqB,CAArB;AACD","sourcesContent":["export const clamp = (value: number, min: number, max: number) => Math.max(min, Math.min(value, max));\n\nexport function precisionRound(number: number, precision = 1) {\n  let factor = Math.pow(10, precision);\n  return Math.round(number * factor) / factor;\n}\n\nfunction precision(number: number) {\n  return (`${number}`.split('.')[1] || '').length;\n}\n\nfunction decimatedClamp(val: number, min: number, max: number, step?: number) {\n  if (step == null || step <= 0) {\n    return clamp(val, min, max);\n  }\n  const prec = precision(step);\n  // Round value to nearest min + k1 * step\n  const decimatedOffset = precisionRound(Math.round((val - min) / step) * step, prec);\n  // Round range length _down_ to nearest min + k2 * step\n  const decimatedRange = precisionRound(Math.floor((max - min) / step) * step, prec);\n  return min + clamp(decimatedOffset, 0, decimatedRange);\n}\n\nexport function rescale(\n  value: number,\n  from: [number, number],\n  to: [number, number],\n  options: { step?: number } = {},\n) {\n  const scaled = (value - from[0]) / (from[1] - from[0]) * (to[1] - to[0]) + to[0];\n  return decimatedClamp(scaled, to[0], to[1], options.step);\n}\n"]},"metadata":{},"sourceType":"module"}