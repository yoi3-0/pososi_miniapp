{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/createSuper\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport React, { PureComponent } from 'react';\nimport Touch from \"../Touch/Touch\";\nimport TouchRootContext from \"../Touch/TouchContext\";\nimport FixedLayout from \"../FixedLayout/FixedLayout\";\nimport { classNames } from \"../../lib/classNames\";\nimport { IOS, ANDROID, VKCOM } from \"../../lib/platform\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport PullToRefreshSpinner from \"./PullToRefreshSpinner\";\nimport { withPlatform } from \"../../hoc/withPlatform\";\nimport { canUseDOM, withDOM } from \"../../lib/dom\";\nimport { runTapticImpactOccurred } from \"../../lib/taptic\";\nimport { withContext } from \"../../hoc/withContext\";\nimport { ScrollContext } from \"../AppRoot/ScrollContext\";\n\nfunction cancelEvent(event) {\n  if (!event) {\n    return false;\n  }\n\n  while (event.originalEvent) {\n    event = event.originalEvent;\n  }\n\n  if (event.preventDefault && event.cancelable) {\n    event.preventDefault();\n  }\n\n  if (event.stopPropagation) {\n    event.stopPropagation();\n  }\n\n  return false;\n}\n\nvar PullToRefresh = /*#__PURE__*/function (_PureComponent) {\n  _inherits(PullToRefresh, _PureComponent);\n\n  var _super = _createSuper(PullToRefresh);\n\n  function PullToRefresh(props) {\n    var _this;\n\n    _classCallCheck(this, PullToRefresh);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"params\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"contentRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onTouchStart\", function (e) {\n      if (_this.state.refreshing) {\n        cancelEvent(e);\n      }\n\n      _this.setState({\n        touchDown: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onWindowTouchMove\", function (event) {\n      if (_this.state.refreshing) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTouchMove\", function (e) {\n      var isY = e.isY,\n          shiftY = e.shiftY;\n      var _this$params = _this.params,\n          start = _this$params.start,\n          max = _this$params.max;\n\n      var pageYOffset = _this.props.scroll.getScroll().y;\n\n      var _this$state = _this.state,\n          refreshing = _this$state.refreshing,\n          watching = _this$state.watching,\n          touchDown = _this$state.touchDown;\n\n      if (watching && touchDown) {\n        cancelEvent(e);\n        var positionMultiplier = _this.params.positionMultiplier;\n        var shift = Math.max(0, shiftY - _this.state.touchY);\n        var currentY = Math.max(start, Math.min(_this.params.maxY, start + shift * positionMultiplier));\n        var progress = currentY > -10 ? Math.abs((currentY + 10) / max) * 80 : 0;\n\n        _this.setState({\n          spinnerY: currentY,\n          spinnerProgress: Math.min(80, Math.max(0, progress)),\n          canRefresh: progress > 80,\n          contentShift: (currentY + 10) * 2.3\n        });\n\n        if (progress > 85 && !refreshing && _this.props.platform === IOS) {\n          _this.runRefreshing();\n        }\n      } else if (isY && pageYOffset === 0 && shiftY > 0 && !refreshing && touchDown) {\n        cancelEvent(e);\n\n        _this.setState({\n          watching: true,\n          touchY: shiftY,\n          spinnerY: start,\n          spinnerProgress: 0\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTouchEnd\", function () {\n      var _this$state2 = _this.state,\n          refreshing = _this$state2.refreshing,\n          canRefresh = _this$state2.canRefresh,\n          refreshingFinished = _this$state2.refreshingFinished;\n\n      _this.setState({\n        watching: false,\n        touchDown: false\n      }, function () {\n        if (canRefresh && !refreshing) {\n          _this.runRefreshing();\n        } else if (refreshing && refreshingFinished) {\n          _this.resetRefreshingState();\n        } else {\n          _this.setState({\n            spinnerY: refreshing ? _this.params.refreshing : _this.params.start,\n            spinnerProgress: 0,\n            contentShift: 0\n          });\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onRefreshingFinish\", function () {\n      _this.setState({\n        refreshingFinished: true\n      }, function () {\n        !_this.state.touchDown && _this.resetRefreshingState();\n      });\n    });\n\n    _this.params = {\n      start: props.platform === ANDROID || props.platform === VKCOM ? -45 : -10,\n      max: props.platform === ANDROID || props.platform === VKCOM ? 80 : 50,\n      maxY: props.platform === ANDROID || props.platform === VKCOM ? 80 : 400,\n      refreshing: props.platform === ANDROID || props.platform === VKCOM ? 50 : 36,\n      positionMultiplier: props.platform === ANDROID || props.platform === VKCOM ? 1 : 0.21\n    };\n    _this.state = {\n      watching: false,\n      refreshing: false,\n      canRefresh: false,\n      touchDown: false,\n      refreshingFinished: false,\n      touchY: 0,\n      spinnerY: _this.params.start,\n      spinnerProgress: 0,\n      contentShift: 0\n    };\n    _this.contentRef = /*#__PURE__*/React.createRef();\n    return _this;\n  }\n\n  _createClass(PullToRefresh, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (canUseDOM) {\n        this.document.addEventListener('touchmove', this.onWindowTouchMove, {\n          // @ts-ignore\n          cancelable: true,\n          passive: false\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // Здесь нужен последний аргумент с такими же параметрами, потому что\n      // некоторые браузеры на странных вендорах типа Meizu не удаляют обработчик.\n      // https://github.com/VKCOM/VKUI/issues/444\n      if (canUseDOM) {\n        this.document.removeEventListener('touchmove', this.onWindowTouchMove, {\n          // @ts-ignore\n          cancelable: true,\n          passive: false\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.isFetching && !this.props.isFetching) {\n        this.onRefreshingFinish();\n      }\n    }\n  }, {\n    key: \"runRefreshing\",\n    value: function runRefreshing() {\n      if (!this.state.refreshing && this.props.onRefresh) {\n        this.setState({\n          refreshing: true,\n          spinnerY: this.props.platform === ANDROID || this.props.platform === VKCOM ? this.params.refreshing : this.state.spinnerY\n        });\n        this.props.onRefresh();\n        runTapticImpactOccurred('light');\n      }\n    }\n  }, {\n    key: \"resetRefreshingState\",\n    value: function resetRefreshingState() {\n      this.setState({\n        watching: false,\n        canRefresh: false,\n        refreshing: false,\n        refreshingFinished: false,\n        spinnerY: this.params.start,\n        spinnerProgress: 0,\n        contentShift: 0\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          children = _this$props.children,\n          onRefresh = _this$props.onRefresh,\n          isFetching = _this$props.isFetching,\n          platform = _this$props.platform,\n          window = _this$props.window,\n          document = _this$props.document,\n          scroll = _this$props.scroll,\n          restProps = _objectWithoutProperties(_this$props, [\"children\", \"onRefresh\", \"isFetching\", \"platform\", \"window\", \"document\", \"scroll\"]);\n\n      var _this$state3 = this.state,\n          watching = _this$state3.watching,\n          refreshing = _this$state3.refreshing,\n          spinnerY = _this$state3.spinnerY,\n          spinnerProgress = _this$state3.spinnerProgress,\n          canRefresh = _this$state3.canRefresh,\n          touchDown = _this$state3.touchDown,\n          contentShift = _this$state3.contentShift;\n      var spinnerTransform = \"translate3d(0, \".concat(spinnerY, \"px, 0)\");\n      var contentTransform = '';\n\n      if (platform === IOS && refreshing && !touchDown) {\n        contentTransform = 'translate3d(0, 100px, 0)';\n      } else if (platform === IOS && (contentShift || refreshing)) {\n        contentTransform = \"translate3d(0, \".concat(contentShift, \"px, 0)\");\n      }\n\n      return createScopedElement(TouchRootContext.Provider, {\n        value: true\n      }, createScopedElement(Touch, _extends({}, restProps, {\n        onStart: this.onTouchStart,\n        onMove: this.onTouchMove,\n        onEnd: this.onTouchEnd,\n        vkuiClass: classNames(getClassName('PullToRefresh', platform), {\n          'PullToRefresh--watching': watching,\n          'PullToRefresh--refreshing': refreshing\n        })\n      }), createScopedElement(FixedLayout, {\n        vkuiClass: \"PullToRefresh__controls\"\n      }, createScopedElement(PullToRefreshSpinner, {\n        style: {\n          transform: spinnerTransform,\n          WebkitTransform: spinnerTransform,\n          opacity: watching || refreshing || canRefresh ? 1 : 0\n        },\n        on: refreshing,\n        progress: refreshing ? null : spinnerProgress\n      })), createScopedElement(\"div\", {\n        vkuiClass: \"PullToRefresh__content\",\n        ref: this.contentRef,\n        style: {\n          transform: contentTransform,\n          WebkitTransform: contentTransform\n        }\n      }, children)));\n    }\n  }, {\n    key: \"document\",\n    get: function get() {\n      return this.props.document;\n    }\n  }]);\n\n  return PullToRefresh;\n}(PureComponent);\n\nexport default withContext(withPlatform(withDOM(PullToRefresh)), ScrollContext, 'scroll');","map":{"version":3,"sources":["../../../src/components/PullToRefresh/PullToRefresh.tsx"],"names":["event","PullToRefresh","PureComponent","start","props","max","maxY","refreshing","positionMultiplier","watching","canRefresh","touchDown","refreshingFinished","touchY","spinnerY","spinnerProgress","contentShift","React","cancelable","passive","prevProps","cancelEvent","isY","shiftY","e","pageYOffset","shift","Math","currentY","progress","runTapticImpactOccurred","children","onRefresh","isFetching","platform","window","document","scroll","restProps","spinnerTransform","contentTransform","classNames","getClassName","transform","WebkitTransform","opacity","withContext","withPlatform","withDOM"],"mappings":"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","sourcesContent":["import React, { PureComponent, RefObject } from 'react';\nimport Touch, { TouchProps, TouchEvent } from '../Touch/Touch';\nimport TouchRootContext from '../Touch/TouchContext';\nimport FixedLayout from '../FixedLayout/FixedLayout';\nimport { classNames } from '../../lib/classNames';\nimport { IOS, ANDROID, VKCOM } from '../../lib/platform';\nimport { getClassName } from '../../helpers/getClassName';\nimport PullToRefreshSpinner from './PullToRefreshSpinner';\nimport { withPlatform } from '../../hoc/withPlatform';\nimport { AnyFunction, HasPlatform } from '../../types';\nimport { canUseDOM, DOMProps, withDOM } from '../../lib/dom';\nimport { runTapticImpactOccurred } from '../../lib/taptic';\nimport { withContext } from '../../hoc/withContext';\nimport { ScrollContext, ScrollContextInterface } from '../AppRoot/ScrollContext';\n\nexport interface PullToRefreshProps extends TouchProps, HasPlatform {\n  /**\n   * Будет вызвана для обновления контента\n   */\n  onRefresh: AnyFunction;\n  /**\n   * Определяет, выполняется ли обновление. Для скрытия спиннера после получения контента необходимо передать `false`\n   */\n  isFetching?: boolean;\n  /** @ignore */\n  scroll?: ScrollContextInterface;\n}\n\nexport interface PullToRefreshState {\n  watching: boolean;\n  refreshing: boolean;\n  canRefresh: boolean;\n\n  touchDown: boolean;\n  refreshingFinished: boolean;\n\n  touchY: number;\n  spinnerY: PullToRefreshParams['start'];\n  spinnerProgress: number;\n  contentShift: number;\n}\n\nexport interface PullToRefreshParams {\n  start: number;\n  max: number;\n  maxY: number;\n  refreshing: number;\n  positionMultiplier: number;\n}\n\nexport type TouchEventHandler = (event: TouchEvent) => void;\n\nfunction cancelEvent(event: any) {\n  if (!event) {\n    return false;\n  }\n  while (event.originalEvent) {\n    event = event.originalEvent;\n  }\n  if (event.preventDefault && event.cancelable) {\n    event.preventDefault();\n  }\n  if (event.stopPropagation) {\n    event.stopPropagation();\n  }\n  return false;\n}\n\nclass PullToRefresh extends PureComponent<PullToRefreshProps & DOMProps, PullToRefreshState> {\n  constructor(props: PullToRefreshProps) {\n    super(props);\n\n    this.params = {\n      start: props.platform === ANDROID || props.platform === VKCOM ? -45 : -10,\n      max: props.platform === ANDROID || props.platform === VKCOM ? 80 : 50,\n      maxY: props.platform === ANDROID || props.platform === VKCOM ? 80 : 400,\n      refreshing: props.platform === ANDROID || props.platform === VKCOM ? 50 : 36,\n\n      positionMultiplier: props.platform === ANDROID || props.platform === VKCOM ? 1 : 0.21,\n    };\n\n    this.state = {\n      watching: false,\n      refreshing: false,\n      canRefresh: false,\n\n      touchDown: false,\n      refreshingFinished: false,\n\n      touchY: 0,\n      spinnerY: this.params.start,\n      spinnerProgress: 0,\n      contentShift: 0,\n    };\n\n    this.contentRef = React.createRef();\n  }\n\n  params: PullToRefreshParams;\n\n  contentRef: RefObject<HTMLDivElement>;\n\n  get document() {\n    return this.props.document;\n  }\n\n  componentDidMount() {\n    if (canUseDOM) {\n      this.document.addEventListener('touchmove', this.onWindowTouchMove, {\n        // @ts-ignore\n        cancelable: true,\n        passive: false,\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    // Здесь нужен последний аргумент с такими же параметрами, потому что\n    // некоторые браузеры на странных вендорах типа Meizu не удаляют обработчик.\n    // https://github.com/VKCOM/VKUI/issues/444\n    if (canUseDOM) {\n      this.document.removeEventListener('touchmove', this.onWindowTouchMove, {\n        // @ts-ignore\n        cancelable: true,\n        passive: false,\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps: PullToRefreshProps) {\n    if (prevProps.isFetching && !this.props.isFetching) {\n      this.onRefreshingFinish();\n    }\n  }\n\n  onTouchStart: TouchEventHandler = (e: TouchEvent) => {\n    if (this.state.refreshing) {\n      cancelEvent(e);\n    }\n    this.setState({ touchDown: true });\n  };\n\n  onWindowTouchMove: EventListener = (event: Event) => {\n    if (this.state.refreshing) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  };\n\n  onTouchMove: TouchEventHandler = (e: TouchEvent) => {\n    const { isY, shiftY } = e;\n    const { start, max } = this.params;\n    const pageYOffset = this.props.scroll.getScroll().y;\n\n    const { refreshing, watching, touchDown } = this.state;\n\n    if (watching && touchDown) {\n      cancelEvent(e);\n\n      const { positionMultiplier } = this.params;\n\n      const shift = Math.max(0, shiftY - this.state.touchY);\n\n      const currentY = Math.max(start, Math.min(this.params.maxY, start + shift * positionMultiplier));\n      const progress = currentY > -10 ? Math.abs((currentY + 10) / max) * 80 : 0;\n\n      this.setState({\n        spinnerY: currentY,\n        spinnerProgress: Math.min(80, Math.max(0, progress)),\n        canRefresh: progress > 80,\n        contentShift: (currentY + 10) * 2.3,\n      });\n\n      if (progress > 85 && !refreshing && this.props.platform === IOS) {\n        this.runRefreshing();\n      }\n    } else if (isY && pageYOffset === 0 && shiftY > 0 && !refreshing && touchDown) {\n      cancelEvent(e);\n\n      this.setState({\n        watching: true,\n        touchY: shiftY,\n        spinnerY: start,\n        spinnerProgress: 0,\n      });\n    }\n  };\n\n  onTouchEnd: VoidFunction = () => {\n    const { refreshing, canRefresh, refreshingFinished } = this.state;\n\n    this.setState({\n      watching: false,\n      touchDown: false,\n    }, () => {\n      if (canRefresh && !refreshing) {\n        this.runRefreshing();\n      } else if (refreshing && refreshingFinished) {\n        this.resetRefreshingState();\n      } else {\n        this.setState({\n          spinnerY: refreshing ? this.params.refreshing : this.params.start,\n          spinnerProgress: 0,\n          contentShift: 0,\n        });\n      }\n    });\n  };\n\n  runRefreshing() {\n    if (!this.state.refreshing && this.props.onRefresh) {\n      this.setState({\n        refreshing: true,\n        spinnerY: this.props.platform === ANDROID || this.props.platform === VKCOM ? this.params.refreshing : this.state.spinnerY,\n      });\n\n      this.props.onRefresh();\n      runTapticImpactOccurred('light');\n    }\n  }\n\n  onRefreshingFinish: VoidFunction = () => {\n    this.setState({\n      refreshingFinished: true,\n    }, () => {\n      !this.state.touchDown && this.resetRefreshingState();\n    });\n  };\n\n  resetRefreshingState() {\n    this.setState({\n      watching: false,\n      canRefresh: false,\n      refreshing: false,\n      refreshingFinished: false,\n      spinnerY: this.params.start,\n      spinnerProgress: 0,\n      contentShift: 0,\n    });\n  }\n\n  render() {\n    const { children, onRefresh, isFetching, platform, window, document, scroll, ...restProps } = this.props;\n    const { watching, refreshing, spinnerY, spinnerProgress, canRefresh, touchDown, contentShift } = this.state;\n\n    const spinnerTransform = `translate3d(0, ${spinnerY}px, 0)`;\n    let contentTransform = '';\n\n    if (platform === IOS && refreshing && !touchDown) {\n      contentTransform = 'translate3d(0, 100px, 0)';\n    } else if (platform === IOS && (contentShift || refreshing)) {\n      contentTransform = `translate3d(0, ${contentShift}px, 0)`;\n    }\n\n    return (\n      <TouchRootContext.Provider value={true}>\n        <Touch\n          {...restProps}\n          onStart={this.onTouchStart}\n          onMove={this.onTouchMove}\n          onEnd={this.onTouchEnd}\n          vkuiClass={classNames(getClassName('PullToRefresh', platform), {\n            'PullToRefresh--watching': watching,\n            'PullToRefresh--refreshing': refreshing,\n          })}\n        >\n          <FixedLayout vkuiClass=\"PullToRefresh__controls\">\n            <PullToRefreshSpinner\n              style={{\n                transform: spinnerTransform,\n                WebkitTransform: spinnerTransform,\n                opacity: watching || refreshing || canRefresh ? 1 : 0,\n              }}\n              on={refreshing}\n              progress={refreshing ? null : spinnerProgress}\n            />\n          </FixedLayout>\n\n          <div\n            vkuiClass=\"PullToRefresh__content\"\n            ref={this.contentRef}\n            style={{\n              transform: contentTransform,\n              WebkitTransform: contentTransform,\n            }}\n          >\n            {children}\n          </div>\n        </Touch>\n      </TouchRootContext.Provider>\n    );\n  }\n}\n\nexport default withContext(\n  withPlatform(withDOM<PullToRefreshProps>(PullToRefresh)),\n  ScrollContext, 'scroll');\n"]},"metadata":{},"sourceType":"module"}