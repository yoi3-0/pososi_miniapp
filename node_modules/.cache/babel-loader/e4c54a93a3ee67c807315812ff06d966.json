{"ast":null,"code":"/**\n * Loads async import with retries. It can be useful for bad internet connection\n *\n * @example\n * const HeaderLazyComponent = React.lazy(() => asyncImportLoader(() => import('../components/Header/Header')));\n *\n * @example\n * asyncImportLoader(() => import('some-module'), 20).then((someModule) => {\n *   someModule.init();\n * });\n */\nexport var asyncImportLoader = function asyncImportLoader(asyncImport) {\n  var attempts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  return new Promise(function (resolve, reject) {\n    asyncImport().then(resolve)[\"catch\"](function (error) {\n      setTimeout(function () {\n        if (attempts === 0) {\n          reject(error);\n          return;\n        }\n\n        asyncImportLoader(asyncImport, attempts - 1).then(resolve, reject);\n      }, 1000);\n    });\n  });\n};","map":{"version":3,"sources":["../../src/async.ts"],"names":["asyncImportLoader","attempts","asyncImport","setTimeout","reject"],"mappings":"AAAA;;;;;;;;;;;AAWA,OAAO,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,WAAA,EAAiE;AAAA,MAA9BC,QAA8B,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAnB,EAAmB;AAChG,SAAO,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAAqB;AACtCC,IAAAA,WAAW,GAAXA,IAAAA,CAAAA,OAAAA,EAAAA,OAAAA,EAES,UAAA,KAAA,EAAW;AAChBC,MAAAA,UAAU,CAAC,YAAM;AACf,YAAIF,QAAQ,KAAZ,CAAA,EAAoB;AAClBG,UAAAA,MAAM,CAANA,KAAM,CAANA;AACA;AACD;;AACDJ,QAAAA,iBAAiB,CAAA,WAAA,EAAcC,QAAQ,GAAvCD,CAAiB,CAAjBA,CAAAA,IAAAA,CAAAA,OAAAA,EAAAA,MAAAA;AALQ,OAAA,EAAVG,IAAU,CAAVA;AAHJD,KAAAA;AADF,GAAO,CAAP;AADK,CAAA","sourcesContent":["/**\n * Loads async import with retries. It can be useful for bad internet connection\n *\n * @example\n * const HeaderLazyComponent = React.lazy(() => asyncImportLoader(() => import('../components/Header/Header')));\n *\n * @example\n * asyncImportLoader(() => import('some-module'), 20).then((someModule) => {\n *   someModule.init();\n * });\n */\nexport const asyncImportLoader = <T>(asyncImport: () => Promise<T>, attempts = 10): Promise<T> => {\n  return new Promise((resolve, reject) => {\n    asyncImport()\n      .then(resolve)\n      .catch((error) => {\n        setTimeout(() => {\n          if (attempts === 0) {\n            reject(error);\n            return;\n          }\n          asyncImportLoader(asyncImport, attempts - 1).then(resolve, reject);\n        }, 1000);\n      });\n  });\n};\n"]},"metadata":{},"sourceType":"module"}