{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport { useRef } from 'react';\nimport Touch from \"../Touch/Touch\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport { classNames } from \"../../lib/classNames\";\nimport { rescale } from \"../../helpers/math\";\nimport { withAdaptivity } from \"../../hoc/withAdaptivity\";\nimport { useExternRef } from \"../../hooks/useExternRef\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\n\nvar UniversalSliderDumb = function UniversalSliderDumb(_ref) {\n  var min = _ref.min,\n      max = _ref.max,\n      step = _ref.step,\n      value = _ref.value,\n      defaultValue = _ref.defaultValue,\n      onChange = _ref.onChange,\n      getRootRef = _ref.getRootRef,\n      sizeY = _ref.sizeY,\n      disabled = _ref.disabled,\n      restProps = _objectWithoutProperties(_ref, [\"min\", \"max\", \"step\", \"value\", \"defaultValue\", \"onChange\", \"getRootRef\", \"sizeY\", \"disabled\"]);\n\n  var platform = usePlatform();\n\n  var _value = _slicedToArray(value, 2),\n      start = _value[0],\n      end = _value[1];\n\n  var isRange = start != null;\n  var gesture = useRef({\n    dragging: false,\n    startX: 0,\n    containerWidth: 0\n  }).current;\n  var container = useExternRef(getRootRef);\n  var thumbStart = useRef();\n  var thumbEnd = useRef();\n\n  var offsetToValue = function offsetToValue(absolute) {\n    return rescale(absolute, [0, gesture.containerWidth], [min, max], {\n      step: step\n    });\n  };\n\n  var updateRange = function updateRange(nextValue) {\n    if (start == null) {\n      return [null, nextValue];\n    }\n\n    var dragging = gesture.dragging;\n\n    if (dragging === 'start') {\n      if (nextValue > end) {\n        // \"перехватиться\", если перетянули за конец\n        gesture.dragging = 'end';\n        return [end, nextValue];\n      }\n\n      return [nextValue, end];\n    }\n\n    if (dragging === 'end') {\n      if (nextValue < start) {\n        // \"перехватиться\", если перетянули за начало\n        gesture.dragging = 'start';\n        return [nextValue, start];\n      }\n\n      return [start, nextValue];\n    }\n\n    return value;\n  };\n\n  var snapDirection = function snapDirection(pos, target) {\n    if (target === thumbStart.current) {\n      return 'start';\n    }\n\n    if (target === thumbEnd.current) {\n      return 'end';\n    }\n\n    return Math.abs(start - pos) <= Math.abs(end - pos) ? 'start' : 'end';\n  };\n\n  var onStart = function onStart(e) {\n    var boundingRect = container.current.getBoundingClientRect();\n    gesture.containerWidth = boundingRect.width;\n    var absolutePosition = e.startX - boundingRect.left;\n    var pos = offsetToValue(absolutePosition);\n    gesture.dragging = snapDirection(pos, e.originalEvent.target);\n    gesture.startX = absolutePosition;\n    onChange(updateRange(pos), e);\n    e.originalEvent.stopPropagation();\n  };\n\n  var onMove = function onMove(e) {\n    onChange(updateRange(offsetToValue(gesture.startX + (e.shiftX || 0))), e);\n    e.originalEvent.stopPropagation();\n    e.originalEvent.preventDefault();\n  };\n\n  var onEnd = function onEnd(e) {\n    gesture.dragging = false;\n    e.originalEvent.stopPropagation();\n  };\n\n  var toPercent = function toPercent(v) {\n    return (v - min) / (max - min) * 100;\n  };\n\n  var draggerStyle = isRange ? {\n    width: \"\".concat(toPercent(end) - toPercent(start), \"%\"),\n    left: \"\".concat(toPercent(start), \"%\")\n  } : {\n    width: \"\".concat(toPercent(end), \"%\")\n  };\n  return createScopedElement(Touch, _extends({\n    \"data-value\": isRange ? value.join(',') : value\n  }, restProps, disabled ? {} : {\n    onStart: onStart,\n    onMove: onMove,\n    onEnd: onEnd\n  }, {\n    vkuiClass: classNames(getClassName('Slider', platform), \"Slider--sizeY-\".concat(sizeY), disabled && 'Slider--disabled')\n  }), createScopedElement(\"div\", {\n    ref: container,\n    vkuiClass: \"Slider__in\"\n  }, createScopedElement(\"div\", {\n    vkuiClass: \"Slider__dragger\",\n    style: draggerStyle\n  }, isRange && createScopedElement(\"span\", {\n    vkuiClass: classNames('Slider__thumb', 'Slider__thumb--start'),\n    ref: thumbStart\n  }), createScopedElement(\"span\", {\n    vkuiClass: classNames('Slider__thumb', 'Slider__thumb--end'),\n    ref: thumbEnd\n  }))));\n};\n\nexport var UniversalSlider = withAdaptivity(UniversalSliderDumb, {\n  sizeY: true\n});","map":{"version":3,"sources":["../../../src/components/RangeSlider/UniversalSlider.tsx"],"names":["UniversalSliderDumb","min","max","step","value","defaultValue","onChange","getRootRef","sizeY","disabled","restProps","platform","usePlatform","start","end","isRange","gesture","dragging","startX","containerWidth","container","useExternRef","thumbStart","useRef","thumbEnd","offsetToValue","rescale","updateRange","nextValue","snapDirection","target","Math","onStart","boundingRect","absolutePosition","e","pos","onMove","onEnd","toPercent","v","draggerStyle","width","left","classNames","getClassName","UniversalSlider","withAdaptivity"],"mappings":"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","sourcesContent":["import { useRef, FC, HTMLAttributes } from 'react';\nimport Touch, { TouchEvent, TouchEventHandler } from '../Touch/Touch';\nimport { getClassName } from '../../helpers/getClassName';\nimport { classNames } from '../../lib/classNames';\nimport { HasRootRef } from '../../types';\nimport { rescale } from '../../helpers/math';\nimport { withAdaptivity, AdaptivityProps } from '../../hoc/withAdaptivity';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport { usePlatform } from '../../hooks/usePlatform';\n\nexport type UniversalValue = [number | null, number];\n\nexport interface UniversalSliderProps<Value> extends\n  HasRootRef<HTMLDivElement>,\n  Omit<HTMLAttributes<HTMLDivElement>, 'value' | 'defaultValue' | 'onChange'>,\n  AdaptivityProps {\n  min?: number;\n  max?: number;\n  step?: number;\n  value?: Value;\n  defaultValue?: Value;\n  disabled?: boolean;\n  onChange?(value: Value, e: TouchEvent): void;\n}\n\nconst UniversalSliderDumb: FC<UniversalSliderProps<UniversalValue>> = ({\n  min, max, step,\n  value, defaultValue, onChange,\n  getRootRef,\n  sizeY,\n  disabled,\n  ...restProps\n}) => {\n  const platform = usePlatform();\n  const [start, end] = value;\n  const isRange = start != null;\n  const gesture = useRef({\n    dragging: false as false | 'start' | 'end',\n    startX: 0,\n    containerWidth: 0,\n  }).current;\n  const container = useExternRef(getRootRef);\n  const thumbStart = useRef<HTMLDivElement>();\n  const thumbEnd = useRef<HTMLDivElement>();\n\n  const offsetToValue = (absolute: number) => {\n    return rescale(absolute, [0, gesture.containerWidth], [min, max], { step });\n  };\n\n  const updateRange = (nextValue: number): UniversalValue => {\n    if (start == null) {\n      return [null, nextValue];\n    }\n\n    const { dragging } = gesture;\n    if (dragging === 'start') {\n      if (nextValue > end) {\n        // \"перехватиться\", если перетянули за конец\n        gesture.dragging = 'end';\n        return [end, nextValue];\n      }\n      return [nextValue, end];\n    }\n    if (dragging === 'end') {\n      if (nextValue < start) {\n        // \"перехватиться\", если перетянули за начало\n        gesture.dragging = 'start';\n        return [nextValue, start];\n      }\n      return [start, nextValue];\n    }\n\n    return value;\n  };\n\n  const snapDirection = (pos: number, target: EventTarget) => {\n    if (target === thumbStart.current) {\n      return 'start';\n    }\n    if (target === thumbEnd.current) {\n      return 'end';\n    }\n    return Math.abs(start - pos) <= Math.abs(end - pos) ? 'start' : 'end';\n  };\n\n  const onStart: TouchEventHandler = (e: TouchEvent) => {\n    const boundingRect = container.current.getBoundingClientRect();\n    gesture.containerWidth = boundingRect.width;\n\n    const absolutePosition = e.startX - boundingRect.left;\n    const pos = offsetToValue(absolutePosition);\n    gesture.dragging = snapDirection(pos, e.originalEvent.target);\n    gesture.startX = absolutePosition;\n\n    onChange(updateRange(pos), e);\n    e.originalEvent.stopPropagation();\n  };\n\n  const onMove: TouchEventHandler = (e: TouchEvent) => {\n    onChange(updateRange(offsetToValue(gesture.startX + (e.shiftX || 0))), e);\n\n    e.originalEvent.stopPropagation();\n    e.originalEvent.preventDefault();\n  };\n\n  const onEnd: TouchEventHandler = (e) => {\n    gesture.dragging = false;\n    e.originalEvent.stopPropagation();\n  };\n\n  const toPercent = (v: number) => (v - min) / (max - min) * 100;\n  const draggerStyle = isRange ? {\n    width: `${toPercent(end) - toPercent(start)}%`,\n    left: `${toPercent(start)}%`,\n  } : {\n    width: `${toPercent(end)}%`,\n  };\n\n  return (\n    <Touch\n      data-value={isRange ? value.join(',') : value}\n      {...restProps}\n      {...(disabled ? {} : { onStart, onMove, onEnd })}\n      vkuiClass={classNames(\n        getClassName('Slider', platform),\n        `Slider--sizeY-${sizeY}`,\n        disabled && 'Slider--disabled',\n      )}\n    >\n      <div ref={container} vkuiClass=\"Slider__in\">\n        <div vkuiClass=\"Slider__dragger\" style={draggerStyle}>\n          {isRange && <span vkuiClass={classNames('Slider__thumb', 'Slider__thumb--start')} ref={thumbStart} />}\n          <span vkuiClass={classNames('Slider__thumb', 'Slider__thumb--end')} ref={thumbEnd} />\n        </div>\n      </div>\n    </Touch>\n  );\n};\n\nexport const UniversalSlider = withAdaptivity(UniversalSliderDumb, {\n  sizeY: true,\n});\n"]},"metadata":{},"sourceType":"module"}