{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport { classNames } from \"../../lib/classNames\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport Text from \"../Typography/Text/Text\";\nimport Tappable from \"../../components/Tappable/Tappable\";\nimport { hasReactNode } from \"../../lib/utils\";\nexport var MiniInfoCell = function MiniInfoCell(props) {\n  var _classNames;\n\n  var platform = usePlatform();\n\n  var before = props.before,\n      after = props.after,\n      mode = props.mode,\n      textWrap = props.textWrap,\n      textLevel = props.textLevel,\n      children = props.children,\n      restProps = _objectWithoutProperties(props, [\"before\", \"after\", \"mode\", \"textWrap\", \"textLevel\", \"children\"]);\n\n  var isClickable = !!restProps.onClick;\n  return createScopedElement(Tappable, _extends({\n    Component: \"div\",\n    disabled: !isClickable,\n    role: isClickable ? 'button' : null\n  }, restProps, {\n    vkuiClass: classNames(getClassName('MiniInfoCell', platform), (_classNames = {}, _defineProperty(_classNames, \"MiniInfoCell--md-\".concat(mode), mode !== 'base'), _defineProperty(_classNames, \"MiniInfoCell--wr-\".concat(textWrap), textWrap !== 'nowrap'), _classNames), \"MiniInfoCell--lvl-\".concat(textLevel))\n  }), createScopedElement(\"span\", {\n    vkuiClass: \"MiniInfoCell__icon\"\n  }, before), createScopedElement(Text, {\n    vkuiClass: \"MiniInfoCell__content\",\n    weight: mode === 'more' ? 'medium' : 'regular'\n  }, children), hasReactNode(after) && createScopedElement(\"span\", {\n    vkuiClass: \"MiniInfoCell__after\"\n  }, after));\n};\nMiniInfoCell.defaultProps = {\n  mode: 'base',\n  textWrap: 'nowrap',\n  textLevel: 'secondary'\n};","map":{"version":3,"sources":["../../../src/components/MiniInfoCell/MiniInfoCell.tsx"],"names":["MiniInfoCell","platform","usePlatform","before","after","mode","textWrap","textLevel","children","restProps","props","isClickable","classNames","getClassName","hasReactNode"],"mappings":";;;;AACA,SAAA,UAAA,QAAA,sBAAA;AACA,SAAA,WAAA,QAAA,yBAAA;AACA,SAAA,YAAA,QAAA,4BAAA;AACA,OAAA,IAAA,MAAA,yBAAA;AACA,OAAA,QAAA,MAAA,oCAAA;AACA,SAAA,YAAA,QAAA,iBAAA;AA2CA,OAAO,IAAMA,YAAmC,GAAG,SAAtCA,YAAsC,CAAA,KAAA,EAA8B;AAAA,MAAA,WAAA;;AAC/E,MAAMC,QAAQ,GAAGC,WAAjB,EAAA;;AAD+E,MAG7EC,MAH6E,GAU3EO,KAV2E,CAAA,MAAA;AAAA,MAI7EN,KAJ6E,GAU3EM,KAV2E,CAAA,KAAA;AAAA,MAK7EL,IAL6E,GAU3EK,KAV2E,CAAA,IAAA;AAAA,MAM7EJ,QAN6E,GAU3EI,KAV2E,CAAA,QAAA;AAAA,MAO7EH,SAP6E,GAU3EG,KAV2E,CAAA,SAAA;AAAA,MAQ7EF,QAR6E,GAU3EE,KAV2E,CAAA,QAAA;AAAA,MAS1ED,SAT0E,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,QAAA,EAAA,OAAA,EAAA,MAAA,EAAA,UAAA,EAAA,WAAA,EAAA,UAAA,CAAA,CAAA;;AAY/E,MAAME,WAAW,GAAG,CAAC,CAACF,SAAS,CAA/B,OAAA;AAEA,SACE,mBAAA,CAAA,QAAA,EAAA,QAAA,CAAA;AACE,IAAA,SAAS,EADX,KAAA;AAEE,IAAA,QAAQ,EAAE,CAFZ,WAAA;AAGE,IAAA,IAAI,EAAEE,WAAW,GAAA,QAAA,GAAc;AAHjC,GAAA,EAAA,SAAA,EAAA;AAKE,IAAA,SAAS,EAAEC,UAAU,CAACC,YAAY,CAAA,cAAA,EAAb,QAAa,CAAb,GAAA,WAAA,GAAA,EAAA,EAAA,eAAA,CAAA,WAAA,EAAA,oBAAA,MAAA,CAAA,IAAA,CAAA,EACWR,IAAI,KADf,MAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAAA,oBAAA,MAAA,CAAA,QAAA,CAAA,EAEeC,QAAQ,KAFvB,QAAA,CAAA,EAAA,WAAA,GAAA,qBAAA,MAAA,CAAA,SAAA,CAAA;AALvB,GAAA,CAAA,EAUE,mBAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAC;AAAhB,GAAA,EAVF,MAUE,CAVF,EAWE,mBAAA,CAAA,IAAA,EAAA;AAAM,IAAA,SAAS,EAAf,uBAAA;AAAwC,IAAA,MAAM,EAAED,IAAI,KAAJA,MAAAA,GAAAA,QAAAA,GAA6B;AAA7E,GAAA,EAXF,QAWE,CAXF,EAcGS,YAAY,CAAZA,KAAY,CAAZA,IAAuB,mBAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAC;AAAhB,GAAA,EAf5B,KAe4B,CAd1B,CADF;AAdK,CAAA;AAkCPd,YAAY,CAAZA,YAAAA,GAA4B;AAC1BK,EAAAA,IAAI,EADsB,MAAA;AAE1BC,EAAAA,QAAQ,EAFkB,QAAA;AAG1BC,EAAAA,SAAS,EAAE;AAHe,CAA5BP","sourcesContent":["import { FC, HTMLAttributes, ReactNode } from 'react';\nimport { classNames } from '../../lib/classNames';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport { getClassName } from '../../helpers/getClassName';\nimport Text from '../Typography/Text/Text';\nimport Tappable from '../../components/Tappable/Tappable';\nimport { hasReactNode } from '../../lib/utils';\n\nexport interface MiniInfoCellProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Иконка слева.<br />\n   * Рекомендуется использовать иконки размера 20.\n   */\n  before: ReactNode;\n\n  /**\n   * Содержимое справа.<br />\n   * `<UsersStack size=\"s\" />` или `<Avatar size={24} />`\n   */\n  after?: ReactNode;\n\n  /**\n   * Тип ячейки:\n   *\n   * - `base` – базовая ячейка с серой иконкой и серым текстом.<br />\n   * В компонент можно передать `Link`, чтобы визуально сделать часть текста ссылкой.\n   * - `add` – тип ячейки, который показывает, что взаимодействие с ней должно вызывать действие добавления чего-то.\n   * - `more` – взаимодействие с такой ячейкой должно открывать какую-то подробную информацию.\n   */\n  mode?: 'base' | 'add' | 'more';\n\n  /**\n   * Тип отображения текста:\n   *\n   * - `nowrap` – в одну строку, текст не переносится и обрезается.\n   * - `short` – максимально отображается 3 строки, остальное обрезается.\n   * - `full` – текст отображается полностью.\n   */\n  textWrap?: 'nowrap' | 'short' | 'full';\n\n  /**\n   * Стиль текста:\n   *\n   * - `primary` – используйте этот стиль, если хотите выделить информацию в общем списке.<br />Пример использования: подробная информация на странице сообщества\n   * - `secondary` – стиль по-умолчанию.\n   */\n  textLevel?: 'primary' | 'secondary';\n}\n\nexport const MiniInfoCell: FC<MiniInfoCellProps> = (props: MiniInfoCellProps) => {\n  const platform = usePlatform();\n  const {\n    before,\n    after,\n    mode,\n    textWrap,\n    textLevel,\n    children,\n    ...restProps\n  } = props;\n\n  const isClickable = !!restProps.onClick;\n\n  return (\n    <Tappable\n      Component=\"div\"\n      disabled={!isClickable}\n      role={isClickable ? 'button' : null}\n      {...restProps}\n      vkuiClass={classNames(getClassName('MiniInfoCell', platform), {\n        [`MiniInfoCell--md-${mode}`]: mode !== 'base',\n        [`MiniInfoCell--wr-${textWrap}`]: textWrap !== 'nowrap',\n      }, `MiniInfoCell--lvl-${textLevel}`)}\n    >\n      <span vkuiClass=\"MiniInfoCell__icon\">{before}</span>\n      <Text vkuiClass=\"MiniInfoCell__content\" weight={mode === 'more' ? 'medium' : 'regular'}>\n        {children}\n      </Text>\n      {hasReactNode(after) && <span vkuiClass=\"MiniInfoCell__after\">{after}</span>}\n    </Tappable>\n  );\n};\n\nMiniInfoCell.defaultProps = {\n  mode: 'base',\n  textWrap: 'nowrap',\n  textLevel: 'secondary',\n};\n"]},"metadata":{},"sourceType":"module"}