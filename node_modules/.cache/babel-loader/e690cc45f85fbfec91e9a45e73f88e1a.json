{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/typeof\";\nexport function classNames() {\n  var result = [];\n\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  args.forEach(function (item) {\n    if (!item) {\n      return;\n    }\n\n    switch (_typeof(item)) {\n      case 'string':\n        result.push(item);\n        break;\n\n      case 'object':\n        Object.keys(item).forEach(function (key) {\n          if (item[key]) {\n            result.push(key);\n          }\n        });\n        break;\n\n      default:\n        result.push(\"\".concat(item));\n    }\n  });\n  return result.join(' ');\n}","map":{"version":3,"sources":["../../src/classNames.ts"],"names":["args","result","Object","item"],"mappings":";AAMA,OAAO,SAAA,UAAA,GAAkD;AACvD,MAAMC,MAAgB,GAAtB,EAAA;;AADuD,OAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAA3BD,IAA2B,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAA3BA,IAAAA,IAA2B,CAAA,IAAA,CAA3BA,GAA2B,SAAA,CAAA,IAAA,CAA3BA;AAA2B;;AAGvDA,EAAAA,IAAI,CAAJA,OAAAA,CAAa,UAAA,IAAA,EAAgB;AAC3B,QAAI,CAAJ,IAAA,EAAW;AACT;AACD;;AAED,YAAA,OAAA,CAAA,IAAA,CAAA;AACE,WAAA,QAAA;AACEC,QAAAA,MAAM,CAANA,IAAAA,CAAAA,IAAAA;AACA;;AAEF,WAAA,QAAA;AACEC,QAAAA,MAAM,CAANA,IAAAA,CAAAA,IAAAA,EAAAA,OAAAA,CAA0B,UAAA,GAAA,EAAiB;AACzC,cAAIC,IAAI,CAAR,GAAQ,CAAR,EAAe;AACbF,YAAAA,MAAM,CAANA,IAAAA,CAAAA,GAAAA;AACD;AAHHC,SAAAA;AAKA;;AAEF;AACED,QAAAA,MAAM,CAANA,IAAAA,CAAAA,GAAAA,MAAAA,CAAAA,IAAAA,CAAAA;AAdJ;AALFD,GAAAA;AAuBA,SAAOC,MAAM,CAANA,IAAAA,CAAP,GAAOA,CAAP;AACD","sourcesContent":["interface ClassNamesDictionary {\n  [index: string]: boolean | undefined | null;\n}\n\ntype ClassName = string | number | ClassNamesDictionary | boolean | undefined | null;\n\nexport function classNames(...args: ClassName[]): string {\n  const result: string[] = [];\n\n  args.forEach((item): void => {\n    if (!item) {\n      return;\n    }\n\n    switch (typeof item) {\n      case 'string':\n        result.push(item);\n        break;\n\n      case 'object':\n        Object.keys(item).forEach((key: string) => {\n          if (item[key]) {\n            result.push(key);\n          }\n        });\n        break;\n\n      default:\n        result.push(`${item}`);\n    }\n  });\n\n  return result.join(' ');\n}\n"]},"metadata":{},"sourceType":"module"}