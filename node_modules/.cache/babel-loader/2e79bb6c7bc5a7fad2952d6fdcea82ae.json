{"ast":null,"code":"import React from 'react'; // @ts-ignore\n\nimport BrowserSymbol from 'svg-baker-runtime/browser-symbol'; // @ts-ignore\n\nimport { assign } from 'es6-object-assign';\nimport { addSpriteSymbol, useIsomorphicLayoutEffect } from '../sprite';\nimport { SvgIcon } from '../SvgIcon';\nvar viewBox = '0 0 32 32';\nvar id = 'gift_32';\nvar content = '<symbol xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\" id=\"gift_32\"><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M0 0h32v32H0z\" /><path d=\"M27.996 13.002V15.5a1.5 1.5 0 01-1.5 1.5h-1.499v9.004a3 3 0 01-3 3H9.996a3 3 0 01-3-3V17h1.333H5.5A1.5 1.5 0 014 15.5v-2.498a3 3 0 013-3h17.996a3 3 0 013 3zM16.27 10H17v7h8v2h-8v10h-2V19H7v-2h8v-7h.723C11.787 9.941 7.33 8.623 7.33 6.669c0-2 2.667-4 4.667-3.334 1.333.445 2.666 2.666 3.999 6.665h.001c1.333-3.999 2.667-6.22 4-6.665 2-.666 4.666 1.334 4.666 3.334 0 1.954-4.456 3.272-8.392 3.331z\" fill=\"currentColor\" /></g></symbol>';\nvar isMounted = false;\n\nfunction mountIcon() {\n  if (!isMounted) {\n    addSpriteSymbol(new BrowserSymbol({\n      id: id,\n      viewBox: viewBox,\n      content: content\n    }));\n    isMounted = true;\n  }\n}\n\nvar Icon32Gift = function Icon32Gift(props) {\n  useIsomorphicLayoutEffect(function () {\n    mountIcon();\n  }, []);\n  return /*#__PURE__*/React.createElement(SvgIcon, assign({}, props, {\n    viewBox: viewBox,\n    id: id,\n    width: !isNaN(props.width) ? +props.width : 32,\n    height: !isNaN(props.height) ? +props.height : 32\n  }));\n};\n\nIcon32Gift.mountIcon = mountIcon;\nexport default Icon32Gift;","map":{"version":3,"sources":["../../../tmp/32/gift.ts"],"names":["viewBox","id","content","isMounted","addSpriteSymbol","Icon32Gift","useIsomorphicLayoutEffect","mountIcon","assign","width","isNaN","props","height"],"mappings":"AAAA,OAAA,KAAA,MAAA,OAAA,C,CACA;;AACA,OAAA,aAAA,MAAA,kCAAA,C,CACA;;AACA,SAAA,MAAA,QAAA,mBAAA;AACA,SAAA,eAAA,EAAA,yBAAA,QAAA,WAAA;AACA,SAAA,OAAA,QAAA,YAAA;AAEA,IAAMA,OAAO,GAAb,WAAA;AACA,IAAMC,EAAE,GAAR,SAAA;AACA,IAAMC,OAAO,GAAb,mkBAAA;AAEA,IAAIC,SAAS,GAAb,KAAA;;AACA,SAAA,SAAA,GAAqB;AACnB,MAAI,CAAJ,SAAA,EAAgB;AACdC,IAAAA,eAAe,CAAC,IAAA,aAAA,CAAkB;AAChCH,MAAAA,EAAE,EAD8B,EAAA;AAEhCD,MAAAA,OAAO,EAFyB,OAAA;AAGhCE,MAAAA,OAAO,EAAEA;AAHuB,KAAlB,CAAD,CAAfE;AAMAD,IAAAA,SAAS,GAATA,IAAAA;AACD;AACF;;AASD,IAAME,UAA+B,GAAG,SAAlCA,UAAkC,CAAA,KAAA,EAAW;AACjDC,EAAAA,yBAAyB,CAAC,YAAM;AAC9BC,IAAAA,SAAS;AADc,GAAA,EAAzBD,EAAyB,CAAzBA;AAIA,SAAA,aAAO,KAAK,CAAL,aAAA,CAAA,OAAA,EAA6BE,MAAM,CAAA,EAAA,EAAA,KAAA,EAAY;AACpDR,IAAAA,OAAO,EAD6C,OAAA;AAEpDC,IAAAA,EAAE,EAFkD,EAAA;AAGpDQ,IAAAA,KAAK,EAAE,CAACC,KAAK,CAACC,KAAK,CAAZ,KAAM,CAAN,GAAsB,CAACA,KAAK,CAA5B,KAAA,GAH6C,EAAA;AAIpDC,IAAAA,MAAM,EAAE,CAACF,KAAK,CAACC,KAAK,CAAZ,MAAM,CAAN,GAAuB,CAACA,KAAK,CAA7B,MAAA,GAAuC;AAJK,GAAZ,CAAnC,CAAP;AALF,CAAA;;AAaCN,UAAD,CAAA,SAACA,GAAD,SAACA;AAED,eAAA,UAAA","sourcesContent":["import React, { FC, HTMLAttributes, RefCallback, RefObject } from 'react';\n// @ts-ignore\nimport BrowserSymbol from 'svg-baker-runtime/browser-symbol';\n// @ts-ignore\nimport { assign } from 'es6-object-assign';\nimport { addSpriteSymbol, useIsomorphicLayoutEffect } from '../sprite';\nimport { SvgIcon } from '../SvgIcon';\n\nconst viewBox = '0 0 32 32';\nconst id = 'gift_32';\nconst content = '<symbol xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\" id=\"gift_32\"><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M0 0h32v32H0z\" /><path d=\"M27.996 13.002V15.5a1.5 1.5 0 01-1.5 1.5h-1.499v9.004a3 3 0 01-3 3H9.996a3 3 0 01-3-3V17h1.333H5.5A1.5 1.5 0 014 15.5v-2.498a3 3 0 013-3h17.996a3 3 0 013 3zM16.27 10H17v7h8v2h-8v10h-2V19H7v-2h8v-7h.723C11.787 9.941 7.33 8.623 7.33 6.669c0-2 2.667-4 4.667-3.334 1.333.445 2.666 2.666 3.999 6.665h.001c1.333-3.999 2.667-6.22 4-6.665 2-.666 4.666 1.334 4.666 3.334 0 1.954-4.456 3.272-8.392 3.331z\" fill=\"currentColor\" /></g></symbol>';\n\nlet isMounted = false;\nfunction mountIcon() {\n  if (!isMounted) {\n    addSpriteSymbol(new BrowserSymbol({\n      id: id,\n      viewBox: viewBox,\n      content: content,\n    }));\n\n    isMounted = true;\n  }\n}\n\nexport interface Icon32GiftProps extends HTMLAttributes<HTMLDivElement> {\n  fill?: string;\n  width?: number;\n  height?: number;\n  getRootRef?: RefCallback<HTMLDivElement> | RefObject<HTMLDivElement>;\n}\n\nconst Icon32Gift: FC<Icon32GiftProps> = (props) => {\n  useIsomorphicLayoutEffect(() => {\n    mountIcon();\n  }, []);\n\n  return React.createElement(SvgIcon, assign({}, props, {\n    viewBox: viewBox,\n    id: id,\n    width: !isNaN(props.width) ? +props.width : 32,\n    height: !isNaN(props.height) ? +props.height : 32,\n  }));\n};\n\n(Icon32Gift as any).mountIcon = mountIcon;\n\nexport default Icon32Gift;\n"]},"metadata":{},"sourceType":"module"}