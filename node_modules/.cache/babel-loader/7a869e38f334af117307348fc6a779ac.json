{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useCallback, useEffect, useState } from 'react';\nexport var useChipsInput = function useChipsInput(props) {\n  var value = props.value,\n      getOptionValue = props.getOptionValue,\n      onChange = props.onChange,\n      onInputChange = props.onInputChange,\n      getNewOptionData = props.getNewOptionData;\n\n  var _useState = useState(props.inputValue),\n      _useState2 = _slicedToArray(_useState, 2),\n      fieldValue = _useState2[0],\n      setFieldValue = _useState2[1];\n\n  var _useState3 = useState(value),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedOptions = _useState4[0],\n      setSelectedOptions = _useState4[1];\n\n  var clearInput = useCallback(function () {\n    setFieldValue('');\n    onInputChange({\n      target: {\n        value: ''\n      }\n    });\n  }, [onInputChange]);\n  var handleInputChange = useCallback(function (e) {\n    setFieldValue(e.target.value);\n    onInputChange(e);\n  }, [onInputChange]);\n  var toggleOption = useCallback(function (newOption, value) {\n    var newSelectedOptions = selectedOptions.filter(function (option) {\n      return getOptionValue(newOption) !== getOptionValue(option);\n    });\n\n    if (value === true) {\n      newSelectedOptions.push(newOption);\n    }\n\n    setSelectedOptions(newSelectedOptions);\n    onChange(newSelectedOptions);\n  }, [selectedOptions, getOptionValue, onChange]);\n  var addOption = useCallback(function (newOption) {\n    return toggleOption(newOption, true);\n  }, [toggleOption]);\n  var addOptionFromInput = useCallback(function () {\n    var trimmedValue = fieldValue === null || fieldValue === void 0 ? void 0 : fieldValue.trim();\n\n    if (trimmedValue) {\n      addOption(getNewOptionData(undefined, trimmedValue));\n      clearInput();\n    }\n  }, [addOption, clearInput, getNewOptionData, fieldValue]);\n  var removeOption = useCallback(function (value) {\n    toggleOption(getNewOptionData(undefined, value), false);\n  }, [toggleOption, getNewOptionData]);\n  useEffect(function () {\n    setSelectedOptions(value);\n    return function () {\n      return setSelectedOptions([]);\n    };\n  }, [props.value]);\n  useEffect(function () {\n    setFieldValue(props.inputValue);\n    return function () {\n      return setFieldValue('');\n    };\n  }, [props.inputValue]);\n  return {\n    fieldValue: fieldValue,\n    setFieldValue: setFieldValue,\n    selectedOptions: selectedOptions,\n    setSelectedOptions: setSelectedOptions,\n    clearInput: clearInput,\n    toggleOption: toggleOption,\n    addOption: addOption,\n    addOptionFromInput: addOptionFromInput,\n    removeOption: removeOption,\n    handleInputChange: handleInputChange\n  };\n};","map":{"version":3,"sources":["../../../src/components/ChipsInput/useChipsInput.ts"],"names":["useChipsInput","value","getOptionValue","onChange","onInputChange","getNewOptionData","props","fieldValue","setFieldValue","useState","selectedOptions","setSelectedOptions","clearInput","useCallback","target","handleInputChange","e","toggleOption","newSelectedOptions","addOption","addOptionFromInput","trimmedValue","removeOption","useEffect"],"mappings":"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","sourcesContent":["import { ChangeEvent, useCallback, useEffect, useState } from 'react';\nimport { ChipsInputOption, ChipsInputProps, ChipsInputValue } from './ChipsInput';\n\nexport const useChipsInput = <Option extends ChipsInputOption>(props: Partial<ChipsInputProps<Option>>) => {\n  const { value, getOptionValue, onChange, onInputChange, getNewOptionData } = props;\n\n  const [fieldValue, setFieldValue] = useState(props.inputValue);\n  const [selectedOptions, setSelectedOptions] = useState(value);\n\n  const clearInput = useCallback(() => {\n    setFieldValue('');\n    onInputChange({ target: { value: '' } } as any);\n  }, [onInputChange]);\n\n  const handleInputChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFieldValue(e.target.value);\n    onInputChange(e);\n  }, [onInputChange]);\n\n  const toggleOption = useCallback((newOption: Option, value?: boolean) => {\n    const newSelectedOptions = selectedOptions.filter((option: Option) => getOptionValue(newOption) !== getOptionValue(option));\n\n    if (value === true) {\n      newSelectedOptions.push(newOption);\n    }\n\n    setSelectedOptions(newSelectedOptions);\n    onChange(newSelectedOptions);\n  }, [selectedOptions, getOptionValue, onChange]);\n\n  const addOption = useCallback((newOption: Option) => toggleOption(newOption, true), [toggleOption]);\n  const addOptionFromInput = useCallback(() => {\n    const trimmedValue = fieldValue?.trim();\n\n    if (trimmedValue) {\n      addOption(getNewOptionData(undefined, trimmedValue));\n      clearInput();\n    }\n  }, [addOption, clearInput, getNewOptionData, fieldValue]);\n  const removeOption = useCallback((value: ChipsInputValue) => {\n    toggleOption(getNewOptionData(undefined, value as string), false);\n  }, [toggleOption, getNewOptionData]);\n\n  useEffect(() => {\n    setSelectedOptions(value);\n\n    return () => setSelectedOptions([]);\n  }, [props.value]);\n\n  useEffect(() => {\n    setFieldValue(props.inputValue);\n\n    return () => setFieldValue('');\n  }, [props.inputValue]);\n\n  return { fieldValue, setFieldValue, selectedOptions, setSelectedOptions, clearInput, toggleOption, addOption, addOptionFromInput, removeOption, handleInputChange };\n};\n"]},"metadata":{},"sourceType":"module"}