{"ast":null,"code":"import { useEffect } from 'react';\nimport { useEventListener } from \"./useEventListener\";\nexport function useGlobalEventListener(element, event, cb, options) {\n  var listener = useEventListener(event, cb, options);\n  useEffect(function () {\n    return cb ? listener.add(element) : listener.remove();\n  }, [Boolean(cb)]);\n}","map":{"version":3,"sources":["../../src/hooks/useGlobalEventListener.ts"],"names":["listener","useEventListener","useEffect","cb","Boolean"],"mappings":"AAAA,SAAA,SAAA,QAAA,OAAA;AACA,SAAA,gBAAA,QAAA,oBAAA;AAcA,OAAO,SAAA,sBAAA,CAAA,OAAA,EAAA,KAAA,EAAA,EAAA,EAAA,OAAA,EAAwH;AAC7H,MAAMA,QAAQ,GAAGC,gBAAgB,CAAA,KAAA,EAAA,EAAA,EAAjC,OAAiC,CAAjC;AACAC,EAAAA,SAAS,CAAC,YAAA;AAAA,WAAMC,EAAE,GAAGH,QAAQ,CAARA,GAAAA,CAAH,OAAGA,CAAH,GAA2BA,QAAQ,CAA3C,MAAmCA,EAAnC;AAAD,GAAA,EAAuD,CAACI,OAAO,CAAxEF,EAAwE,CAAR,CAAvD,CAATA;AACD","sourcesContent":["import { useEffect } from 'react';\nimport { useEventListener } from './useEventListener';\n\nexport function useGlobalEventListener<K extends keyof GlobalEventHandlersEventMap>(\n  element: HTMLElement | HTMLDocument | Window,\n  event: K,\n  cb: false | null | ((ev: GlobalEventHandlersEventMap[K]) => any),\n  options?: AddEventListenerOptions,\n): void;\nexport function useGlobalEventListener(\n  element: HTMLElement | HTMLDocument | Window,\n  event: string,\n  cb: false | null | ((ev: Event) => any),\n  options?: AddEventListenerOptions,\n): void;\nexport function useGlobalEventListener(element: any, event: string, cb: (ev: Event) => any, options?: AddEventListenerOptions) {\n  const listener = useEventListener(event, cb, options);\n  useEffect(() => cb ? listener.add(element) : listener.remove(), [Boolean(cb)]);\n}\n"]},"metadata":{},"sourceType":"module"}