{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nimport { useEffect, useState } from 'react';\nimport vkBridge from '@vkontakte/vk-bridge';\nvar initialState = {\n  bottom: null,\n  top: null,\n  left: null,\n  right: null\n};\n\nfunction resolveInsets(e) {\n  var _e$detail = e.detail,\n      type = _e$detail.type,\n      data = _e$detail.data;\n\n  switch (type) {\n    case 'VKWebAppUpdateConfig':\n    case 'VKWebAppUpdateInsets':\n      // Устаревшее событие vk-bridge\n      var insets = data.insets;\n\n      if (insets) {\n        return _objectSpread(_objectSpread({}, insets), {}, {\n          bottom: insets.bottom > 150 ? 0 : insets.bottom // если больше 150 – значит открылась клава и она сама работает как инсет, то есть наш нужно занулить\n\n        });\n      }\n\n  }\n\n  return null;\n}\n\nvkBridge.subscribe(function (e) {\n  var insets = resolveInsets(e);\n\n  if (insets) {\n    var htmlElement = window.document.documentElement;\n\n    for (var key in insets) {\n      if (insets.hasOwnProperty(key) && (insets[key] > 0 || key === 'bottom')) {\n        htmlElement.style.setProperty(\"--safe-area-inset-\".concat(key), \"\".concat(insets[key], \"px\"));\n      }\n    }\n\n    initialState = insets;\n  }\n});\nexport function useInsets() {\n  var _useState = useState(initialState),\n      _useState2 = _slicedToArray(_useState, 2),\n      insets = _useState2[0],\n      setInsets = _useState2[1];\n\n  useEffect(function () {\n    function connectListener(e) {\n      var insets = resolveInsets(e);\n\n      if (insets) {\n        setInsets(insets);\n      }\n    }\n\n    vkBridge.subscribe(connectListener);\n    return function () {\n      vkBridge.unsubscribe(connectListener);\n    };\n  }, []);\n  return insets;\n}","map":{"version":3,"sources":["../../src/hooks/useInsets.ts"],"names":["initialState","bottom","top","left","right","type","data","e","insets","vkBridge","resolveInsets","htmlElement","window","key","setInsets","useState","useEffect"],"mappings":";;AAAA,SAAA,SAAA,EAAA,QAAA,QAAA,OAAA;AACA,OAAA,QAAA,MAAA,sBAAA;AAEA,IAAIA,YAAoB,GAAG;AACzBC,EAAAA,MAAM,EADmB,IAAA;AAEzBC,EAAAA,GAAG,EAFsB,IAAA;AAGzBC,EAAAA,IAAI,EAHqB,IAAA;AAIzBC,EAAAA,KAAK,EAAE;AAJkB,CAA3B;;AAgBA,SAAA,aAAA,CAAA,CAAA,EAAsD;AAAA,MAAA,SAAA,GAC7BG,CAAC,CAD4B,MAAA;AAAA,MAC5CF,IAD4C,GAAA,SAAA,CAAA,IAAA;AAAA,MACtCC,IADsC,GAAA,SAAA,CAAA,IAAA;;AAEpD,UAAA,IAAA;AACE,SAAA,sBAAA;AACA,SAAA,sBAAA;AAA6B;AAA7B,UACUE,MADV,GACqBF,IADrB,CAAA,MAAA;;AAEE,UAAA,MAAA,EAAY;AACV,eAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,MAAA,CAAA,EAAA,EAAA,EAAA;AAEEL,UAAAA,MAAM,EAAEO,MAAM,CAANA,MAAAA,GAAAA,GAAAA,GAAAA,CAAAA,GAA0BA,MAAM,CAF1C,MAAA,CAEmD;;AAFnD,SAAA,CAAA;AAID;;AATL;;AAWA,SAAA,IAAA;AACD;;AAEDC,QAAQ,CAARA,SAAAA,CAAmB,UAAA,CAAA,EAAoB;AACrC,MAAMD,MAAM,GAAGE,aAAa,CAA5B,CAA4B,CAA5B;;AACA,MAAA,MAAA,EAAY;AACV,QAAMC,WAAW,GAAGC,MAAM,CAANA,QAAAA,CAApB,eAAA;;AACA,SAAK,IAAL,GAAA,IAAA,MAAA,EAAwB;AACtB,UAAIJ,MAAM,CAANA,cAAAA,CAAAA,GAAAA,MAA+BA,MAAM,CAANA,GAAM,CAANA,GAAAA,CAAAA,IAAmCK,GAAG,KAAzE,QAAIL,CAAJ,EAAyF;AACvFG,QAAAA,WAAW,CAAXA,KAAAA,CAAAA,WAAAA,CAAAA,qBAAAA,MAAAA,CAAAA,GAAAA,CAAAA,EAAAA,GAAAA,MAAAA,CAA6DH,MAAM,CAAnEG,GAAmE,CAAnEA,EAAAA,IAAAA,CAAAA;AACD;AACF;;AACDX,IAAAA,YAAY,GAAZA,MAAAA;AACD;AAVHS,CAAAA;AAaA,OAAO,SAAA,SAAA,GAA6B;AAAA,MAAA,SAAA,GACNM,QAAQ,CADF,YACE,CADF;AAAA,MAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MAC3BP,MAD2B,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MACnBM,SADmB,GAAA,UAAA,CAAA,CAAA,CAAA;;AAGlCE,EAAAA,SAAS,CAAC,YAAM;AACd,aAAA,eAAA,CAAA,CAAA,EAAyC;AACvC,UAAMR,MAAM,GAAGE,aAAa,CAA5B,CAA4B,CAA5B;;AACA,UAAA,MAAA,EAAY;AACVI,QAAAA,SAAS,CAATA,MAAS,CAATA;AACD;AACF;;AAEDL,IAAAA,QAAQ,CAARA,SAAAA,CAAAA,eAAAA;AACA,WAAO,YAAM;AACXA,MAAAA,QAAQ,CAARA,WAAAA,CAAAA,eAAAA;AADF,KAAA;AATO,GAAA,EAATO,EAAS,CAATA;AAcA,SAAA,MAAA;AACD","sourcesContent":["import { useEffect, useState } from 'react';\nimport vkBridge, { Insets } from '@vkontakte/vk-bridge';\n\nlet initialState: Insets = {\n  bottom: null,\n  top: null,\n  left: null,\n  right: null,\n};\n\ninterface BridgeEvent {\n  detail: {\n    type: string;\n    data: {\n      [index: string]: any;\n    };\n  };\n}\n\nfunction resolveInsets(e: BridgeEvent): Insets | null {\n  const { type, data } = e.detail;\n  switch (type) {\n    case 'VKWebAppUpdateConfig':\n    case 'VKWebAppUpdateInsets': // Устаревшее событие vk-bridge\n      const { insets } = data;\n      if (insets) {\n        return {\n          ...insets,\n          bottom: insets.bottom > 150 ? 0 : insets.bottom, // если больше 150 – значит открылась клава и она сама работает как инсет, то есть наш нужно занулить\n        };\n      }\n  }\n  return null;\n}\n\nvkBridge.subscribe((e: BridgeEvent) => {\n  const insets = resolveInsets(e);\n  if (insets) {\n    const htmlElement = window.document.documentElement;\n    for (let key in insets) {\n      if (insets.hasOwnProperty(key) && (insets[key as keyof Insets] > 0 || key === 'bottom')) {\n        htmlElement.style.setProperty(`--safe-area-inset-${key}`, `${insets[key as keyof Insets]}px`);\n      }\n    }\n    initialState = insets;\n  }\n});\n\nexport function useInsets(): Insets {\n  const [insets, setInsets] = useState<Insets>(initialState);\n\n  useEffect(() => {\n    function connectListener(e: BridgeEvent) {\n      const insets = resolveInsets(e);\n      if (insets) {\n        setInsets(insets);\n      }\n    }\n\n    vkBridge.subscribe(connectListener);\n    return () => {\n      vkBridge.unsubscribe(connectListener);\n    };\n  }, []);\n\n  return insets;\n}\n"]},"metadata":{},"sourceType":"module"}