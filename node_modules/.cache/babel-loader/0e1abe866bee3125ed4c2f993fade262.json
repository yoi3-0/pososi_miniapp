{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport { useState } from 'react';\nimport Tappable from \"../Tappable/Tappable\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport { classNames } from \"../../lib/classNames\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport Text from \"../Typography/Text/Text\";\n\nvar SliderSwitchButton = function SliderSwitchButton(props) {\n  var _classNames;\n\n  var active = props.active,\n      hovered = props.hovered,\n      children = props.children,\n      getRootRef = props.getRootRef,\n      restProps = _objectWithoutProperties(props, [\"active\", \"hovered\", \"children\", \"getRootRef\"]);\n\n  var platform = usePlatform();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      focus = _useState2[0],\n      setFocus = _useState2[1];\n\n  var toggleFocus = function toggleFocus() {\n    setFocus(!focus);\n  };\n\n  return createScopedElement(Tappable, _extends({}, restProps, {\n    vkuiClass: classNames(getClassName('SliderSwitch__button', platform), (_classNames = {}, _defineProperty(_classNames, 'SliderSwitch__button--active', active), _defineProperty(_classNames, 'SliderSwitch__button--hover', !active && hovered), _defineProperty(_classNames, 'SliderSwitch__button--activeHover', active && hovered), _defineProperty(_classNames, 'SliderSwitch__button--focus', focus && !hovered), _classNames)),\n    Component: \"button\",\n    type: \"button\",\n    getRootRef: getRootRef,\n    \"aria-pressed\": active,\n    onFocus: toggleFocus,\n    onBlur: toggleFocus,\n    tabIndex: 0,\n    hasActive: false,\n    hoverMode: \"opacity\"\n  }), createScopedElement(Text, {\n    weight: \"medium\"\n  }, children));\n};\n\nexport default SliderSwitchButton;","map":{"version":3,"sources":["../../../src/components/SliderSwitch/SliderSwitchButton.tsx"],"names":["SliderSwitchButton","active","hovered","children","getRootRef","restProps","props","platform","usePlatform","focus","setFocus","useState","toggleFocus","classNames","getClassName"],"mappings":";;;;;AAAA,SAAA,QAAA,QAAA,OAAA;AACA,OAAA,QAAA,MAAA,sBAAA;AACA,SAAA,YAAA,QAAA,4BAAA;AACA,SAAA,UAAA,QAAA,sBAAA;AAEA,SAAA,WAAA,QAAA,yBAAA;AACA,OAAA,IAAA,MAAA,yBAAA;;AAOA,IAAMA,kBAAkD,GAAG,SAArDA,kBAAqD,CAAA,KAAA,EAAwB;AAAA,MAAA,WAAA;;AAAA,MACzEC,MADyE,GACjBK,KADiB,CAAA,MAAA;AAAA,MACjEJ,OADiE,GACjBI,KADiB,CAAA,OAAA;AAAA,MACxDH,QADwD,GACjBG,KADiB,CAAA,QAAA;AAAA,MAC9CF,UAD8C,GACjBE,KADiB,CAAA,UAAA;AAAA,MAC/BD,SAD+B,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,QAAA,EAAA,SAAA,EAAA,UAAA,EAAA,YAAA,CAAA,CAAA;;AAEjF,MAAME,QAAQ,GAAGC,WAAjB,EAAA;;AAFiF,MAAA,SAAA,GAGvDG,QAAQ,CAH+C,KAG/C,CAH+C;AAAA,MAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MAG1EF,KAH0E,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MAGnEC,QAHmE,GAAA,UAAA,CAAA,CAAA,CAAA;;AAKjF,MAAME,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxBF,IAAAA,QAAQ,CAAC,CAATA,KAAQ,CAARA;AADF,GAAA;;AAIA,SAAO,mBAAA,CAAA,QAAA,EAAA,QAAA,CAAA,EAAA,EAAA,SAAA,EAAA;AACL,IAAA,SAAS,EACPG,UAAU,CACRC,YAAY,CAAA,sBAAA,EADJ,QACI,CADJ,GAAA,WAAA,GAAA,EAAA,EAAA,eAAA,CAAA,WAAA,EAAA,8BAAA,EAAA,MAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAAA,6BAAA,EAI2B,CAAA,MAAA,IAJ3B,OAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAAA,mCAAA,EAKiCb,MAAM,IALvC,OAAA,CAAA,EAAA,eAAA,CAAA,WAAA,EAAA,6BAAA,EAM2BQ,KAAK,IAAI,CANpC,OAAA,CAAA,EAFP,WAEO,EAFP;AAYL,IAAA,SAAS,EAZJ,QAAA;AAaL,IAAA,IAAI,EAbC,QAAA;AAcL,IAAA,UAAU,EAdL,UAAA;AAeL,oBAfK,MAAA;AAgBL,IAAA,OAAO,EAhBF,WAAA;AAiBL,IAAA,MAAM,EAjBD,WAAA;AAkBL,IAAA,QAAQ,EAlBH,CAAA;AAmBL,IAAA,SAAS,EAnBJ,KAAA;AAoBL,IAAA,SAAS,EAAC;AApBL,GAAA,CAAA,EAsBL,mBAAA,CAAA,IAAA,EAAA;AAAM,IAAA,MAAM,EAAC;AAAb,GAAA,EAtBF,QAsBE,CAtBK,CAAP;AATF,CAAA;;AAmCA,eAAA,kBAAA","sourcesContent":["import { FunctionComponent, ButtonHTMLAttributes, useState } from 'react';\nimport Tappable from '../Tappable/Tappable';\nimport { getClassName } from '../../helpers/getClassName';\nimport { classNames } from '../../lib/classNames';\nimport { HasRootRef } from '../../types';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport Text from '../Typography/Text/Text';\n\nexport interface ButtonProps extends ButtonHTMLAttributes<HTMLElement>, HasRootRef<HTMLElement> {\n  active?: boolean;\n  hovered?: boolean;\n}\n\nconst SliderSwitchButton: FunctionComponent<ButtonProps> = (props: ButtonProps) => {\n  const { active, hovered, children, getRootRef, ...restProps } = props;\n  const platform = usePlatform();\n  const [focus, setFocus] = useState(false);\n\n  const toggleFocus = () => {\n    setFocus(!focus);\n  };\n\n  return <Tappable {...restProps}\n    vkuiClass={\n      classNames(\n        getClassName('SliderSwitch__button', platform),\n        {\n          ['SliderSwitch__button--active']: active,\n          ['SliderSwitch__button--hover']: !active && hovered,\n          ['SliderSwitch__button--activeHover']: active && hovered,\n          ['SliderSwitch__button--focus']: focus && !hovered,\n        },\n      )\n    }\n    Component=\"button\"\n    type=\"button\"\n    getRootRef={getRootRef}\n    aria-pressed={active}\n    onFocus={toggleFocus}\n    onBlur={toggleFocus}\n    tabIndex={0}\n    hasActive={false}\n    hoverMode=\"opacity\"\n  >\n    <Text weight=\"medium\">{children}</Text>\n  </Tappable>;\n};\n\nexport default SliderSwitchButton;\n"]},"metadata":{},"sourceType":"module"}