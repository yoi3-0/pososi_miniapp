{"ast":null,"code":"import { computeBrowserInfo } from \"./browser\";\nexport var Platform;\n\n(function (Platform) {\n  Platform[\"ANDROID\"] = \"android\";\n  Platform[\"IOS\"] = \"ios\";\n  Platform[\"VKCOM\"] = \"vkcom\";\n})(Platform || (Platform = {}));\n\nexport var ANDROID = Platform.ANDROID;\nexport var IOS = Platform.IOS;\nexport var VKCOM = Platform.VKCOM;\nexport function platform(browserInfo) {\n  if (!browserInfo) {\n    browserInfo = computeBrowserInfo();\n  }\n\n  return browserInfo.system === 'ios' ? IOS : ANDROID;\n}\nvar platformName = platform();\n/**\n * @deprecated для определения платформы используйте withPlatform или usePlatform\n */\n\nexport var IS_PLATFORM_IOS = platformName === IOS;\n/**\n * @deprecated для определения платформы используйте withPlatform или usePlatform\n */\n\nexport var IS_PLATFORM_ANDROID = platformName === ANDROID;","map":{"version":3,"sources":["../../src/lib/platform.ts"],"names":["Platform","ANDROID","IOS","VKCOM","browserInfo","computeBrowserInfo","platformName","platform","IS_PLATFORM_IOS","IS_PLATFORM_ANDROID"],"mappings":"AAAA,SAAA,kBAAA,QAAA,WAAA;AAEA,OAAA,IAAA,QAAA;;WAAYA,Q;AAAAA,EAAAA,Q,WAAAA,G,SAAAA;AAAAA,EAAAA,Q,OAAAA,G,KAAAA;AAAAA,EAAAA,Q,SAAAA,G,OAAAA;GAAAA,Q,KAAAA,Q;;AAMZ,OAAO,IAAMC,OAAO,GAAGD,QAAQ,CAAxB,OAAA;AACP,OAAO,IAAME,GAAG,GAAGF,QAAQ,CAApB,GAAA;AACP,OAAO,IAAMG,KAAK,GAAGH,QAAQ,CAAtB,KAAA;AAIP,OAAO,SAAA,QAAA,CAAA,WAAA,EAA2D;AAChE,MAAI,CAAJ,WAAA,EAAkB;AAChBI,IAAAA,WAAW,GAAGC,kBAAdD,EAAAA;AACD;;AAED,SAAOA,WAAW,CAAXA,MAAAA,KAAAA,KAAAA,GAAAA,GAAAA,GAAP,OAAA;AACD;AAED,IAAME,YAAY,GAAGC,QAArB,EAAA;AAEA;;;;AAGA,OAAO,IAAMC,eAAwB,GAAGF,YAAY,KAA7C,GAAA;AACP;;;;AAGA,OAAO,IAAMG,mBAA4B,GAAGH,YAAY,KAAjD,OAAA","sourcesContent":["import { BrowserInfo, computeBrowserInfo } from './browser';\n\nexport enum Platform {\n  ANDROID = 'android',\n  IOS = 'ios',\n  VKCOM = 'vkcom'\n}\n\nexport const ANDROID = Platform.ANDROID;\nexport const IOS = Platform.IOS;\nexport const VKCOM = Platform.VKCOM;\n\nexport type PlatformType = Platform.ANDROID | Platform.IOS | Platform.VKCOM;\n\nexport function platform(browserInfo?: BrowserInfo): PlatformType {\n  if (!browserInfo) {\n    browserInfo = computeBrowserInfo();\n  }\n\n  return browserInfo.system === 'ios' ? IOS : ANDROID;\n}\n\nconst platformName = platform();\n\n/**\n * @deprecated для определения платформы используйте withPlatform или usePlatform\n */\nexport const IS_PLATFORM_IOS: boolean = platformName === IOS;\n/**\n * @deprecated для определения платформы используйте withPlatform или usePlatform\n */\nexport const IS_PLATFORM_ANDROID: boolean = platformName === ANDROID;\n"]},"metadata":{},"sourceType":"module"}