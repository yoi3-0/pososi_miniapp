{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport { classNames } from \"../../lib/classNames\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport { getTitleFromChildren, hasReactNode } from \"../../lib/utils\";\nimport Tappable from \"../Tappable/Tappable\";\nimport { Icon16Dropdown } from '@vkontakte/icons';\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport Caption from \"../Typography/Caption/Caption\";\nimport Subhead from \"../Typography/Subhead/Subhead\";\n\nvar SubnavigationButtonTypography = function SubnavigationButtonTypography(_ref) {\n  var textLevel = _ref.textLevel,\n      restProps = _objectWithoutProperties(_ref, [\"textLevel\"]);\n\n  if (textLevel === 1) {\n    return createScopedElement(Subhead, _extends({\n      weight: \"regular\"\n    }, restProps));\n  }\n\n  return createScopedElement(Caption, _extends({\n    level: textLevel === 2 ? '1' : '2',\n    weight: \"regular\"\n  }, restProps));\n};\n\nexport var SubnavigationButton = function SubnavigationButton(props) {\n  var platform = usePlatform();\n\n  var size = props.size,\n      selected = props.selected,\n      textLevel = props.textLevel,\n      before = props.before,\n      after = props.after,\n      expandable = props.expandable,\n      children = props.children,\n      restProps = _objectWithoutProperties(props, [\"size\", \"selected\", \"textLevel\", \"before\", \"after\", \"expandable\", \"children\"]);\n\n  return createScopedElement(Tappable, _extends({}, restProps, {\n    hasActive: false,\n    vkuiClass: classNames(getClassName('SubnavigationButton', platform), \"SubnavigationButton--\".concat(size), {\n      'SubnavigationButton--selected': selected\n    }),\n    \"aria-label\": getTitleFromChildren(children)\n  }), createScopedElement(\"span\", {\n    vkuiClass: \"SubnavigationButton__in\"\n  }, hasReactNode(before) && createScopedElement(\"span\", {\n    vkuiClass: \"SubnavigationButton__before\"\n  }, before), createScopedElement(SubnavigationButtonTypography, {\n    textLevel: textLevel,\n    vkuiClass: \"SubnavigationButton__label\",\n    Component: \"span\"\n  }, children), hasReactNode(after) && createScopedElement(\"span\", {\n    vkuiClass: \"SubnavigationButton__after\"\n  }, after), expandable && createScopedElement(Icon16Dropdown, {\n    vkuiClass: \"SubnavigationButton__expandableIcon\"\n  })));\n};\nSubnavigationButton.defaultProps = {\n  size: 'm',\n  textLevel: 1\n};","map":{"version":3,"sources":["../../../src/components/SubnavigationButton/SubnavigationButton.tsx"],"names":["SubnavigationButtonTypography","textLevel","restProps","SubnavigationButton","platform","usePlatform","size","selected","before","after","expandable","children","props","classNames","getClassName","getTitleFromChildren","hasReactNode"],"mappings":"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","sourcesContent":["import { FC, ReactNode, ElementType } from 'react';\nimport { classNames } from '../../lib/classNames';\nimport { getClassName } from '../../helpers/getClassName';\nimport { getTitleFromChildren, hasReactNode } from '../../lib/utils';\nimport Tappable, { TappableProps } from '../Tappable/Tappable';\nimport { Icon16Dropdown } from '@vkontakte/icons';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport Caption from '../Typography/Caption/Caption';\nimport Subhead from '../Typography/Subhead/Subhead';\n\nexport interface SubnavigationButtonProps extends Omit<TappableProps, 'size'> {\n  size?: 'm' | 'l';\n  selected?: boolean;\n  /**\n   * Размер шрифта. Этим свойством рекомендуется пользоваться, чтобы отрегулировать размер шрифта у кнопок в `<SubnavigationBar mode=\"fixed\" />`\n   */\n  textLevel?: 1 | 2 | 3;\n  /**\n   * Рекомендуется использовать только иконки с размером 24\n   */\n  before?: ReactNode;\n  /**\n   * Рекомендуется использовать только `<Counter size=\"s\" />` или `<Badge />`\n   */\n  after?: ReactNode;\n  expandable?: boolean;\n}\n\ninterface SubnavButtonTypographyProps extends Pick<SubnavigationButtonProps, 'textLevel'> {\n  Component?: ElementType;\n}\n\nconst SubnavigationButtonTypography: FC<SubnavButtonTypographyProps> = ({ textLevel, ...restProps }: SubnavButtonTypographyProps) => {\n  if (textLevel === 1) {\n    return <Subhead weight=\"regular\" {...restProps} />;\n  }\n\n  return (\n    <Caption\n      level={textLevel === 2 ? '1' : '2'}\n      weight=\"regular\"\n      {...restProps}\n    />\n  );\n};\n\nexport const SubnavigationButton: FC<SubnavigationButtonProps> = (props: SubnavigationButtonProps) => {\n  const platform = usePlatform();\n  const {\n    size,\n    selected,\n    textLevel,\n    before,\n    after,\n    expandable,\n    children,\n    ...restProps\n  } = props;\n\n  return (\n    <Tappable\n      {...restProps}\n      hasActive={false}\n      vkuiClass={classNames(\n        getClassName('SubnavigationButton', platform),\n        `SubnavigationButton--${size}`,\n        {\n          'SubnavigationButton--selected': selected,\n        },\n      )}\n      aria-label={getTitleFromChildren(children)}\n    >\n      <span vkuiClass=\"SubnavigationButton__in\">\n        {hasReactNode(before) && <span vkuiClass=\"SubnavigationButton__before\">{before}</span>}\n        <SubnavigationButtonTypography\n          textLevel={textLevel}\n          vkuiClass=\"SubnavigationButton__label\"\n          Component=\"span\"\n        >\n          {children}\n        </SubnavigationButtonTypography>\n        {hasReactNode(after) && <span vkuiClass=\"SubnavigationButton__after\">{after}</span>}\n        {expandable && <Icon16Dropdown vkuiClass=\"SubnavigationButton__expandableIcon\" />}\n      </span>\n    </Tappable>\n  );\n};\n\nSubnavigationButton.defaultProps = {\n  size: 'm',\n  textLevel: 1,\n};\n"]},"metadata":{},"sourceType":"module"}