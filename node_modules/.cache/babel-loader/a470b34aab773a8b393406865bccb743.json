{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport { useState, useRef, useEffect, useContext, Fragment } from 'react';\nimport { classNames } from \"../../lib/classNames\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport Touch from \"../Touch/Touch\";\nimport { ANDROID, IOS, VKCOM } from \"../../lib/platform\";\nimport { Icon24Reorder, Icon24ReorderIos, Icon24CheckCircleOn, Icon24CheckCircleOff } from '@vkontakte/icons';\nimport SimpleCell from \"../SimpleCell/SimpleCell\";\nimport { Removable } from \"../Removable/Removable\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { ListContext } from \"../../components/List/ListContext\";\nexport var Cell = function Cell(props) {\n  var _onRemove = props.onRemove,\n      removePlaceholder = props.removePlaceholder,\n      onDragFinish = props.onDragFinish,\n      className = props.className,\n      style = props.style,\n      before = props.before,\n      after = props.after,\n      disabled = props.disabled,\n      removable = props.removable,\n      draggable = props.draggable,\n      selectable = props.selectable,\n      Component = props.Component,\n      onChange = props.onChange,\n      name = props.name,\n      checked = props.checked,\n      defaultChecked = props.defaultChecked,\n      getRootRef = props.getRootRef,\n      restProps = _objectWithoutProperties(props, [\"onRemove\", \"removePlaceholder\", \"onDragFinish\", \"className\", \"style\", \"before\", \"after\", \"disabled\", \"removable\", \"draggable\", \"selectable\", \"Component\", \"onChange\", \"name\", \"checked\", \"defaultChecked\", \"getRootRef\"]);\n\n  var rootElRef = useRef(null);\n  var platform = usePlatform();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      dragging = _useState2[0],\n      setDragging = _useState2[1];\n\n  var _useState3 = useState(undefined),\n      _useState4 = _slicedToArray(_useState3, 2),\n      siblings = _useState4[0],\n      setSiblings = _useState4[1];\n\n  var _useState5 = useState(undefined),\n      _useState6 = _slicedToArray(_useState5, 2),\n      dragStartIndex = _useState6[0],\n      setDragStartIndex = _useState6[1];\n\n  var _useState7 = useState(undefined),\n      _useState8 = _slicedToArray(_useState7, 2),\n      dragEndIndex = _useState8[0],\n      setDragEndIndex = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      dragShift = _useState10[0],\n      setDragShift = _useState10[1];\n\n  var _useState11 = useState(undefined),\n      _useState12 = _slicedToArray(_useState11, 2),\n      dragDirection = _useState12[0],\n      setDragDirection = _useState12[1];\n\n  var onDragStart = function onDragStart() {\n    var rootEl = rootElRef === null || rootElRef === void 0 ? void 0 : rootElRef.current;\n    setDragging(true);\n\n    var _siblings = Array.from(rootEl.parentElement.childNodes);\n\n    setDragStartIndex(_siblings.indexOf(rootEl));\n    setSiblings(_siblings);\n    setDragShift(0);\n  };\n\n  var onDragMove = function onDragMove(e) {\n    e.originalEvent.preventDefault();\n    var rootEl = rootElRef === null || rootElRef === void 0 ? void 0 : rootElRef.current;\n    rootEl.style.transform = \"translateY(\".concat(e.shiftY, \"px)\");\n    setDragDirection(dragShift - e.shiftY < 0 ? 'down' : 'up');\n    setDragShift(e.shiftY);\n    setDragEndIndex(dragStartIndex);\n    siblings.forEach(function (sibling, siblingIndex) {\n      var rootGesture = rootEl.getBoundingClientRect();\n      var siblingGesture = sibling.getBoundingClientRect();\n\n      if (dragStartIndex < siblingIndex) {\n        if (rootGesture.bottom > siblingGesture.top + siblingGesture.height / 2) {\n          if (dragDirection === 'down') {\n            sibling.style.transform = 'translateY(-100%)';\n          }\n\n          setDragEndIndex(function (dragEndIndex) {\n            return dragEndIndex + 1;\n          });\n        }\n\n        if (rootGesture.top < siblingGesture.bottom - siblingGesture.height / 2 && dragDirection === 'up') {\n          sibling.style.transform = 'translateY(0)';\n        }\n      } else if (dragStartIndex > siblingIndex) {\n        if (rootGesture.top < siblingGesture.bottom - siblingGesture.height / 2) {\n          if (dragDirection === 'up') {\n            sibling.style.transform = 'translateY(100%)';\n          }\n\n          setDragEndIndex(function (dragEndIndex) {\n            return dragEndIndex - 1;\n          });\n        }\n\n        if (rootGesture.bottom > siblingGesture.top + siblingGesture.height / 2 && dragDirection === 'down') {\n          sibling.style.transform = 'translateY(0)';\n        }\n      }\n    });\n  };\n\n  var onDragEnd = function onDragEnd() {\n    var from = dragStartIndex,\n        to = dragEndIndex;\n    siblings.forEach(function (sibling) {\n      sibling.style.transform = null;\n    });\n    setSiblings(undefined);\n    setDragEndIndex(undefined);\n    setDragStartIndex(undefined);\n    setDragDirection(undefined);\n    setDragShift(undefined);\n    setDragging(false);\n    props.onDragFinish && props.onDragFinish({\n      from: from,\n      to: to\n    });\n  };\n\n  var onDragClick = function onDragClick(e) {\n    e.nativeEvent.stopPropagation();\n    e.preventDefault();\n  };\n\n  var _useContext = useContext(ListContext),\n      toggleDrag = _useContext.toggleDrag;\n\n  useEffect(function () {\n    if (dragging) {\n      toggleDrag(true);\n      return function () {\n        return toggleDrag(false);\n      };\n    }\n\n    return undefined;\n  }, [dragging]);\n  var simpleCell = createScopedElement(SimpleCell, _extends({}, restProps, {\n    disabled: draggable || removable || disabled,\n    Component: selectable ? 'label' : Component,\n    htmlFor: selectable ? name : undefined,\n    before: createScopedElement(Fragment, null, (platform === ANDROID || platform === VKCOM) && draggable && createScopedElement(Touch, {\n      vkuiClass: \"Cell__dragger\",\n      onStart: onDragStart,\n      onMoveY: onDragMove,\n      onEnd: onDragEnd,\n      onClick: onDragClick\n    }, createScopedElement(Icon24Reorder, null)), selectable && createScopedElement(Fragment, null, createScopedElement(\"input\", {\n      type: \"checkbox\",\n      vkuiClass: \"Cell__checkbox\",\n      name: name,\n      onChange: onChange,\n      defaultChecked: defaultChecked,\n      checked: checked,\n      disabled: disabled\n    }), createScopedElement(\"span\", {\n      vkuiClass: \"Cell__marker\"\n    }, createScopedElement(Icon24CheckCircleOff, {\n      vkuiClass: \"Cell__marker-in\"\n    }), createScopedElement(Icon24CheckCircleOn, {\n      vkuiClass: \"Cell__marker-in Cell__marker-in--checked\"\n    }))), before),\n    after: createScopedElement(Fragment, null, platform === IOS && draggable && createScopedElement(Touch, {\n      vkuiClass: \"Cell__dragger\",\n      onStart: onDragStart,\n      onMoveY: onDragMove,\n      onEnd: onDragEnd,\n      onClick: onDragClick\n    }, createScopedElement(Icon24ReorderIos, null)), after)\n  }));\n  return createScopedElement(\"div\", {\n    vkuiClass: classNames(getClassName('Cell', platform), {\n      'Cell--dragging': dragging,\n      'Cell--removable': removable,\n      'Cell--selectable': selectable,\n      'Cell--disabled': disabled\n    }),\n    className: className,\n    style: style,\n    ref: rootElRef\n  }, removable ? createScopedElement(Removable, {\n    removePlaceholder: removePlaceholder,\n    onRemove: function onRemove(e) {\n      return _onRemove(e, rootElRef === null || rootElRef === void 0 ? void 0 : rootElRef.current);\n    }\n  }, simpleCell) : simpleCell);\n};\nCell.defaultProps = {\n  removePlaceholder: 'Удалить'\n};","map":{"version":3,"sources":["../../../src/components/Cell/Cell.tsx"],"names":["Cell","onRemove","removePlaceholder","onDragFinish","className","style","before","after","disabled","removable","draggable","selectable","Component","onChange","name","checked","defaultChecked","getRootRef","restProps","props","rootElRef","useRef","platform","usePlatform","dragging","setDragging","useState","siblings","setSiblings","dragStartIndex","setDragStartIndex","dragEndIndex","setDragEndIndex","dragShift","setDragShift","dragDirection","setDragDirection","onDragStart","rootEl","_siblings","Array","onDragMove","e","rootGesture","siblingGesture","sibling","onDragEnd","from","to","onDragClick","toggleDrag","useContext","useEffect","simpleCell","classNames","getClassName"],"mappings":"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","sourcesContent":["import { MouseEvent, FC, useState, useRef, useEffect, useContext, Fragment } from 'react';\nimport { classNames } from '../../lib/classNames';\nimport { getClassName } from '../../helpers/getClassName';\nimport Touch, { TouchEvent } from '../Touch/Touch';\nimport { ANDROID, IOS, VKCOM } from '../../lib/platform';\nimport { Icon24Reorder, Icon24ReorderIos, Icon24CheckCircleOn, Icon24CheckCircleOff } from '@vkontakte/icons';\nimport SimpleCell, { SimpleCellProps } from '../SimpleCell/SimpleCell';\nimport { HasPlatform } from '../../types';\nimport { Removable, RemovePlaceholderProps } from '../Removable/Removable';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport { ListContext } from '../../components/List/ListContext';\n\nexport interface CellProps extends SimpleCellProps, HasPlatform, RemovePlaceholderProps {\n  /**\n   * В режиме перетаскивания ячейка перестает быть кликабельной, то есть при клике переданный onClick вызываться не будет\n   */\n  draggable?: boolean;\n  removable?: boolean;\n  /**\n   * Имя для input в режиме selectable\n   */\n  name?: string;\n  selectable?: boolean;\n  /**\n   * В режиме selectable реагирует на входящие значения пропса cheсked, как зависящий напрямую от входящего значения\n   */\n  checked?: boolean;\n  /**\n   * В режиме selectable реагирует на входящие значения пропса defaultChecked как неконтролируемый компонент\n   */\n  defaultChecked?: boolean;\n  /**\n   * Коллбэк срабатывает при клике на контрол удаления.\n   */\n  onRemove?: (e: MouseEvent, rootEl: HTMLElement) => void;\n  /**\n   * Коллбэк срабатывает при завершении перетаскивания.\n   * **Важно:** режим перетаскивания не меняет порядок ячеек в DOM. В коллбэке есть объект с полями `from` и `to`.\n   * Эти числа нужны для того, чтобы разработчик понимал, с какого индекса на какой произошел переход. В песочнице\n   * есть рабочий пример с обработкой этих чисел и перерисовкой списка.\n   */\n  onDragFinish?: ({ from, to }: { from: number; to: number }) => void;\n}\n\nexport const Cell: FC<CellProps> = (props: CellProps) => {\n  const {\n    onRemove,\n    removePlaceholder,\n    onDragFinish,\n    className,\n    style,\n    before,\n    after,\n    disabled,\n    removable,\n    draggable,\n    selectable,\n    Component,\n    onChange,\n    name,\n    checked,\n    defaultChecked,\n    getRootRef,\n    ...restProps\n  } = props;\n  const rootElRef = useRef(null);\n  const platform = usePlatform();\n\n  const [dragging, setDragging] = useState<boolean>(false);\n\n  const [siblings, setSiblings] = useState<HTMLElement[]>(undefined);\n  const [dragStartIndex, setDragStartIndex] = useState<number>(undefined);\n  const [dragEndIndex, setDragEndIndex] = useState<number>(undefined);\n  const [dragShift, setDragShift] = useState<number>(0);\n  const [dragDirection, setDragDirection] = useState<'down' | 'up'>(undefined);\n\n  const onDragStart = () => {\n    const rootEl = rootElRef?.current;\n\n    setDragging(true);\n\n    const _siblings: HTMLElement[] = Array.from(rootEl.parentElement.childNodes);\n\n    setDragStartIndex(_siblings.indexOf(rootEl));\n    setSiblings(_siblings);\n    setDragShift(0);\n  };\n\n  const onDragMove = (e: TouchEvent) => {\n    e.originalEvent.preventDefault();\n\n    const rootEl = rootElRef?.current;\n\n    rootEl.style.transform = `translateY(${e.shiftY}px)`;\n    setDragDirection(dragShift - e.shiftY < 0 ? 'down' : 'up');\n    setDragShift(e.shiftY);\n    setDragEndIndex(dragStartIndex);\n\n    siblings.forEach((sibling: HTMLElement, siblingIndex: number) => {\n      const rootGesture = rootEl.getBoundingClientRect();\n\n      const siblingGesture = sibling.getBoundingClientRect();\n\n      if (dragStartIndex < siblingIndex) {\n        if (rootGesture.bottom > siblingGesture.top + siblingGesture.height / 2) {\n          if (dragDirection === 'down') {\n            sibling.style.transform = 'translateY(-100%)';\n          }\n\n          setDragEndIndex((dragEndIndex) => dragEndIndex + 1);\n        }\n        if (rootGesture.top < siblingGesture.bottom - siblingGesture.height / 2 && dragDirection === 'up') {\n          sibling.style.transform = 'translateY(0)';\n        }\n      } else if (dragStartIndex > siblingIndex) {\n        if (rootGesture.top < siblingGesture.bottom - siblingGesture.height / 2) {\n          if (dragDirection === 'up') {\n            sibling.style.transform = 'translateY(100%)';\n          }\n\n          setDragEndIndex((dragEndIndex) => dragEndIndex - 1);\n        }\n        if (rootGesture.bottom > siblingGesture.top + siblingGesture.height / 2 && dragDirection === 'down') {\n          sibling.style.transform = 'translateY(0)';\n        }\n      }\n    });\n  };\n\n  const onDragEnd = () => {\n    const [from, to] = [dragStartIndex, dragEndIndex];\n\n    siblings.forEach((sibling: HTMLElement) => {\n      sibling.style.transform = null;\n    });\n\n    setSiblings(undefined);\n    setDragEndIndex(undefined);\n    setDragStartIndex(undefined);\n    setDragDirection(undefined);\n    setDragShift(undefined);\n\n    setDragging(false);\n\n    props.onDragFinish && props.onDragFinish({ from, to });\n  };\n\n  const onDragClick = (e: MouseEvent) => {\n    e.nativeEvent.stopPropagation();\n    e.preventDefault();\n  };\n\n  const { toggleDrag } = useContext(ListContext);\n  useEffect(() => {\n    if (dragging) {\n      toggleDrag(true);\n      return () => toggleDrag(false);\n    }\n    return undefined;\n  }, [dragging]);\n\n  const simpleCell = (\n    <SimpleCell\n      {...restProps}\n      disabled={draggable || removable || disabled}\n      Component={selectable ? 'label' : Component}\n      htmlFor={selectable ? name : undefined}\n      before={\n        <Fragment>\n          {(platform === ANDROID || platform === VKCOM) && draggable && (\n            <Touch\n              vkuiClass=\"Cell__dragger\"\n              onStart={onDragStart}\n              onMoveY={onDragMove}\n              onEnd={onDragEnd}\n              onClick={onDragClick}\n            ><Icon24Reorder /></Touch>\n          )}\n          {selectable && (\n            <Fragment>\n              <input\n                type=\"checkbox\"\n                vkuiClass=\"Cell__checkbox\"\n                name={name}\n                onChange={onChange}\n                defaultChecked={defaultChecked}\n                checked={checked}\n                disabled={disabled}\n              />\n              <span vkuiClass=\"Cell__marker\">\n                <Icon24CheckCircleOff vkuiClass=\"Cell__marker-in\" />\n                <Icon24CheckCircleOn vkuiClass=\"Cell__marker-in Cell__marker-in--checked\" />\n              </span>\n            </Fragment>\n          )}\n          {before}\n        </Fragment>\n      }\n      after={\n        <Fragment>\n          {platform === IOS && draggable && (\n            <Touch\n              vkuiClass=\"Cell__dragger\"\n              onStart={onDragStart}\n              onMoveY={onDragMove}\n              onEnd={onDragEnd}\n              onClick={onDragClick}\n            ><Icon24ReorderIos /></Touch>\n          )}\n          {after}\n        </Fragment>\n      }\n    />\n  );\n\n  return (\n    <div\n      vkuiClass={classNames(getClassName('Cell', platform), {\n        'Cell--dragging': dragging,\n        'Cell--removable': removable,\n        'Cell--selectable': selectable,\n        'Cell--disabled': disabled,\n      })}\n      className={className}\n      style={style}\n      ref={rootElRef}\n    >\n      {removable\n        ? <Removable removePlaceholder={removePlaceholder} onRemove={(e) => onRemove(e, rootElRef?.current)}>{simpleCell}</Removable>\n        : simpleCell\n      }\n    </div>\n  );\n};\n\nCell.defaultProps = {\n  removePlaceholder: 'Удалить',\n};\n"]},"metadata":{},"sourceType":"module"}