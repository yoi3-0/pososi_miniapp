{"ast":null,"code":"/**\n * Returns true if value is a number (excluding NaN), or is a numeric string.\n *\n * NOTE: It treats all Number-coercible strings as numeric (e.g. `'0x123'`, `'123e-1'`),\n * so for number-type values it's better to just use `Number.isFinite()`.\n */\nexport function isNumeric(value) {\n  return !isNaN(parseFloat(value)) && isFinite(value) // Handle `[1]` being serialized and parsed as `1`\n  && !Array.isArray(value);\n}","map":{"version":3,"sources":["../../src/common.ts"],"names":["isNaN","parseFloat","isFinite","Array"],"mappings":"AAAA;;;;;;AAMA,OAAO,SAAA,SAAA,CAAA,KAAA,EAAwC;AAC7C,SAAO,CAACA,KAAK,CAACC,UAAU,CAAjB,KAAiB,CAAX,CAAN,IACFC,QAAQ,CADN,KACM,CADN,CAEL;AAFK,KAGF,CAACC,KAAK,CAALA,OAAAA,CAHN,KAGMA,CAHN;AAID","sourcesContent":["/**\n * Returns true if value is a number (excluding NaN), or is a numeric string.\n *\n * NOTE: It treats all Number-coercible strings as numeric (e.g. `'0x123'`, `'123e-1'`),\n * so for number-type values it's better to just use `Number.isFinite()`.\n */\nexport function isNumeric(value: any): boolean {\n  return !isNaN(parseFloat(value))\n    && isFinite(value)\n    // Handle `[1]` being serialized and parsed as `1`\n    && !Array.isArray(value);\n}\n"]},"metadata":{},"sourceType":"module"}