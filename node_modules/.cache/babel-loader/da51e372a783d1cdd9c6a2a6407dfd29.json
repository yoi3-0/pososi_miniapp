{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport React, { useState } from 'react';\nimport FormField from \"../FormField/FormField\";\nimport { classNames } from \"../../lib/classNames\";\nimport Chip from \"../Chip/Chip\";\nimport { noop } from \"../../lib/utils\";\nimport { useChipsInput } from \"./useChipsInput\";\nimport { withAdaptivity } from \"../../hoc/withAdaptivity\";\nimport { prefixClass } from \"../../lib/prefixClass\";\n\nvar ChipsInput = function ChipsInput(props) {\n  var style = props.style,\n      value = props.value,\n      onChange = props.onChange,\n      onInputChange = props.onInputChange,\n      onKeyDown = props.onKeyDown,\n      onBlur = props.onBlur,\n      onFocus = props.onFocus,\n      children = props.children,\n      className = props.className,\n      inputValue = props.inputValue,\n      getRef = props.getRef,\n      getRootRef = props.getRootRef,\n      disabled = props.disabled,\n      placeholder = props.placeholder,\n      tabIndex = props.tabIndex,\n      getOptionValue = props.getOptionValue,\n      getOptionLabel = props.getOptionLabel,\n      getNewOptionData = props.getNewOptionData,\n      renderChip = props.renderChip,\n      sizeY = props.sizeY,\n      after = props.after,\n      restProps = _objectWithoutProperties(props, [\"style\", \"value\", \"onChange\", \"onInputChange\", \"onKeyDown\", \"onBlur\", \"onFocus\", \"children\", \"className\", \"inputValue\", \"getRef\", \"getRootRef\", \"disabled\", \"placeholder\", \"tabIndex\", \"getOptionValue\", \"getOptionLabel\", \"getNewOptionData\", \"renderChip\", \"sizeY\", \"after\"]);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      focused = _useState2[0],\n      setFocused = _useState2[1];\n\n  var _useChipsInput = useChipsInput(props),\n      fieldValue = _useChipsInput.fieldValue,\n      addOptionFromInput = _useChipsInput.addOptionFromInput,\n      removeOption = _useChipsInput.removeOption,\n      selectedOptions = _useChipsInput.selectedOptions,\n      handleInputChange = _useChipsInput.handleInputChange;\n\n  var handleKeyDown = function handleKeyDown(e) {\n    if (disabled || restProps.readOnly) {\n      e.preventDefault();\n      return;\n    }\n\n    onKeyDown(e);\n\n    if (e.key === 'Backspace' && !e.defaultPrevented && !fieldValue && selectedOptions.length) {\n      removeOption(getOptionValue(selectedOptions[selectedOptions.length - 1]));\n      e.preventDefault();\n    }\n\n    if (e.key === 'Enter' && !e.defaultPrevented && fieldValue) {\n      addOptionFromInput();\n      e.preventDefault();\n    }\n  };\n\n  var handleBlur = function handleBlur(e) {\n    if (focused) {\n      setFocused(false);\n    }\n\n    onBlur(e);\n  };\n\n  var handleFocus = function handleFocus(e) {\n    if (!focused) {\n      setFocused(true);\n    }\n\n    onFocus(e);\n  };\n\n  var handleChipRemove = function handleChipRemove(_, value) {\n    removeOption(value);\n  };\n\n  return createScopedElement(FormField, {\n    Component: \"label\",\n    getRootRef: getRootRef,\n    vkuiClass: classNames('ChipsInput', \"ChipsInput--sizeY-\".concat(sizeY), {\n      'ChipsInput--focused': focused,\n      'ChipsInput--withChips': !!selectedOptions.length\n    }),\n    className: className,\n    style: style,\n    disabled: disabled,\n    after: after\n  }, createScopedElement(\"div\", {\n    vkuiClass: \"ChipsInput__container\"\n  }, selectedOptions.map(function (option) {\n    var value = getOptionValue(option);\n    var label = getOptionLabel(option);\n    return createScopedElement(React.Fragment, {\n      key: value\n    }, renderChip({\n      option: option,\n      value: value,\n      label: label,\n      onRemove: handleChipRemove,\n      disabled: disabled,\n      className: prefixClass('ChipsInput__chip')\n    }));\n  }), createScopedElement(\"div\", {\n    vkuiClass: \"ChipsInput__input-container\"\n  }, createScopedElement(\"input\", _extends({\n    ref: getRef,\n    value: fieldValue,\n    autoCapitalize: \"none\",\n    autoComplete: \"off\",\n    autoCorrect: \"off\",\n    spellCheck: false,\n    \"aria-autocomplete\": \"list\",\n    tabIndex: disabled ? null : tabIndex,\n    vkuiClass: \"ChipsInput__el\",\n    onChange: handleInputChange,\n    onKeyDown: handleKeyDown,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    disabled: disabled,\n    placeholder: selectedOptions.length ? null : placeholder\n  }, restProps)))));\n};\n\nexport var chipsInputDefaultProps = {\n  type: 'text',\n  onChange: noop,\n  onInputChange: noop,\n  onKeyDown: noop,\n  onBlur: noop,\n  onFocus: noop,\n  value: [],\n  tabIndex: 0,\n  inputValue: '',\n  getOptionValue: function getOptionValue(option) {\n    return option.value;\n  },\n  getOptionLabel: function getOptionLabel(option) {\n    return option.label;\n  },\n  getNewOptionData: function getNewOptionData(_, label) {\n    return {\n      value: label,\n      label: label\n    };\n  },\n  renderChip: function renderChip(_ref) {\n    var disabled = _ref.disabled,\n        value = _ref.value,\n        label = _ref.label,\n        rest = _objectWithoutProperties(_ref, [\"disabled\", \"value\", \"label\"]);\n\n    return createScopedElement(Chip, _extends({\n      value: value,\n      removable: !disabled\n    }, rest), label);\n  }\n};\nChipsInput.defaultProps = chipsInputDefaultProps;\nexport default withAdaptivity(ChipsInput, {\n  sizeY: true\n});","map":{"version":3,"sources":["../../../src/components/ChipsInput/ChipsInput.tsx"],"names":["ChipsInput","style","value","onChange","onInputChange","onKeyDown","onBlur","onFocus","children","className","inputValue","getRef","getRootRef","disabled","placeholder","tabIndex","getOptionValue","getOptionLabel","getNewOptionData","renderChip","sizeY","after","restProps","props","focused","setFocused","useState","fieldValue","addOptionFromInput","removeOption","selectedOptions","handleInputChange","useChipsInput","handleKeyDown","e","handleBlur","handleFocus","handleChipRemove","classNames","length","label","option","onRemove","prefixClass","chipsInputDefaultProps","type","rest","withAdaptivity"],"mappings":"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","sourcesContent":["import React, {\n  useState,\n  KeyboardEvent,\n  FocusEvent,\n  InputHTMLAttributes,\n  ReactNode,\n  ChangeEvent,\n  MouseEvent,\n} from 'react';\nimport { HasAlign, HasRef, HasRootRef } from '../../types';\nimport FormField, { FormFieldProps } from '../FormField/FormField';\nimport { classNames } from '../../lib/classNames';\nimport Chip, { ChipProps } from '../Chip/Chip';\nimport { noop } from '../../lib/utils';\nimport { useChipsInput } from './useChipsInput';\nimport { withAdaptivity, AdaptivityProps } from '../../hoc/withAdaptivity';\nimport { prefixClass } from '../../lib/prefixClass';\n\nexport type ChipsInputValue = string | number;\n\nexport interface ChipsInputOption {\n  value?: ChipsInputValue;\n  label?: string;\n  [otherProp: string]: any;\n}\n\nexport interface RenderChip<Option extends ChipsInputOption> extends ChipProps {\n  label: string;\n  option: Option;\n  disabled: boolean;\n}\n\nexport interface ChipsInputProps<Option extends ChipsInputOption> extends\n  Omit<InputHTMLAttributes<HTMLInputElement>, 'value' | 'onChange'>,\n  HasRef<HTMLInputElement>,\n  HasRootRef<HTMLDivElement>,\n  HasAlign,\n  FormFieldProps,\n  AdaptivityProps {\n  value: Option[];\n  inputValue?: string;\n  onChange?: (o: Option[]) => void;\n  onInputChange?: (e?: ChangeEvent<HTMLInputElement>) => void;\n  getOptionValue?: (o?: Option) => ChipsInputValue;\n  getOptionLabel?: (o?: Option) => string;\n  getNewOptionData?: (v?: ChipsInputValue, l?: string) => Option;\n  renderChip?: (props?: RenderChip<Option>) => ReactNode;\n}\n\nconst ChipsInput = <Option extends ChipsInputOption>(props: ChipsInputProps<Option>) => {\n  const { style, value, onChange, onInputChange, onKeyDown, onBlur, onFocus, children, className, inputValue,\n    getRef, getRootRef, disabled, placeholder, tabIndex, getOptionValue, getOptionLabel, getNewOptionData, renderChip,\n    sizeY, after, ...restProps } = props;\n  const [focused, setFocused] = useState(false);\n  const { fieldValue, addOptionFromInput, removeOption, selectedOptions, handleInputChange } = useChipsInput(props);\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (disabled || restProps.readOnly) {\n      e.preventDefault();\n      return;\n    }\n\n    onKeyDown(e);\n\n    if (e.key === 'Backspace' && !e.defaultPrevented && !fieldValue && selectedOptions.length) {\n      removeOption(getOptionValue(selectedOptions[selectedOptions.length - 1]));\n      e.preventDefault();\n    }\n\n    if (e.key === 'Enter' && !e.defaultPrevented && fieldValue) {\n      addOptionFromInput();\n      e.preventDefault();\n    }\n  };\n\n  const handleBlur = (e: FocusEvent<HTMLInputElement>) => {\n    if (focused) {\n      setFocused(false);\n    }\n    onBlur(e);\n  };\n\n  const handleFocus = (e: FocusEvent<HTMLInputElement>) => {\n    if (!focused) {\n      setFocused(true);\n    }\n    onFocus(e);\n  };\n\n  const handleChipRemove = (_: MouseEvent<HTMLInputElement>, value: ChipsInputValue) => {\n    removeOption(value);\n  };\n\n  return (\n    <FormField\n      Component=\"label\"\n      getRootRef={getRootRef}\n      vkuiClass={classNames('ChipsInput', `ChipsInput--sizeY-${sizeY}`, {\n        'ChipsInput--focused': focused,\n        'ChipsInput--withChips': !!selectedOptions.length,\n      })}\n      className={className}\n      style={style}\n      disabled={disabled}\n      after={after}\n    >\n      <div vkuiClass=\"ChipsInput__container\">\n        {selectedOptions.map((option: Option) => {\n          const value = getOptionValue(option);\n          const label = getOptionLabel(option);\n\n          return (\n            <React.Fragment key={value}>\n              {renderChip({ option, value, label, onRemove: handleChipRemove, disabled, className: prefixClass('ChipsInput__chip') })}\n            </React.Fragment>\n          );\n        })}\n        <div vkuiClass=\"ChipsInput__input-container\">\n          <input ref={getRef}\n            value={fieldValue}\n            autoCapitalize=\"none\"\n            autoComplete=\"off\"\n            autoCorrect=\"off\"\n            spellCheck={false}\n            aria-autocomplete=\"list\"\n            tabIndex={disabled ? null : tabIndex}\n            vkuiClass=\"ChipsInput__el\"\n            onChange={handleInputChange}\n            onKeyDown={handleKeyDown}\n            onFocus={handleFocus}\n            onBlur={handleBlur}\n            disabled={disabled}\n            placeholder={selectedOptions.length ? null : placeholder}\n            {...restProps} />\n        </div>\n      </div>\n    </FormField>\n  );\n};\n\nexport const chipsInputDefaultProps: ChipsInputProps<any> = {\n  type: 'text',\n  onChange: noop,\n  onInputChange: noop,\n  onKeyDown: noop,\n  onBlur: noop,\n  onFocus: noop,\n  value: [],\n  tabIndex: 0,\n  inputValue: '',\n  getOptionValue: (option: ChipsInputOption): ChipsInputValue => option.value,\n  getOptionLabel: (option: ChipsInputOption): string => option.label,\n  getNewOptionData: (_: ChipsInputValue, label: string): ChipsInputOption => ({ value: label, label }),\n  renderChip({ disabled, value, label, ...rest }: RenderChip<ChipsInputOption>) {\n    return <Chip value={value}\n      removable={!disabled}\n      {...rest}\n    >{label}</Chip>;\n  },\n};\nChipsInput.defaultProps = chipsInputDefaultProps;\n\nexport default withAdaptivity(ChipsInput, { sizeY: true });\n"]},"metadata":{},"sourceType":"module"}