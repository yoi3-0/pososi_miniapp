{"ast":null,"code":"import React from 'react'; // @ts-ignore\n\nimport BrowserSymbol from 'svg-baker-runtime/browser-symbol'; // @ts-ignore\n\nimport { assign } from 'es6-object-assign';\nimport { addSpriteSymbol, useIsomorphicLayoutEffect } from '../sprite';\nimport { SvgIcon } from '../SvgIcon';\nvar viewBox = '0 0 32 32';\nvar id = 'phone_32';\nvar content = '<symbol fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\" id=\"phone_32\"><path d=\"M18.816 20.345c1.805-1.805 4.648-1.972 6.538-.383l1.365 1.15c1.559 1.313 1.717 3.677.352 5.28a4.424 4.424 0 01-2.927 1.512c-4.364.588-8.942-1.515-13.737-6.31-4.794-4.795-6.899-9.375-6.31-13.738.03-.341.1-.678.21-1.003a4.425 4.425 0 011.3-1.924c1.605-1.365 3.968-1.208 5.28.352l1.149 1.366c1.591 1.888 1.426 4.732-.38 6.538l-.98.978a.95.95 0 00-.219.999c.357.975 1.267 2.193 2.728 3.654 1.462 1.462 2.68 2.37 3.653 2.729a.95.95 0 00.999-.22z\" fill=\"currentColor\" /></symbol>';\nvar isMounted = false;\n\nfunction mountIcon() {\n  if (!isMounted) {\n    addSpriteSymbol(new BrowserSymbol({\n      id: id,\n      viewBox: viewBox,\n      content: content\n    }));\n    isMounted = true;\n  }\n}\n\nvar Icon32Phone = function Icon32Phone(props) {\n  useIsomorphicLayoutEffect(function () {\n    mountIcon();\n  }, []);\n  return /*#__PURE__*/React.createElement(SvgIcon, assign({}, props, {\n    viewBox: viewBox,\n    id: id,\n    width: !isNaN(props.width) ? +props.width : 32,\n    height: !isNaN(props.height) ? +props.height : 32\n  }));\n};\n\nIcon32Phone.mountIcon = mountIcon;\nexport default Icon32Phone;","map":{"version":3,"sources":["../../../tmp/32/phone.ts"],"names":["viewBox","id","content","isMounted","addSpriteSymbol","Icon32Phone","useIsomorphicLayoutEffect","mountIcon","assign","width","isNaN","props","height"],"mappings":"AAAA,OAAA,KAAA,MAAA,OAAA,C,CACA;;AACA,OAAA,aAAA,MAAA,kCAAA,C,CACA;;AACA,SAAA,MAAA,QAAA,mBAAA;AACA,SAAA,eAAA,EAAA,yBAAA,QAAA,WAAA;AACA,SAAA,OAAA,QAAA,YAAA;AAEA,IAAMA,OAAO,GAAb,WAAA;AACA,IAAMC,EAAE,GAAR,UAAA;AACA,IAAMC,OAAO,GAAb,6jBAAA;AAEA,IAAIC,SAAS,GAAb,KAAA;;AACA,SAAA,SAAA,GAAqB;AACnB,MAAI,CAAJ,SAAA,EAAgB;AACdC,IAAAA,eAAe,CAAC,IAAA,aAAA,CAAkB;AAChCH,MAAAA,EAAE,EAD8B,EAAA;AAEhCD,MAAAA,OAAO,EAFyB,OAAA;AAGhCE,MAAAA,OAAO,EAAEA;AAHuB,KAAlB,CAAD,CAAfE;AAMAD,IAAAA,SAAS,GAATA,IAAAA;AACD;AACF;;AASD,IAAME,WAAiC,GAAG,SAApCA,WAAoC,CAAA,KAAA,EAAW;AACnDC,EAAAA,yBAAyB,CAAC,YAAM;AAC9BC,IAAAA,SAAS;AADc,GAAA,EAAzBD,EAAyB,CAAzBA;AAIA,SAAA,aAAO,KAAK,CAAL,aAAA,CAAA,OAAA,EAA6BE,MAAM,CAAA,EAAA,EAAA,KAAA,EAAY;AACpDR,IAAAA,OAAO,EAD6C,OAAA;AAEpDC,IAAAA,EAAE,EAFkD,EAAA;AAGpDQ,IAAAA,KAAK,EAAE,CAACC,KAAK,CAACC,KAAK,CAAZ,KAAM,CAAN,GAAsB,CAACA,KAAK,CAA5B,KAAA,GAH6C,EAAA;AAIpDC,IAAAA,MAAM,EAAE,CAACF,KAAK,CAACC,KAAK,CAAZ,MAAM,CAAN,GAAuB,CAACA,KAAK,CAA7B,MAAA,GAAuC;AAJK,GAAZ,CAAnC,CAAP;AALF,CAAA;;AAaCN,WAAD,CAAA,SAACA,GAAD,SAACA;AAED,eAAA,WAAA","sourcesContent":["import React, { FC, HTMLAttributes, RefCallback, RefObject } from 'react';\n// @ts-ignore\nimport BrowserSymbol from 'svg-baker-runtime/browser-symbol';\n// @ts-ignore\nimport { assign } from 'es6-object-assign';\nimport { addSpriteSymbol, useIsomorphicLayoutEffect } from '../sprite';\nimport { SvgIcon } from '../SvgIcon';\n\nconst viewBox = '0 0 32 32';\nconst id = 'phone_32';\nconst content = '<symbol fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 32 32\" id=\"phone_32\"><path d=\"M18.816 20.345c1.805-1.805 4.648-1.972 6.538-.383l1.365 1.15c1.559 1.313 1.717 3.677.352 5.28a4.424 4.424 0 01-2.927 1.512c-4.364.588-8.942-1.515-13.737-6.31-4.794-4.795-6.899-9.375-6.31-13.738.03-.341.1-.678.21-1.003a4.425 4.425 0 011.3-1.924c1.605-1.365 3.968-1.208 5.28.352l1.149 1.366c1.591 1.888 1.426 4.732-.38 6.538l-.98.978a.95.95 0 00-.219.999c.357.975 1.267 2.193 2.728 3.654 1.462 1.462 2.68 2.37 3.653 2.729a.95.95 0 00.999-.22z\" fill=\"currentColor\" /></symbol>';\n\nlet isMounted = false;\nfunction mountIcon() {\n  if (!isMounted) {\n    addSpriteSymbol(new BrowserSymbol({\n      id: id,\n      viewBox: viewBox,\n      content: content,\n    }));\n\n    isMounted = true;\n  }\n}\n\nexport interface Icon32PhoneProps extends HTMLAttributes<HTMLDivElement> {\n  fill?: string;\n  width?: number;\n  height?: number;\n  getRootRef?: RefCallback<HTMLDivElement> | RefObject<HTMLDivElement>;\n}\n\nconst Icon32Phone: FC<Icon32PhoneProps> = (props) => {\n  useIsomorphicLayoutEffect(() => {\n    mountIcon();\n  }, []);\n\n  return React.createElement(SvgIcon, assign({}, props, {\n    viewBox: viewBox,\n    id: id,\n    width: !isNaN(props.width) ? +props.width : 32,\n    height: !isNaN(props.height) ? +props.height : 32,\n  }));\n};\n\n(Icon32Phone as any).mountIcon = mountIcon;\n\nexport default Icon32Phone;\n"]},"metadata":{},"sourceType":"module"}