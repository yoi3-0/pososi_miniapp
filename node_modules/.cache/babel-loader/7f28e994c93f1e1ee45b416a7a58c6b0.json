{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport { useCallback, useMemo, useState } from 'react';\nimport { clamp } from \"../../helpers/math\";\nimport { UniversalSlider } from \"../RangeSlider/UniversalSlider\";\n\nvar Slider = function Slider(_ref) {\n  var onChange = _ref.onChange,\n      defaultValue = _ref.defaultValue,\n      props = _objectWithoutProperties(_ref, [\"onChange\", \"defaultValue\"]);\n\n  var isControlled = props.value != null;\n\n  var _useState = useState(defaultValue == null ? props.min : defaultValue),\n      _useState2 = _slicedToArray(_useState, 2),\n      localValue = _useState2[0],\n      setValue = _useState2[1];\n\n  var value = clamp(isControlled ? props.value : localValue, props.min, props.max);\n  var handleChange = useCallback(function (nextValue, event) {\n    if (props.disabled || value === nextValue[1]) {\n      return;\n    }\n\n    !isControlled && setValue(nextValue[1]);\n    onChange && onChange(nextValue[1], event);\n  }, [onChange, isControlled, value]);\n  var rangeValue = useMemo(function () {\n    return [null, value];\n  }, [value]);\n  return createScopedElement(UniversalSlider, _extends({}, props, {\n    value: rangeValue,\n    onChange: handleChange\n  }));\n};\n\nSlider.defaultProps = {\n  min: 0,\n  max: 100,\n  step: 0\n};\nexport default Slider;","map":{"version":3,"sources":["../../../src/components/Slider/Slider.tsx"],"names":["Slider","onChange","defaultValue","props","isControlled","localValue","setValue","useState","value","clamp","handleChange","useCallback","nextValue","rangeValue","useMemo","min","max","step"],"mappings":";;;;AAAA,SAAA,WAAA,EAAA,OAAA,EAAA,QAAA,QAAA,OAAA;AACA,SAAA,KAAA,QAAA,oBAAA;AACA,SAAA,eAAA,QAAA,gCAAA;;AAIA,IAAMA,MAAM,GAAG,SAATA,MAAS,CAAA,IAAA,EAAuD;AAAA,MAApDC,QAAoD,GAAA,IAAA,CAApDA,QAAoD;AAAA,MAA1CC,YAA0C,GAAA,IAAA,CAA1CA,YAA0C;AAAA,MAAzBC,KAAyB,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,UAAA,EAAA,cAAA,CAAA,CAAA;;AACpE,MAAMC,YAAY,GAAGD,KAAK,CAALA,KAAAA,IAArB,IAAA;;AADoE,MAAA,SAAA,GAGrCI,QAAQ,CAACL,YAAY,IAAZA,IAAAA,GAAuBC,KAAK,CAA5BD,GAAAA,GAH4B,YAG7B,CAH6B;AAAA,MAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MAG7DG,UAH6D,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MAGjDC,QAHiD,GAAA,UAAA,CAAA,CAAA,CAAA;;AAIpE,MAAME,KAAK,GAAGC,KAAK,CAACL,YAAY,GAAGD,KAAK,CAAR,KAAA,GAAb,UAAA,EAA0CA,KAAK,CAA/C,GAAA,EAAqDA,KAAK,CAA7E,GAAmB,CAAnB;AAEA,MAAMO,YAA8D,GAAGC,WAAW,CAAC,UAAA,SAAA,EAAA,KAAA,EAAsB;AACvG,QAAIR,KAAK,CAALA,QAAAA,IAAkBK,KAAK,KAAKI,SAAS,CAAzC,CAAyC,CAAzC,EAA8C;AAC5C;AACD;;AACD,KAAA,YAAA,IAAiBN,QAAQ,CAACM,SAAS,CAAnC,CAAmC,CAAV,CAAzB;AACAX,IAAAA,QAAQ,IAAIA,QAAQ,CAACW,SAAS,CAAV,CAAU,CAAV,EAApBX,KAAoB,CAApBA;AALgF,GAAA,EAM/E,CAAA,QAAA,EAAA,YAAA,EANH,KAMG,CAN+E,CAAlF;AAQA,MAAMY,UAA0B,GAAGC,OAAO,CAAC,YAAA;AAAA,WAAM,CAAA,IAAA,EAAN,KAAM,CAAN;AAAD,GAAA,EAAsB,CAAhE,KAAgE,CAAtB,CAA1C;AACA,SAAO,mBAAA,CAAA,eAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAA4B,IAAA,KAAK,EAAjC,UAAA;AAA+C,IAAA,QAAQ,EAAEJ;AAAzD,GAAA,CAAA,CAAP;AAfF,CAAA;;AAkBAV,MAAM,CAANA,YAAAA,GAAsB;AACpBe,EAAAA,GAAG,EADiB,CAAA;AAEpBC,EAAAA,GAAG,EAFiB,GAAA;AAGpBC,EAAAA,IAAI,EAAE;AAHc,CAAtBjB;AAMA,eAAA,MAAA","sourcesContent":["import { useCallback, useMemo, useState } from 'react';\nimport { clamp } from '../../helpers/math';\nimport { UniversalSlider, UniversalSliderProps, UniversalValue } from '../RangeSlider/UniversalSlider';\n\nexport type SliderProps = UniversalSliderProps<number>;\n\nconst Slider = ({ onChange, defaultValue, ...props }: SliderProps) => {\n  const isControlled = props.value != null;\n\n  const [localValue, setValue] = useState(defaultValue == null ? props.min : defaultValue);\n  const value = clamp(isControlled ? props.value : localValue, props.min, props.max);\n\n  const handleChange: UniversalSliderProps<UniversalValue>['onChange'] = useCallback((nextValue, event) => {\n    if (props.disabled || value === nextValue[1]) {\n      return;\n    }\n    !isControlled && setValue(nextValue[1]);\n    onChange && onChange(nextValue[1], event);\n  }, [onChange, isControlled, value]);\n\n  const rangeValue: [null, number] = useMemo(() => [null, value], [value]);\n  return <UniversalSlider {...props} value={rangeValue} onChange={handleChange} />;\n};\n\nSlider.defaultProps = {\n  min: 0,\n  max: 100,\n  step: 0,\n};\n\nexport default Slider;\n"]},"metadata":{},"sourceType":"module"}