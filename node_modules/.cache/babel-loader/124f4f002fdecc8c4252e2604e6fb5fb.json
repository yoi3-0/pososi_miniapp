{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport { createScopedElement } from \"../lib/jsxRuntime\";\nimport { useContext } from 'react';\nimport { AdaptivityContext, SizeType, ViewHeight, ViewWidth } from \"../components/AdaptivityProvider/AdaptivityContext\";\nexport { SizeType, ViewWidth, ViewHeight };\nexport function withAdaptivity(TargetComponent, config) {\n  function AdaptivityConsumer(props) {\n    var context = useContext(AdaptivityContext);\n    var update = false;\n\n    if (props.sizeX || props.sizeY) {\n      update = true;\n    }\n\n    var sizeX = props.sizeX || context.sizeX;\n    var sizeY = props.sizeY || context.sizeY;\n    var viewWidth = context.viewWidth;\n    var viewHeight = context.viewHeight;\n    var hasMouse = context.hasMouse;\n    var adaptivityProps = {};\n    config.sizeX ? adaptivityProps.sizeX = sizeX : undefined;\n    config.sizeY ? adaptivityProps.sizeY = sizeY : undefined;\n    config.viewWidth ? adaptivityProps.viewWidth = viewWidth : undefined;\n    config.viewHeight ? adaptivityProps.viewHeight = viewHeight : undefined;\n    config.hasMouse ? adaptivityProps.hasMouse = hasMouse : undefined; // @ts-ignore\n\n    var target = createScopedElement(TargetComponent, _extends({}, props, adaptivityProps));\n\n    if (update) {\n      return createScopedElement(AdaptivityContext.Provider, {\n        value: {\n          sizeX: sizeX,\n          sizeY: sizeY,\n          viewWidth: viewWidth,\n          viewHeight: viewHeight,\n          hasMouse: hasMouse\n        }\n      }, target);\n    }\n\n    return target;\n  }\n\n  return AdaptivityConsumer;\n}","map":{"version":3,"sources":["../../src/hoc/withAdaptivity.tsx"],"names":["context","useContext","update","props","sizeX","sizeY","viewWidth","viewHeight","hasMouse","adaptivityProps","config","target"],"mappings":";;AAAA,SAAA,UAAA,QAAA,OAAA;AACA,SAAA,iBAAA,EAAA,QAAA,EAAA,UAAA,EAAA,SAAA,QAAA,oDAAA;AAUA,SAAA,QAAA,EAAA,SAAA,EAAA,UAAA;AAEA,OAAO,SAAA,cAAA,CAAA,eAAA,EAAA,MAAA,EAAkE;AACvE,WAAA,kBAAA,CAAA,KAAA,EAAoD;AAClD,QAAMA,OAAO,GAAGC,UAAU,CAA1B,iBAA0B,CAA1B;AACA,QAAIC,MAAM,GAAV,KAAA;;AAEA,QAAIC,KAAK,CAALA,KAAAA,IAAeA,KAAK,CAAxB,KAAA,EAAgC;AAC9BD,MAAAA,MAAM,GAANA,IAAAA;AACD;;AAED,QAAME,KAAK,GAAGD,KAAK,CAALA,KAAAA,IAAeH,OAAO,CAApC,KAAA;AACA,QAAMK,KAAK,GAAGF,KAAK,CAALA,KAAAA,IAAeH,OAAO,CAApC,KAAA;AACA,QAAMM,SAAS,GAAGN,OAAO,CAAzB,SAAA;AACA,QAAMO,UAAU,GAAGP,OAAO,CAA1B,UAAA;AACA,QAAMQ,QAAQ,GAAGR,OAAO,CAAxB,QAAA;AAEA,QAAMS,eAML,GAND,EAAA;AAOAC,IAAAA,MAAM,CAANA,KAAAA,GAAeD,eAAe,CAAfA,KAAAA,GAAfC,KAAAA,GAAAA,SAAAA;AACAA,IAAAA,MAAM,CAANA,KAAAA,GAAeD,eAAe,CAAfA,KAAAA,GAAfC,KAAAA,GAAAA,SAAAA;AACAA,IAAAA,MAAM,CAANA,SAAAA,GAAmBD,eAAe,CAAfA,SAAAA,GAAnBC,SAAAA,GAAAA,SAAAA;AACAA,IAAAA,MAAM,CAANA,UAAAA,GAAoBD,eAAe,CAAfA,UAAAA,GAApBC,UAAAA,GAAAA,SAAAA;AACAA,IAAAA,MAAM,CAANA,QAAAA,GAAkBD,eAAe,CAAfA,QAAAA,GAAlBC,QAAAA,GAzBkD,SAyBlDA,CAzBkD,CA2BlD;;AACA,QAAMC,MAAM,GAAG,mBAAA,CAAA,eAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAf,eAAe,CAAA,CAAf;;AAEA,QAAA,MAAA,EAAY;AACV,aAAO,mBAAA,CAAC,iBAAD,CAAA,QAAA,EAAA;AAA4B,QAAA,KAAK,EAAE;AAAEP,UAAAA,KAAK,EAAP,KAAA;AAASC,UAAAA,KAAK,EAAd,KAAA;AAAgBC,UAAAA,SAAS,EAAzB,SAAA;AAA2BC,UAAAA,UAAU,EAArC,UAAA;AAAuCC,UAAAA,QAAQ,EAARA;AAAvC;AAAnC,OAAA,EAAP,MAAO,CAAP;AAGD;;AAED,WAAA,MAAA;AACD;;AAED,SAAA,kBAAA;AACD","sourcesContent":["import { useContext } from 'react';\nimport { AdaptivityContext, SizeType, ViewHeight, ViewWidth } from '../components/AdaptivityProvider/AdaptivityContext';\n\ninterface Config {\n  sizeX?: boolean;\n  sizeY?: boolean;\n  viewWidth?: boolean;\n  viewHeight?: boolean;\n  hasMouse?: boolean;\n}\n\nexport { SizeType, ViewWidth, ViewHeight };\n\nexport function withAdaptivity<T>(TargetComponent: T, config: Config): T {\n  function AdaptivityConsumer(props: AdaptivityProps) {\n    const context = useContext(AdaptivityContext);\n    let update = false;\n\n    if (props.sizeX || props.sizeY) {\n      update = true;\n    }\n\n    const sizeX = props.sizeX || context.sizeX;\n    const sizeY = props.sizeY || context.sizeY;\n    const viewWidth = context.viewWidth;\n    const viewHeight = context.viewHeight;\n    const hasMouse = context.hasMouse;\n\n    const adaptivityProps: {\n      sizeX?: SizeType;\n      sizeY?: SizeType;\n      viewWidth?: ViewWidth;\n      viewHeight?: ViewHeight;\n      hasMouse?: boolean;\n    } = {};\n    config.sizeX ? adaptivityProps.sizeX = sizeX : undefined;\n    config.sizeY ? adaptivityProps.sizeY = sizeY : undefined;\n    config.viewWidth ? adaptivityProps.viewWidth = viewWidth : undefined;\n    config.viewHeight ? adaptivityProps.viewHeight = viewHeight : undefined;\n    config.hasMouse ? adaptivityProps.hasMouse = hasMouse : undefined;\n\n    // @ts-ignore\n    const target = <TargetComponent {...props} {...adaptivityProps} />;\n\n    if (update) {\n      return <AdaptivityContext.Provider value={{ sizeX, sizeY, viewWidth, viewHeight, hasMouse }}>\n        {target}\n      </AdaptivityContext.Provider>;\n    }\n\n    return target;\n  }\n\n  return AdaptivityConsumer as unknown as T;\n}\n\nexport interface AdaptivityProps {\n  sizeX?: SizeType;\n  sizeY?: SizeType;\n  /**\n   * @ignore\n   */\n  viewWidth?: ViewWidth;\n  /**\n   * @ignore\n   */\n  viewHeight?: ViewHeight;\n  /**\n   * @ignore\n   */\n  hasMouse?: boolean;\n}\n"]},"metadata":{},"sourceType":"module"}