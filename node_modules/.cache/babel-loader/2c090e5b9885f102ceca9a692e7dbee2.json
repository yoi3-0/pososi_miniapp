{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n/**\n * Вычисляет сумму элементов массива\n */\n\nexport function sumArray(array) {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n\n  return array.reduce(function (previous, current) {\n    return current + previous;\n  });\n}\n/**\n * Находит среднее арифметическое элементов массива\n */\n\nexport function averageArray(array) {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n\n  return sumArray(array) / array.length;\n}\n/**\n * Возвращает новый массив с уникальными элементами\n */\n\nexport function uniqueArray(array) {\n  return array.filter(function (value, index, self) {\n    return self.indexOf(value) === index;\n  });\n}\n/**\n * Перемешивает исходный массив и возвращает новый\n */\n\nexport function shuffleArray(array) {\n  return array.map(function (a) {\n    return [Math.random(), a];\n  }).sort(function (a, b) {\n    return a[0] - b[0];\n  }).map(function (a) {\n    return a[1];\n  });\n}\n/**\n * Разбивает массив на чанки\n */\n\nexport function chunkArray(array, size) {\n  if (!array.length) {\n    return [];\n  }\n\n  var head = array.slice(0, size);\n  var tail = array.slice(size);\n  return [head].concat(_toConsumableArray(chunkArray(tail, size)));\n}\n/**\n * Удаляет из массива элемент по значению.\n * Если элемент был удалён – возвращает новый массив.\n *\n * @example\n *\n * omitFromArray([1, 2, 3], 3) // [1, 2]\n * omitFromArray([1, 2, 3], 5) // [1, 2, 3]\n */\n\nexport function omitFromArray() {\n  var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var value = arguments.length > 1 ? arguments[1] : undefined;\n  var index = array.indexOf(value);\n\n  if (index < 0) {\n    return array;\n  } else {\n    return [].concat(_toConsumableArray(array.slice(0, index)), _toConsumableArray(array.slice(index + 1)));\n  }\n}\n/**\n * Возвращает разницу между двумя массивами.\n * Вернёт элементы, которых не хватает во втором массиве.\n *\n * @example\n *\n * difference([1, 2, 3], [1, 2, 3]) // []\n * difference([1, 2, 3], [1]) // [2, 3]\n * difference([1, 2, 3], [1, 10, 100]) // [2, 3]\n */\n\nexport function difference() {\n  var array1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var array2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return array1.reduce(function (res, item) {\n    if (array2.indexOf(item) < 0) {\n      res.push(item);\n    }\n\n    return res;\n  }, []);\n}","map":{"version":3,"sources":["../../src/arrays.ts"],"names":["Array","array","current","sumArray","self","Math","a","b","head","tail","chunkArray","value","index","array1","array2","res"],"mappings":"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","sourcesContent":["/**\n * Вычисляет сумму элементов массива\n */\nexport function sumArray(array: number[]): number {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n  return array.reduce((previous, current) => current + previous);\n}\n\n/**\n * Находит среднее арифметическое элементов массива\n */\nexport function averageArray(array: number[]): number {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n  return sumArray(array) / array.length;\n}\n\n/**\n * Возвращает новый массив с уникальными элементами\n */\nexport function uniqueArray<T>(array: T[]): T[] {\n  return array.filter((value, index, self) => {\n    return self.indexOf(value) === index;\n  });\n}\n\n/**\n * Перемешивает исходный массив и возвращает новый\n */\nexport function shuffleArray<T>(array: T[]): T[] {\n  return array\n    .map<[number, T]>((a) => [Math.random(), a])\n    .sort((a, b) => a[0] - b[0])\n    .map<T>((a) => a[1]);\n}\n\n/**\n * Разбивает массив на чанки\n */\nexport function chunkArray<T>(array: T[], size: number): T[][] {\n  if (!array.length) {\n    return [];\n  }\n  const head = array.slice(0, size);\n  const tail = array.slice(size);\n\n  return [head, ...chunkArray(tail, size)];\n}\n\n/**\n * Удаляет из массива элемент по значению.\n * Если элемент был удалён – возвращает новый массив.\n *\n * @example\n *\n * omitFromArray([1, 2, 3], 3) // [1, 2]\n * omitFromArray([1, 2, 3], 5) // [1, 2, 3]\n */\nexport function omitFromArray<T>(array: T[] = [], value: T): T[] {\n  const index = array.indexOf(value);\n\n  if (index < 0) {\n    return array;\n  } else {\n    return [...array.slice(0, index), ...array.slice(index + 1)];\n  }\n}\n\n/**\n * Возвращает разницу между двумя массивами.\n * Вернёт элементы, которых не хватает во втором массиве.\n *\n * @example\n *\n * difference([1, 2, 3], [1, 2, 3]) // []\n * difference([1, 2, 3], [1]) // [2, 3]\n * difference([1, 2, 3], [1, 10, 100]) // [2, 3]\n */\nexport function difference<T>(array1: T[] = [], array2: T[] = []) {\n  return array1.reduce<T[]>((res, item) => {\n    if (array2.indexOf(item) < 0) {\n      res.push(item);\n    }\n    return res;\n  }, []);\n}\n"]},"metadata":{},"sourceType":"module"}