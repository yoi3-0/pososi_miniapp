{"ast":null,"code":"import { canUseDOM, canUseEventListeners } from './dom';\n/**\n * Функция для js анимации\n * @param {number} duration\n * @param {function} timing тайминг функция анимации\n * @param {function} draw коллбэк, в который прокидывается прогресс [0, 1]\n * @returns {void}\n */\n\nexport function animate(_ref) {\n  var duration = _ref.duration,\n      timing = _ref.timing,\n      draw = _ref.draw;\n\n  if (!canUseDOM) {\n    return;\n  }\n\n  var start = window.performance.now();\n  window.requestAnimationFrame(function animate(time) {\n    var timeFraction = (time - start) / duration;\n\n    if (timeFraction > 1) {\n      timeFraction = 1;\n    }\n\n    var progress = timing(timeFraction);\n    draw(progress);\n\n    if (timeFraction < 1) {\n      window.requestAnimationFrame(animate);\n    }\n  });\n} // WebKitAnimationEvent и WebKitTransitionEvent не существуют в глобальном контексте\n\nexport var animationEvent = {\n  supported: false,\n  name: 'animationend'\n};\nexport var transitionEvent = {\n  supported: false,\n  name: 'transitionend'\n};\n\nif (canUseDOM) {\n  if (typeof AnimationEvent !== 'undefined') {\n    animationEvent.supported = true;\n  } else if (typeof WebKitAnimationEvent !== 'undefined') {\n    animationEvent.supported = true; // webkitAnimationEnd не входит в перечисление событий, но соответствует animationend\n\n    animationEvent.name = 'webkitAnimationEnd';\n  }\n\n  if (typeof TransitionEvent !== 'undefined') {\n    transitionEvent.supported = true;\n  } else if (typeof WebKitTransitionEvent !== 'undefined') {\n    transitionEvent.supported = true; // webkitTransitionEnd не входит в перечисление событий, но соответствует transitionend\n\n    transitionEvent.name = 'webkitTransitionEnd';\n  }\n}\n/**\n * Ожидание окончания анимации на элементе\n *\n * @param listener коллбэк окончания ожидания\n * @param fallbackTime сколько ждать в мс если событие не поддерживается\n * @param el элемент\n */\n\n\nexport function waitAnimationEnd(listener, fallbackTime, el) {\n  if (canUseEventListeners) {\n    if (animationEvent.supported && el) {\n      el.addEventListener(animationEvent.name, listener);\n    } else {\n      return window.setTimeout(listener, fallbackTime);\n    }\n  }\n}\n/**\n * Прекращение ожидания окончания анимации на элементе\n *\n * @param listener коллбэк окончания ожидания\n * @param handle то, что вернулось из ```waitAnimationEnd```\n * @param el элемент\n */\n\nexport function cancelWaitAnimationEnd(listener, handle, el) {\n  if (canUseEventListeners) {\n    if (animationEvent.supported && el) {\n      el.removeEventListener(animationEvent.name, listener);\n    } else {\n      window.clearTimeout(handle);\n    }\n  }\n}\n/**\n * Ожидание окончания анимации перехода на элементе\n *\n * @param listener коллбэк окончания ожидания\n * @param fallbackTime сколько ждать в мс если событие не поддерживается\n * @param el элемент\n */\n\nexport function waitTransitionEnd(el, listener, fallbackTime) {\n  if (canUseEventListeners) {\n    if (transitionEvent.supported && el) {\n      el.addEventListener(transitionEvent.name, listener);\n    } else {\n      return window.setTimeout(listener, fallbackTime);\n    }\n  }\n}\n/**\n * Прекращение ожидания окончания анимации перехода на элементе\n *\n * @param listener коллбэк окончания ожидания\n * @param handle то, что вернулось из ```waitTransitionEnd```\n * @param el элемент\n */\n\nexport function cancelWaitTransitionEnd(listener, handle, el) {\n  if (canUseEventListeners) {\n    if (transitionEvent.supported && el) {\n      el.removeEventListener(transitionEvent.name, listener);\n    } else {\n      window.clearTimeout(handle);\n    }\n  }\n}","map":{"version":3,"sources":["../../src/animate.ts"],"names":["duration","timing","draw","start","window","timeFraction","time","progress","animationEvent","supported","name","transitionEvent","el"],"mappings":"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","sourcesContent":["import { canUseDOM, canUseEventListeners } from './dom';\nimport { SupportEvent } from './types';\n\ntype TimingInterface = (timeFraction: number) => number;\n\ntype DrawInterface = (progress: number) => void;\n\ninterface AnimateArgumentsInterface {\n  duration: number;\n  timing: TimingInterface;\n  draw: DrawInterface;\n}\n\n/**\n * Функция для js анимации\n * @param {number} duration\n * @param {function} timing тайминг функция анимации\n * @param {function} draw коллбэк, в который прокидывается прогресс [0, 1]\n * @returns {void}\n */\nexport function animate({ duration, timing, draw }: AnimateArgumentsInterface) {\n  if (!canUseDOM) {\n    return;\n  }\n\n  const start = window.performance.now();\n\n  window.requestAnimationFrame(function animate(time) {\n    let timeFraction = (time - start) / duration;\n\n    if (timeFraction > 1) {\n      timeFraction = 1;\n    }\n\n    const progress = timing(timeFraction);\n\n    draw(progress);\n\n    if (timeFraction < 1) {\n      window.requestAnimationFrame(animate);\n    }\n  });\n}\n\n// WebKitAnimationEvent и WebKitTransitionEvent не существуют в глобальном контексте\ndeclare const WebKitAnimationEvent: AnimationEvent;\ndeclare const WebKitTransitionEvent: TransitionEvent;\n\nexport const animationEvent: SupportEvent<'animationend'> = {\n  supported: false,\n  name: 'animationend',\n};\n\nexport const transitionEvent: SupportEvent<'transitionend'> = {\n  supported: false,\n  name: 'transitionend',\n};\n\nif (canUseDOM) {\n  if (typeof AnimationEvent !== 'undefined') {\n    animationEvent.supported = true;\n  } else if (typeof WebKitAnimationEvent !== 'undefined') {\n    animationEvent.supported = true;\n\n    // webkitAnimationEnd не входит в перечисление событий, но соответствует animationend\n    animationEvent.name = 'webkitAnimationEnd' as unknown as 'animationend';\n  }\n\n  if (typeof TransitionEvent !== 'undefined') {\n    transitionEvent.supported = true;\n  } else if (typeof WebKitTransitionEvent !== 'undefined') {\n    transitionEvent.supported = true;\n\n    // webkitTransitionEnd не входит в перечисление событий, но соответствует transitionend\n    transitionEvent.name = 'webkitTransitionEnd' as unknown as 'transitionend';\n  }\n}\n\n/**\n * Ожидание окончания анимации на элементе\n *\n * @param listener коллбэк окончания ожидания\n * @param fallbackTime сколько ждать в мс если событие не поддерживается\n * @param el элемент\n */\nexport function waitAnimationEnd(listener: (ev?: AnimationEvent) => any, fallbackTime: number, el?: GlobalEventHandlers) {\n  if (canUseEventListeners) {\n    if (animationEvent.supported && el) {\n      el.addEventListener(animationEvent.name, listener);\n    } else {\n      return window.setTimeout(listener, fallbackTime);\n    }\n  }\n}\n\n/**\n * Прекращение ожидания окончания анимации на элементе\n *\n * @param listener коллбэк окончания ожидания\n * @param handle то, что вернулось из ```waitAnimationEnd```\n * @param el элемент\n */\nexport function cancelWaitAnimationEnd(listener: (ev?: AnimationEvent) => any, handle?: number, el?: GlobalEventHandlers) {\n  if (canUseEventListeners) {\n    if (animationEvent.supported && el) {\n      el.removeEventListener(animationEvent.name, listener);\n    } else {\n      window.clearTimeout(handle);\n    }\n  }\n}\n\n/**\n * Ожидание окончания анимации перехода на элементе\n *\n * @param listener коллбэк окончания ожидания\n * @param fallbackTime сколько ждать в мс если событие не поддерживается\n * @param el элемент\n */\nexport function waitTransitionEnd(el: GlobalEventHandlers, listener: (ev?: TransitionEvent) => any, fallbackTime: number) {\n  if (canUseEventListeners) {\n    if (transitionEvent.supported && el) {\n      el.addEventListener(transitionEvent.name, listener);\n    } else {\n      return window.setTimeout(listener, fallbackTime);\n    }\n  }\n}\n\n/**\n * Прекращение ожидания окончания анимации перехода на элементе\n *\n * @param listener коллбэк окончания ожидания\n * @param handle то, что вернулось из ```waitTransitionEnd```\n * @param el элемент\n */\nexport function cancelWaitTransitionEnd(listener: (ev?: TransitionEvent) => any, handle?: number, el?: GlobalEventHandlers) {\n  if (canUseEventListeners) {\n    if (transitionEvent.supported && el) {\n      el.removeEventListener(transitionEvent.name, listener);\n    } else {\n      window.clearTimeout(handle);\n    }\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}