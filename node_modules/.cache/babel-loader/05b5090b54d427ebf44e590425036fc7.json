{"ast":null,"code":"import { createContext } from 'react';\nimport vkBridge from '@vkontakte/vk-bridge';\nimport { platform } from \"../../lib/platform\";\nexport var Appearance;\n\n(function (Appearance) {\n  Appearance[\"DARK\"] = \"dark\";\n  Appearance[\"LIGHT\"] = \"light\";\n})(Appearance || (Appearance = {}));\n\nexport var Scheme; // Схемы, которых нет в VKUI, но мы знаем их appearance\n\n(function (Scheme) {\n  Scheme[\"DEPRECATED_CLIENT_LIGHT\"] = \"client_light\";\n  Scheme[\"DEPRECATED_CLIENT_DARK\"] = \"client_dark\";\n  Scheme[\"BRIGHT_LIGHT\"] = \"bright_light\";\n  Scheme[\"SPACE_GRAY\"] = \"space_gray\";\n  Scheme[\"VKCOM\"] = \"vkcom\";\n})(Scheme || (Scheme = {}));\n\nexport var ExternalScheme;\n\n(function (ExternalScheme) {\n  ExternalScheme[\"VKCOM_LIGHT\"] = \"vkcom_light\";\n  ExternalScheme[\"VKCOM_DARK\"] = \"vkcom_dark\";\n})(ExternalScheme || (ExternalScheme = {}));\n\nexport var WebviewType;\n\n(function (WebviewType) {\n  WebviewType[\"VKAPPS\"] = \"vkapps\";\n  WebviewType[\"INTERNAL\"] = \"internal\";\n})(WebviewType || (WebviewType = {}));\n\nexport var defaultConfigProviderProps = {\n  webviewType: WebviewType.VKAPPS,\n  isWebView: vkBridge.isWebView(),\n  scheme: Scheme.BRIGHT_LIGHT,\n  transitionMotionEnabled: true,\n  platform: platform() // appearance is auto-detected by default\n  // appearance: Appearance.LIGHT,\n\n};\nexport var ConfigProviderContext = /*#__PURE__*/createContext(defaultConfigProviderProps);","map":{"version":3,"sources":["../../../src/components/ConfigProvider/ConfigProviderContext.tsx"],"names":["Appearance","Scheme","ExternalScheme","WebviewType","defaultConfigProviderProps","webviewType","isWebView","vkBridge","scheme","transitionMotionEnabled","platform","ConfigProviderContext","createContext"],"mappings":"AAAA,SAAA,aAAA,QAAA,OAAA;AACA,OAAA,QAAA,MAAA,sBAAA;AACA,SAAA,QAAA,QAAA,oBAAA;AAEA,OAAA,IAAA,UAAA;;WAAYA,U;AAAAA,EAAAA,U,QAAAA,G,MAAAA;AAAAA,EAAAA,U,SAAAA,G,OAAAA;GAAAA,U,KAAAA,U;;AAKZ,OAAA,IAAA,MAAA,C,CAQA;;WARYC,M;AAAAA,EAAAA,M,2BAAAA,G,cAAAA;AAAAA,EAAAA,M,0BAAAA,G,aAAAA;AAAAA,EAAAA,M,gBAAAA,G,cAAAA;AAAAA,EAAAA,M,cAAAA,G,YAAAA;AAAAA,EAAAA,M,SAAAA,G,OAAAA;GAAAA,M,KAAAA,M;;AASZ,OAAA,IAAA,cAAA;;WAAYC,c;AAAAA,EAAAA,c,eAAAA,G,aAAAA;AAAAA,EAAAA,c,cAAAA,G,YAAAA;GAAAA,c,KAAAA,c;;AAOZ,OAAA,IAAA,WAAA;;WAAYC,W;AAAAA,EAAAA,W,UAAAA,G,QAAAA;AAAAA,EAAAA,W,YAAAA,G,UAAAA;GAAAA,W,KAAAA,W;;AAiCZ,OAAO,IAAMC,0BAA0B,GAAG;AACxCC,EAAAA,WAAW,EAAEF,WAAW,CADgB,MAAA;AAExCG,EAAAA,SAAS,EAAEC,QAAQ,CAFqB,SAE7BA,EAF6B;AAGxCC,EAAAA,MAAM,EAAEP,MAAM,CAH0B,YAAA;AAIxCQ,EAAAA,uBAAuB,EAJiB,IAAA;AAKxCC,EAAAA,QAAQ,EAAEA,QAL8B,EAAA,CAMxC;AACA;;AAPwC,CAAnC;AAUP,OAAO,IAAMC,qBAAqB,GAAA,aAAGC,aAAa,CAA3C,0BAA2C,CAA3C","sourcesContent":["import { createContext } from 'react';\nimport vkBridge, { AppearanceSchemeType, AppearanceType } from '@vkontakte/vk-bridge';\nimport { PlatformType, platform } from '../../lib/platform';\n\nexport enum Appearance {\n  DARK = 'dark',\n  LIGHT = 'light',\n}\n\nexport enum Scheme {\n  DEPRECATED_CLIENT_LIGHT = 'client_light',\n  DEPRECATED_CLIENT_DARK = 'client_dark',\n  BRIGHT_LIGHT = 'bright_light',\n  SPACE_GRAY = 'space_gray',\n  VKCOM = 'vkcom'\n}\n\n// Схемы, которых нет в VKUI, но мы знаем их appearance\nexport enum ExternalScheme {\n  VKCOM_LIGHT = 'vkcom_light',\n  VKCOM_DARK = 'vkcom_dark'\n}\n\nexport type AppearanceScheme = AppearanceSchemeType | Scheme.VKCOM | 'inherit';\n\nexport enum WebviewType {\n  VKAPPS = 'vkapps',\n  INTERNAL = 'internal',\n}\n\nexport interface ConfigProviderContextInterface {\n  /**\n   * Подсказывает приложению, обёрнутому в `ConfigProvider`, где открыто приложение: внутри webview или в мобильном браузере\n   */\n  isWebView?: boolean;\n  /**\n   * Тип вебвью.<br>\n   * В случае `WebviewType.VKAPPS` интерфейс будет адаптирован для отображения в вебвью Mini Apps (системные контролы в правой части шапки)\n   */\n  webviewType?: WebviewType.INTERNAL | WebviewType.VKAPPS;\n  /**\n   * Тип приложения\n   */\n  app?: string;\n  /**\n   * Тип цветовой схемы – `light` или `dark`\n   */\n  appearance?: AppearanceType;\n  /**\n   * Включена ли анимация переходов между экранами в `Root` и `View`\n   */\n  transitionMotionEnabled?: boolean;\n  /**\n   * Платформа\n   */\n  platform?: PlatformType;\n}\n\nexport const defaultConfigProviderProps = {\n  webviewType: WebviewType.VKAPPS,\n  isWebView: vkBridge.isWebView(),\n  scheme: Scheme.BRIGHT_LIGHT,\n  transitionMotionEnabled: true,\n  platform: platform(),\n  // appearance is auto-detected by default\n  // appearance: Appearance.LIGHT,\n};\n\nexport const ConfigProviderContext = createContext<ConfigProviderContextInterface>(defaultConfigProviderProps);\n"]},"metadata":{},"sourceType":"module"}